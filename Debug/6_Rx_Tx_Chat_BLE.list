
6_Rx_Tx_Chat_BLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069b0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  08006b50  08006b50  00016b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f10  08006f10  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  08006f10  08006f10  00016f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f18  08006f18  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f18  08006f18  00016f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f1c  08006f1c  00016f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08006f20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007c4  200000b0  08006fd0  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000874  08006fd0  00020874  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027133  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a6e  00000000  00000000  00047213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b0  00000000  00000000  0004ac88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001380  00000000  00000000  0004c138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a434  00000000  00000000  0004d4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017792  00000000  00000000  000678ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094c34  00000000  00000000  0007f07e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00113cb2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006048  00000000  00000000  00113d08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000b0 	.word	0x200000b0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006b38 	.word	0x08006b38

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000b4 	.word	0x200000b4
 80001dc:	08006b38 	.word	0x08006b38

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <HCI_TL_SPI_Enable_IRQ>:
 * @brief  Enable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Enable_IRQ(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(HCI_TL_SPI_EXTI_IRQn);
 800058c:	2006      	movs	r0, #6
 800058e:	f001 f9e6 	bl	800195e <HAL_NVIC_EnableIRQ>
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}

08000596 <HCI_TL_SPI_Disable_IRQ>:
 * @brief  Disable SPI IRQ.
 * @param  None
 * @retval None
 */
static void HCI_TL_SPI_Disable_IRQ(void)
{
 8000596:	b580      	push	{r7, lr}
 8000598:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(HCI_TL_SPI_EXTI_IRQn);
 800059a:	2006      	movs	r0, #6
 800059c:	f001 f9ed 	bl	800197a <HAL_NVIC_DisableIRQ>
}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <HCI_TL_SPI_Init>:
 *
 * @param  void* Pointer to configuration struct
 * @retval int32_t Status
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	4b20      	ldr	r3, [pc, #128]	; (8000634 <HCI_TL_SPI_Init+0x90>)
 80005b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b4:	4a1f      	ldr	r2, [pc, #124]	; (8000634 <HCI_TL_SPI_Init+0x90>)
 80005b6:	f043 0301 	orr.w	r3, r3, #1
 80005ba:	6313      	str	r3, [r2, #48]	; 0x30
 80005bc:	4b1d      	ldr	r3, [pc, #116]	; (8000634 <HCI_TL_SPI_Init+0x90>)
 80005be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c0:	f003 0301 	and.w	r3, r3, #1
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	68bb      	ldr	r3, [r7, #8]

  /* Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80005c8:	2301      	movs	r3, #1
 80005ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005cc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80005d6:	f107 030c 	add.w	r3, r7, #12
 80005da:	4619      	mov	r1, r3
 80005dc:	4816      	ldr	r0, [pc, #88]	; (8000638 <HCI_TL_SPI_Init+0x94>)
 80005de:	f001 fa39 	bl	8001a54 <HAL_GPIO_Init>

  /* Configure RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80005e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e8:	2301      	movs	r3, #1
 80005ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	4619      	mov	r1, r3
 80005fa:	480f      	ldr	r0, [pc, #60]	; (8000638 <HCI_TL_SPI_Init+0x94>)
 80005fc:	f001 fa2a 	bl	8001a54 <HAL_GPIO_Init>

  /* Configure CS */
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8000600:	2302      	movs	r3, #2
 8000602:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000604:	2301      	movs	r3, #1
 8000606:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000608:	2300      	movs	r3, #0
 800060a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060c:	2300      	movs	r3, #0
 800060e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct);
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	4619      	mov	r1, r3
 8000616:	4808      	ldr	r0, [pc, #32]	; (8000638 <HCI_TL_SPI_Init+0x94>)
 8000618:	f001 fa1c 	bl	8001a54 <HAL_GPIO_Init>
  /* Deselect CS PIN for BlueNRG at startup to avoid spurious commands */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800061c:	2201      	movs	r2, #1
 800061e:	2102      	movs	r1, #2
 8000620:	4805      	ldr	r0, [pc, #20]	; (8000638 <HCI_TL_SPI_Init+0x94>)
 8000622:	f001 fc97 	bl	8001f54 <HAL_GPIO_WritePin>

  return BSP_SPI1_Init();
 8000626:	f000 fe0d 	bl	8001244 <BSP_SPI1_Init>
 800062a:	4603      	mov	r3, r0
}
 800062c:	4618      	mov	r0, r3
 800062e:	3720      	adds	r7, #32
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40023800 	.word	0x40023800
 8000638:	40020000 	.word	0x40020000

0800063c <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN);
 8000640:	2101      	movs	r1, #1
 8000642:	4807      	ldr	r0, [pc, #28]	; (8000660 <HCI_TL_SPI_DeInit+0x24>)
 8000644:	f001 fb8a 	bl	8001d5c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN);
 8000648:	2102      	movs	r1, #2
 800064a:	4805      	ldr	r0, [pc, #20]	; (8000660 <HCI_TL_SPI_DeInit+0x24>)
 800064c:	f001 fb86 	bl	8001d5c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);
 8000650:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000654:	4802      	ldr	r0, [pc, #8]	; (8000660 <HCI_TL_SPI_DeInit+0x24>)
 8000656:	f001 fb81 	bl	8001d5c <HAL_GPIO_DeInit>
  return 0;
 800065a:	2300      	movs	r3, #0
}
 800065c:	4618      	mov	r0, r3
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40020000 	.word	0x40020000

08000664 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  // Deselect CS PIN for BlueNRG to avoid spurious commands
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000668:	2201      	movs	r2, #1
 800066a:	2102      	movs	r1, #2
 800066c:	480b      	ldr	r0, [pc, #44]	; (800069c <HCI_TL_SPI_Reset+0x38>)
 800066e:	f001 fc71 	bl	8001f54 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000678:	4808      	ldr	r0, [pc, #32]	; (800069c <HCI_TL_SPI_Reset+0x38>)
 800067a:	f001 fc6b 	bl	8001f54 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800067e:	2005      	movs	r0, #5
 8000680:	f001 f82e 	bl	80016e0 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8000684:	2201      	movs	r2, #1
 8000686:	f44f 7180 	mov.w	r1, #256	; 0x100
 800068a:	4804      	ldr	r0, [pc, #16]	; (800069c <HCI_TL_SPI_Reset+0x38>)
 800068c:	f001 fc62 	bl	8001f54 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8000690:	2005      	movs	r0, #5
 8000692:	f001 f825 	bl	80016e0 <HAL_Delay>
  return 0;
 8000696:	2300      	movs	r3, #0
}
 8000698:	4618      	mov	r0, r3
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40020000 	.word	0x40020000

080006a0 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b088      	sub	sp, #32
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	460b      	mov	r3, r1
 80006aa:	807b      	strh	r3, [r7, #2]
  uint16_t byte_count;
  uint8_t len = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	777b      	strb	r3, [r7, #29]
  uint8_t char_00 = 0x00;
 80006b0:	2300      	movs	r3, #0
 80006b2:	75fb      	strb	r3, [r7, #23]
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80006b4:	4a30      	ldr	r2, [pc, #192]	; (8000778 <HCI_TL_SPI_Receive+0xd8>)
 80006b6:	f107 0310 	add.w	r3, r7, #16
 80006ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006be:	6018      	str	r0, [r3, #0]
 80006c0:	3304      	adds	r3, #4
 80006c2:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  HCI_TL_SPI_Disable_IRQ();
 80006c4:	f7ff ff67 	bl	8000596 <HCI_TL_SPI_Disable_IRQ>

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2102      	movs	r1, #2
 80006cc:	482b      	ldr	r0, [pc, #172]	; (800077c <HCI_TL_SPI_Receive+0xdc>)
 80006ce:	f001 fc41 	bl	8001f54 <HAL_GPIO_WritePin>

  /* Read the header */
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80006d2:	f107 0108 	add.w	r1, r7, #8
 80006d6:	f107 0310 	add.w	r3, r7, #16
 80006da:	2205      	movs	r2, #5
 80006dc:	4618      	mov	r0, r3
 80006de:	f000 fde1 	bl	80012a4 <BSP_SPI1_SendRecv>

  /* device is ready */
  byte_count = (header_slave[4] << 8)| header_slave[3];
 80006e2:	7b3b      	ldrb	r3, [r7, #12]
 80006e4:	021b      	lsls	r3, r3, #8
 80006e6:	b21a      	sxth	r2, r3
 80006e8:	7afb      	ldrb	r3, [r7, #11]
 80006ea:	b21b      	sxth	r3, r3
 80006ec:	4313      	orrs	r3, r2
 80006ee:	b21b      	sxth	r3, r3
 80006f0:	83fb      	strh	r3, [r7, #30]

  if(byte_count > 0)
 80006f2:	8bfb      	ldrh	r3, [r7, #30]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d01e      	beq.n	8000736 <HCI_TL_SPI_Receive+0x96>
  {

    /* avoid to read more data than the size of the buffer */
    if (byte_count > size)
 80006f8:	8bfa      	ldrh	r2, [r7, #30]
 80006fa:	887b      	ldrh	r3, [r7, #2]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d901      	bls.n	8000704 <HCI_TL_SPI_Receive+0x64>
    {
      byte_count = size;
 8000700:	887b      	ldrh	r3, [r7, #2]
 8000702:	83fb      	strh	r3, [r7, #30]
    }

    for(len = 0; len < byte_count; len++)
 8000704:	2300      	movs	r3, #0
 8000706:	777b      	strb	r3, [r7, #29]
 8000708:	e010      	b.n	800072c <HCI_TL_SPI_Receive+0x8c>
    {
      BSP_SPI1_SendRecv(&char_00, (uint8_t*)&read_char, 1);
 800070a:	f107 0116 	add.w	r1, r7, #22
 800070e:	f107 0317 	add.w	r3, r7, #23
 8000712:	2201      	movs	r2, #1
 8000714:	4618      	mov	r0, r3
 8000716:	f000 fdc5 	bl	80012a4 <BSP_SPI1_SendRecv>
      buffer[len] = read_char;
 800071a:	7f7b      	ldrb	r3, [r7, #29]
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	4413      	add	r3, r2
 8000720:	7dba      	ldrb	r2, [r7, #22]
 8000722:	b2d2      	uxtb	r2, r2
 8000724:	701a      	strb	r2, [r3, #0]
    for(len = 0; len < byte_count; len++)
 8000726:	7f7b      	ldrb	r3, [r7, #29]
 8000728:	3301      	adds	r3, #1
 800072a:	777b      	strb	r3, [r7, #29]
 800072c:	7f7b      	ldrb	r3, [r7, #29]
 800072e:	b29b      	uxth	r3, r3
 8000730:	8bfa      	ldrh	r2, [r7, #30]
 8000732:	429a      	cmp	r2, r3
 8000734:	d8e9      	bhi.n	800070a <HCI_TL_SPI_Receive+0x6a>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  uint32_t tickstart = HAL_GetTick();
 8000736:	f000 ffc7 	bl	80016c8 <HAL_GetTick>
 800073a:	61b8      	str	r0, [r7, #24]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 800073c:	e006      	b.n	800074c <HCI_TL_SPI_Receive+0xac>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 800073e:	2101      	movs	r1, #1
 8000740:	480e      	ldr	r0, [pc, #56]	; (800077c <HCI_TL_SPI_Receive+0xdc>)
 8000742:	f001 fbef 	bl	8001f24 <HAL_GPIO_ReadPin>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d008      	beq.n	800075e <HCI_TL_SPI_Receive+0xbe>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 800074c:	f000 ffbc 	bl	80016c8 <HAL_GetTick>
 8000750:	4602      	mov	r2, r0
 8000752:	69bb      	ldr	r3, [r7, #24]
 8000754:	1ad3      	subs	r3, r2, r3
 8000756:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800075a:	d3f0      	bcc.n	800073e <HCI_TL_SPI_Receive+0x9e>
 800075c:	e000      	b.n	8000760 <HCI_TL_SPI_Receive+0xc0>
      break;
 800075e:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 8000760:	f7ff ff12 	bl	8000588 <HCI_TL_SPI_Enable_IRQ>

  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8000764:	2201      	movs	r2, #1
 8000766:	2102      	movs	r1, #2
 8000768:	4804      	ldr	r0, [pc, #16]	; (800077c <HCI_TL_SPI_Receive+0xdc>)
 800076a:	f001 fbf3 	bl	8001f54 <HAL_GPIO_WritePin>

  return len;
 800076e:	7f7b      	ldrb	r3, [r7, #29]
}
 8000770:	4618      	mov	r0, r3
 8000772:	3720      	adds	r7, #32
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	08006b50 	.word	0x08006b50
 800077c:	40020000 	.word	0x40020000

08000780 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08a      	sub	sp, #40	; 0x28
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	460b      	mov	r3, r1
 800078a:	807b      	strh	r3, [r7, #2]
  int32_t result;
  uint16_t rx_bytes;

  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 800078c:	4a3f      	ldr	r2, [pc, #252]	; (800088c <HCI_TL_SPI_Send+0x10c>)
 800078e:	f107 0314 	add.w	r3, r7, #20
 8000792:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000796:	6018      	str	r0, [r3, #0]
 8000798:	3304      	adds	r3, #4
 800079a:	7019      	strb	r1, [r3, #0]
  uint8_t header_slave[HEADER_SIZE];

  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 800079c:	f000 ff94 	bl	80016c8 <HAL_GetTick>
 80007a0:	6238      	str	r0, [r7, #32]

  HCI_TL_SPI_Disable_IRQ();
 80007a2:	f7ff fef8 	bl	8000596 <HCI_TL_SPI_Disable_IRQ>

  do
  {
    uint32_t tickstart_data_available = HAL_GetTick();
 80007a6:	f000 ff8f 	bl	80016c8 <HAL_GetTick>
 80007aa:	61f8      	str	r0, [r7, #28]

    result = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24

    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2102      	movs	r1, #2
 80007b4:	4836      	ldr	r0, [pc, #216]	; (8000890 <HCI_TL_SPI_Send+0x110>)
 80007b6:	f001 fbcd 	bl	8001f54 <HAL_GPIO_WritePin>

    /*
     * Wait until BlueNRG-2 is ready.
     * When ready it will raise the IRQ pin.
     */
    while(!IsDataAvailable())
 80007ba:	e00a      	b.n	80007d2 <HCI_TL_SPI_Send+0x52>
    {
      if((HAL_GetTick() - tickstart_data_available) > TIMEOUT_DURATION)
 80007bc:	f000 ff84 	bl	80016c8 <HAL_GetTick>
 80007c0:	4602      	mov	r2, r0
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	1ad3      	subs	r3, r2, r3
 80007c6:	2b0f      	cmp	r3, #15
 80007c8:	d903      	bls.n	80007d2 <HCI_TL_SPI_Send+0x52>
      {
        result = -3;
 80007ca:	f06f 0302 	mvn.w	r3, #2
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80007d0:	e004      	b.n	80007dc <HCI_TL_SPI_Send+0x5c>
    while(!IsDataAvailable())
 80007d2:	f000 f861 	bl	8000898 <IsDataAvailable>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d0ef      	beq.n	80007bc <HCI_TL_SPI_Send+0x3c>
      }
    }
    if(result == -3)
 80007dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007de:	f113 0f03 	cmn.w	r3, #3
 80007e2:	d105      	bne.n	80007f0 <HCI_TL_SPI_Send+0x70>
    {
      /* The break causes the exiting from the "while", so the CS line must be released */
      HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80007e4:	2201      	movs	r2, #1
 80007e6:	2102      	movs	r1, #2
 80007e8:	4829      	ldr	r0, [pc, #164]	; (8000890 <HCI_TL_SPI_Send+0x110>)
 80007ea:	f001 fbb3 	bl	8001f54 <HAL_GPIO_WritePin>
      break;
 80007ee:	e030      	b.n	8000852 <HCI_TL_SPI_Send+0xd2>
    }

    /* Read header */
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80007f0:	f107 010c 	add.w	r1, r7, #12
 80007f4:	f107 0314 	add.w	r3, r7, #20
 80007f8:	2205      	movs	r2, #5
 80007fa:	4618      	mov	r0, r3
 80007fc:	f000 fd52 	bl	80012a4 <BSP_SPI1_SendRecv>

    rx_bytes = (((uint16_t)header_slave[2])<<8) | ((uint16_t)header_slave[1]);
 8000800:	7bbb      	ldrb	r3, [r7, #14]
 8000802:	021b      	lsls	r3, r3, #8
 8000804:	b21a      	sxth	r2, r3
 8000806:	7b7b      	ldrb	r3, [r7, #13]
 8000808:	b21b      	sxth	r3, r3
 800080a:	4313      	orrs	r3, r2
 800080c:	b21b      	sxth	r3, r3
 800080e:	837b      	strh	r3, [r7, #26]

    if(rx_bytes >= size)
 8000810:	8b7a      	ldrh	r2, [r7, #26]
 8000812:	887b      	ldrh	r3, [r7, #2]
 8000814:	429a      	cmp	r2, r3
 8000816:	d306      	bcc.n	8000826 <HCI_TL_SPI_Send+0xa6>
    {
      /* Buffer is big enough */
      BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8000818:	887b      	ldrh	r3, [r7, #2]
 800081a:	461a      	mov	r2, r3
 800081c:	491d      	ldr	r1, [pc, #116]	; (8000894 <HCI_TL_SPI_Send+0x114>)
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f000 fd40 	bl	80012a4 <BSP_SPI1_SendRecv>
 8000824:	e002      	b.n	800082c <HCI_TL_SPI_Send+0xac>
    }
    else
    {
      /* Buffer is too small */
      result = -2;
 8000826:	f06f 0301 	mvn.w	r3, #1
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800082c:	2201      	movs	r2, #1
 800082e:	2102      	movs	r1, #2
 8000830:	4817      	ldr	r0, [pc, #92]	; (8000890 <HCI_TL_SPI_Send+0x110>)
 8000832:	f001 fb8f 	bl	8001f54 <HAL_GPIO_WritePin>

    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 8000836:	f000 ff47 	bl	80016c8 <HAL_GetTick>
 800083a:	4602      	mov	r2, r0
 800083c:	6a3b      	ldr	r3, [r7, #32]
 800083e:	1ad3      	subs	r3, r2, r3
 8000840:	2b0f      	cmp	r3, #15
 8000842:	d903      	bls.n	800084c <HCI_TL_SPI_Send+0xcc>
    {
      result = -3;
 8000844:	f06f 0302 	mvn.w	r3, #2
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800084a:	e002      	b.n	8000852 <HCI_TL_SPI_Send+0xd2>
    }
  } while(result < 0);
 800084c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800084e:	2b00      	cmp	r3, #0
 8000850:	dba9      	blt.n	80007a6 <HCI_TL_SPI_Send+0x26>
  /**
   * To be aligned to the SPI protocol.
   * Can bring to a delay inside the frame, due to the BlueNRG-2 that needs
   * to check if the header is received or not.
   */
  tickstart = HAL_GetTick();
 8000852:	f000 ff39 	bl	80016c8 <HAL_GetTick>
 8000856:	6238      	str	r0, [r7, #32]
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8000858:	e006      	b.n	8000868 <HCI_TL_SPI_Send+0xe8>
    if (HAL_GPIO_ReadPin(HCI_TL_SPI_IRQ_PORT, HCI_TL_SPI_IRQ_PIN)==GPIO_PIN_RESET) {
 800085a:	2101      	movs	r1, #1
 800085c:	480c      	ldr	r0, [pc, #48]	; (8000890 <HCI_TL_SPI_Send+0x110>)
 800085e:	f001 fb61 	bl	8001f24 <HAL_GPIO_ReadPin>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d008      	beq.n	800087a <HCI_TL_SPI_Send+0xfa>
  while ((HAL_GetTick() - tickstart) < TIMEOUT_IRQ_HIGH) {
 8000868:	f000 ff2e 	bl	80016c8 <HAL_GetTick>
 800086c:	4602      	mov	r2, r0
 800086e:	6a3b      	ldr	r3, [r7, #32]
 8000870:	1ad3      	subs	r3, r2, r3
 8000872:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000876:	d3f0      	bcc.n	800085a <HCI_TL_SPI_Send+0xda>
 8000878:	e000      	b.n	800087c <HCI_TL_SPI_Send+0xfc>
      break;
 800087a:	bf00      	nop
    }
  }
  HCI_TL_SPI_Enable_IRQ();
 800087c:	f7ff fe84 	bl	8000588 <HCI_TL_SPI_Enable_IRQ>

  return result;
 8000880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000882:	4618      	mov	r0, r3
 8000884:	3728      	adds	r7, #40	; 0x28
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	08006b58 	.word	0x08006b58
 8000890:	40020000 	.word	0x40020000
 8000894:	200000cc 	.word	0x200000cc

08000898 <IsDataAvailable>:
 *
 * @param  None
 * @retval int32_t: 1 if data are present, 0 otherwise
 */
static int32_t IsDataAvailable(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 800089c:	2101      	movs	r1, #1
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <IsDataAvailable+0x1c>)
 80008a0:	f001 fb40 	bl	8001f24 <HAL_GPIO_ReadPin>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	bf0c      	ite	eq
 80008aa:	2301      	moveq	r3, #1
 80008ac:	2300      	movne	r3, #0
 80008ae:	b2db      	uxtb	r3, r3
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40020000 	.word	0x40020000

080008b8 <hci_tl_lowlevel_init>:
 *
 * @param  None
 * @retval None
 */
void hci_tl_lowlevel_init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b088      	sub	sp, #32
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE END hci_tl_lowlevel_init 1 */
  tHciIO fops;

  /* Register IO bus services */
  fops.Init    = HCI_TL_SPI_Init;
 80008be:	4b13      	ldr	r3, [pc, #76]	; (800090c <hci_tl_lowlevel_init+0x54>)
 80008c0:	607b      	str	r3, [r7, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 80008c2:	4b13      	ldr	r3, [pc, #76]	; (8000910 <hci_tl_lowlevel_init+0x58>)
 80008c4:	60bb      	str	r3, [r7, #8]
  fops.Send    = HCI_TL_SPI_Send;
 80008c6:	4b13      	ldr	r3, [pc, #76]	; (8000914 <hci_tl_lowlevel_init+0x5c>)
 80008c8:	617b      	str	r3, [r7, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 80008ca:	4b13      	ldr	r3, [pc, #76]	; (8000918 <hci_tl_lowlevel_init+0x60>)
 80008cc:	613b      	str	r3, [r7, #16]
  fops.Reset   = HCI_TL_SPI_Reset;
 80008ce:	4b13      	ldr	r3, [pc, #76]	; (800091c <hci_tl_lowlevel_init+0x64>)
 80008d0:	60fb      	str	r3, [r7, #12]
  fops.GetTick = BSP_GetTick;
 80008d2:	4b13      	ldr	r3, [pc, #76]	; (8000920 <hci_tl_lowlevel_init+0x68>)
 80008d4:	61fb      	str	r3, [r7, #28]

  hci_register_io_bus (&fops);
 80008d6:	1d3b      	adds	r3, r7, #4
 80008d8:	4618      	mov	r0, r3
 80008da:	f004 fe57 	bl	800558c <hci_register_io_bus>
  /* USER CODE BEGIN hci_tl_lowlevel_init 2 */

  /* USER CODE END hci_tl_lowlevel_init 2 */

  /* Register event irq handler */
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 80008de:	f04f 61c0 	mov.w	r1, #100663296	; 0x6000000
 80008e2:	4810      	ldr	r0, [pc, #64]	; (8000924 <hci_tl_lowlevel_init+0x6c>)
 80008e4:	f001 f87d 	bl	80019e2 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 80008e8:	4a0f      	ldr	r2, [pc, #60]	; (8000928 <hci_tl_lowlevel_init+0x70>)
 80008ea:	2100      	movs	r1, #0
 80008ec:	480d      	ldr	r0, [pc, #52]	; (8000924 <hci_tl_lowlevel_init+0x6c>)
 80008ee:	f001 f85e 	bl	80019ae <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80008f2:	2200      	movs	r2, #0
 80008f4:	2100      	movs	r1, #0
 80008f6:	2006      	movs	r0, #6
 80008f8:	f001 f815 	bl	8001926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008fc:	2006      	movs	r0, #6
 80008fe:	f001 f82e 	bl	800195e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN hci_tl_lowlevel_init 3 */

  /* USER CODE END hci_tl_lowlevel_init 3 */

}
 8000902:	bf00      	nop
 8000904:	3720      	adds	r7, #32
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	080005a5 	.word	0x080005a5
 8000910:	0800063d 	.word	0x0800063d
 8000914:	08000781 	.word	0x08000781
 8000918:	080006a1 	.word	0x080006a1
 800091c:	08000665 	.word	0x08000665
 8000920:	080012e5 	.word	0x080012e5
 8000924:	20000778 	.word	0x20000778
 8000928:	0800092d 	.word	0x0800092d

0800092c <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8000930:	e005      	b.n	800093e <hci_tl_lowlevel_isr+0x12>
  {
    if (hci_notify_asynch_evt(NULL))
 8000932:	2000      	movs	r0, #0
 8000934:	f004 ff90 	bl	8005858 <hci_notify_asynch_evt>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d105      	bne.n	800094a <hci_tl_lowlevel_isr+0x1e>
  while(IsDataAvailable())
 800093e:	f7ff ffab 	bl	8000898 <IsDataAvailable>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d1f4      	bne.n	8000932 <hci_tl_lowlevel_isr+0x6>
 8000948:	e000      	b.n	800094c <hci_tl_lowlevel_isr+0x20>
    {
      return;
 800094a:	bf00      	nop
  }

  /* USER CODE BEGIN hci_tl_lowlevel_isr */

  /* USER CODE END hci_tl_lowlevel_isr */
}
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <bluenrg_init>:
#include "stm32f411xe.h"
#include "stm32f4xx_hal.h"
#include "main.h"
#define BADDR_SIZE 6
uint8_t SERVER_BADDR[]={0X10,0X02,0X03,0X04,0X05,0X06};
void bluenrg_init(void){
 8000950:	b5b0      	push	{r4, r5, r7, lr}
 8000952:	b088      	sub	sp, #32
 8000954:	af02      	add	r7, sp, #8
	const char *name="Semih35";
 8000956:	4b2f      	ldr	r3, [pc, #188]	; (8000a14 <bluenrg_init+0xc4>)
 8000958:	617b      	str	r3, [r7, #20]
	tBleStatus ret;
	uint8_t bdaddr[BADDR_SIZE];
	BLUENRG_memcpy(bdaddr,SERVER_BADDR,sizeof(SERVER_BADDR));
 800095a:	4a2f      	ldr	r2, [pc, #188]	; (8000a18 <bluenrg_init+0xc8>)
 800095c:	f107 030c 	add.w	r3, r7, #12
 8000960:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000964:	6018      	str	r0, [r3, #0]
 8000966:	3304      	adds	r3, #4
 8000968:	8019      	strh	r1, [r3, #0]




	/* Initialize HCI*/
	hci_init(APP_UserEvRx, NULL);
 800096a:	2100      	movs	r1, #0
 800096c:	482b      	ldr	r0, [pc, #172]	; (8000a1c <bluenrg_init+0xcc>)
 800096e:	f004 fdcb 	bl	8005508 <hci_init>
	/* Reset HCI*/
	hci_reset();
 8000972:	f004 f8d5 	bl	8004b20 <hci_reset>
	HAL_Delay(100);
 8000976:	2064      	movs	r0, #100	; 0x64
 8000978:	f000 feb2 	bl	80016e0 <HAL_Delay>
	 /*Configure DEVİCE ADRESS*/
	ret=aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, bdaddr);
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	461a      	mov	r2, r3
 8000982:	2106      	movs	r1, #6
 8000984:	2000      	movs	r0, #0
 8000986:	f004 fcb5 	bl	80052f4 <aci_hal_write_config_data>
 800098a:	4603      	mov	r3, r0
 800098c:	74fb      	strb	r3, [r7, #19]
	if(ret!=BLE_STATUS_SUCCESS){
 800098e:	7cfb      	ldrb	r3, [r7, #19]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d002      	beq.n	800099a <bluenrg_init+0x4a>
		printf("Failed to configure Device Adress\r\n");
 8000994:	4822      	ldr	r0, [pc, #136]	; (8000a20 <bluenrg_init+0xd0>)
 8000996:	f005 f989 	bl	8005cac <puts>
	}
	 /*Inıtialize GATT Server*/
	ret=aci_gatt_init();
 800099a:	f004 fa5a 	bl	8004e52 <aci_gatt_init>
 800099e:	4603      	mov	r3, r0
 80009a0:	74fb      	strb	r3, [r7, #19]
	if(ret!=BLE_STATUS_SUCCESS){
 80009a2:	7cfb      	ldrb	r3, [r7, #19]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d002      	beq.n	80009ae <bluenrg_init+0x5e>
		printf("aci_gati_init FAILED\r\n");
 80009a8:	481e      	ldr	r0, [pc, #120]	; (8000a24 <bluenrg_init+0xd4>)
 80009aa:	f005 f97f 	bl	8005cac <puts>
	}

	 /*Inıtialize GAP Service*/
	 aci_gap_init(GAP_PERIPHERAL_ROLE, 0, 0X07, &service_handle, &dev_name_char_handle, &appearence_char_handle);
 80009ae:	f107 020a 	add.w	r2, r7, #10
 80009b2:	1dbb      	adds	r3, r7, #6
 80009b4:	9301      	str	r3, [sp, #4]
 80009b6:	f107 0308 	add.w	r3, r7, #8
 80009ba:	9300      	str	r3, [sp, #0]
 80009bc:	4613      	mov	r3, r2
 80009be:	2207      	movs	r2, #7
 80009c0:	2100      	movs	r1, #0
 80009c2:	2001      	movs	r0, #1
 80009c4:	f004 f9ba 	bl	8004d3c <aci_gap_init>

	 /*Update Device  name Characteristic*/
	ret=aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0, strlen(name), (uint8_t*)name);
 80009c8:	897c      	ldrh	r4, [r7, #10]
 80009ca:	893d      	ldrh	r5, [r7, #8]
 80009cc:	6978      	ldr	r0, [r7, #20]
 80009ce:	f7ff fc07 	bl	80001e0 <strlen>
 80009d2:	4603      	mov	r3, r0
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	9300      	str	r3, [sp, #0]
 80009da:	4613      	mov	r3, r2
 80009dc:	2200      	movs	r2, #0
 80009de:	4629      	mov	r1, r5
 80009e0:	4620      	mov	r0, r4
 80009e2:	f004 fbf9 	bl	80051d8 <aci_gatt_update_char_value>
 80009e6:	4603      	mov	r3, r0
 80009e8:	74fb      	strb	r3, [r7, #19]
	if(ret!=BLE_STATUS_SUCCESS){
 80009ea:	7cfb      	ldrb	r3, [r7, #19]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d002      	beq.n	80009f6 <bluenrg_init+0xa6>
		printf("aci_gatt_update char_value: FAILED\r\n");
 80009f0:	480d      	ldr	r0, [pc, #52]	; (8000a28 <bluenrg_init+0xd8>)
 80009f2:	f005 f95b 	bl	8005cac <puts>
	}
	ret=add_simple_services();
 80009f6:	f000 f9b5 	bl	8000d64 <add_simple_services>
 80009fa:	4603      	mov	r3, r0
 80009fc:	74fb      	strb	r3, [r7, #19]
	if(ret!=BLE_STATUS_SUCCESS){
 80009fe:	7cfb      	ldrb	r3, [r7, #19]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d002      	beq.n	8000a0a <bluenrg_init+0xba>
		printf("ADDİNG SİMPLE_SERVİESS PROCESS FAILED\r\n");
 8000a04:	4809      	ldr	r0, [pc, #36]	; (8000a2c <bluenrg_init+0xdc>)
 8000a06:	f005 f951 	bl	8005cac <puts>
	}




}
 8000a0a:	bf00      	nop
 8000a0c:	3718      	adds	r7, #24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bdb0      	pop	{r4, r5, r7, pc}
 8000a12:	bf00      	nop
 8000a14:	08006b60 	.word	0x08006b60
 8000a18:	20000000 	.word	0x20000000
 8000a1c:	0800100d 	.word	0x0800100d
 8000a20:	08006b68 	.word	0x08006b68
 8000a24:	08006b8c 	.word	0x08006b8c
 8000a28:	08006ba4 	.word	0x08006ba4
 8000a2c:	08006bc8 	.word	0x08006bc8

08000a30 <bluenrg_process>:
char  *data="GLLOG402,12,1,1,1,300,400";

GPIO_PinState btn_state;
void bluenrg_process(void){
 8000a30:	b590      	push	{r4, r7, lr}
 8000a32:	b08d      	sub	sp, #52	; 0x34
 8000a34:	af08      	add	r7, sp, #32

	tBleStatus ret;
	uint8_t local_name[]={AD_TYPE_COMPLETE_LOCAL_NAME,'B','L','E','-','G','-','U','P'};
 8000a36:	4a25      	ldr	r2, [pc, #148]	; (8000acc <bluenrg_process+0x9c>)
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a3c:	c303      	stmia	r3!, {r0, r1}
 8000a3e:	701a      	strb	r2, [r3, #0]
	 * Sett device name general discovaerable mode
	 */
	/*aci_gap_set_discoverable(Advertising_Type, Advertising_Interval_Min, Advertising_Interval_Max, Own_Address_Type,
			Advertising_Filter_Policy, Local_Name_Length, Local_Name, Service_Uuid_length, Service_Uuid_List,
			Slave_Conn_Interval_Min, Slave_Conn_Interval_Max)*/
	ret=aci_gap_set_discoverable(ADV_IND, 0, 0, PUBLIC_ADDR, NO_WHITE_LIST_USE, sizeof(local_name), local_name, 0, NULL, 0, 0);
 8000a40:	2300      	movs	r3, #0
 8000a42:	9306      	str	r3, [sp, #24]
 8000a44:	2300      	movs	r3, #0
 8000a46:	9305      	str	r3, [sp, #20]
 8000a48:	2300      	movs	r3, #0
 8000a4a:	9304      	str	r3, [sp, #16]
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	9303      	str	r3, [sp, #12]
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	9302      	str	r3, [sp, #8]
 8000a54:	2309      	movs	r3, #9
 8000a56:	9301      	str	r3, [sp, #4]
 8000a58:	2300      	movs	r3, #0
 8000a5a:	9300      	str	r3, [sp, #0]
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	2200      	movs	r2, #0
 8000a60:	2100      	movs	r1, #0
 8000a62:	2000      	movs	r0, #0
 8000a64:	f004 f885 	bl	8004b72 <aci_gap_set_discoverable>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	73fb      	strb	r3, [r7, #15]
	if(ret!=BLE_STATUS_SUCCESS){
 8000a6c:	7bfb      	ldrb	r3, [r7, #15]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d002      	beq.n	8000a78 <bluenrg_process+0x48>
		printf("aci_gap_set discoverable  failed\r\n");
 8000a72:	4817      	ldr	r0, [pc, #92]	; (8000ad0 <bluenrg_process+0xa0>)
 8000a74:	f005 f91a 	bl	8005cac <puts>
	}
	//Process user event
	hci_user_evt_proc();
 8000a78:	f004 fec2 	bl	8005800 <hci_user_evt_proc>
	btn_state=HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13);
 8000a7c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a80:	4814      	ldr	r0, [pc, #80]	; (8000ad4 <bluenrg_process+0xa4>)
 8000a82:	f001 fa4f 	bl	8001f24 <HAL_GPIO_ReadPin>
 8000a86:	4603      	mov	r3, r0
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <bluenrg_process+0xa8>)
 8000a8c:	701a      	strb	r2, [r3, #0]
	if(btn_state==GPIO_PIN_RESET){
 8000a8e:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <bluenrg_process+0xa8>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d115      	bne.n	8000ac2 <bluenrg_process+0x92>
		while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)==GPIO_PIN_RESET);
 8000a96:	bf00      	nop
 8000a98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a9c:	480d      	ldr	r0, [pc, #52]	; (8000ad4 <bluenrg_process+0xa4>)
 8000a9e:	f001 fa41 	bl	8001f24 <HAL_GPIO_ReadPin>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d0f7      	beq.n	8000a98 <bluenrg_process+0x68>
		send_data((uint8_t *)data, strlen(data));
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <bluenrg_process+0xac>)
 8000aaa:	681c      	ldr	r4, [r3, #0]
 8000aac:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <bluenrg_process+0xac>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff fb95 	bl	80001e0 <strlen>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	4619      	mov	r1, r3
 8000abc:	4620      	mov	r0, r4
 8000abe:	f000 f9df 	bl	8000e80 <send_data>

}
}
 8000ac2:	bf00      	nop
 8000ac4:	3714      	adds	r7, #20
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd90      	pop	{r4, r7, pc}
 8000aca:	bf00      	nop
 8000acc:	08006c34 	.word	0x08006c34
 8000ad0:	08006c10 	.word	0x08006c10
 8000ad4:	40020800 	.word	0x40020800
 8000ad8:	20000780 	.word	0x20000780
 8000adc:	20000008 	.word	0x20000008

08000ae0 <__io_putchar>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
extern char *data;
int __io_putchar(int ch){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10);
 8000ae8:	1d39      	adds	r1, r7, #4
 8000aea:	230a      	movs	r3, #10
 8000aec:	2201      	movs	r2, #1
 8000aee:	4804      	ldr	r0, [pc, #16]	; (8000b00 <__io_putchar+0x20>)
 8000af0:	f002 fa33 	bl	8002f5a <HAL_UART_Transmit>
	return ch;
 8000af4:	687b      	ldr	r3, [r7, #4]
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000784 	.word	0x20000784

08000b04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b08:	f000 fd78 	bl	80015fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b0c:	f000 f80e 	bl	8000b2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b10:	f000 f89e 	bl	8000c50 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b14:	f000 f872 	bl	8000bfc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  bluenrg_init();
 8000b18:	f7ff ff1a 	bl	8000950 <bluenrg_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  bluenrg_process();
 8000b1c:	f7ff ff88 	bl	8000a30 <bluenrg_process>
	  HAL_Delay(2000);
 8000b20:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b24:	f000 fddc 	bl	80016e0 <HAL_Delay>
  {
 8000b28:	e7f8      	b.n	8000b1c <main+0x18>
	...

08000b2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b094      	sub	sp, #80	; 0x50
 8000b30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b32:	f107 0320 	add.w	r3, r7, #32
 8000b36:	2230      	movs	r2, #48	; 0x30
 8000b38:	2100      	movs	r1, #0
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f005 f828 	bl	8005b90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b40:	f107 030c 	add.w	r3, r7, #12
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b50:	2300      	movs	r3, #0
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	4b27      	ldr	r3, [pc, #156]	; (8000bf4 <SystemClock_Config+0xc8>)
 8000b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b58:	4a26      	ldr	r2, [pc, #152]	; (8000bf4 <SystemClock_Config+0xc8>)
 8000b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b60:	4b24      	ldr	r3, [pc, #144]	; (8000bf4 <SystemClock_Config+0xc8>)
 8000b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	607b      	str	r3, [r7, #4]
 8000b70:	4b21      	ldr	r3, [pc, #132]	; (8000bf8 <SystemClock_Config+0xcc>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a20      	ldr	r2, [pc, #128]	; (8000bf8 <SystemClock_Config+0xcc>)
 8000b76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b7a:	6013      	str	r3, [r2, #0]
 8000b7c:	4b1e      	ldr	r3, [pc, #120]	; (8000bf8 <SystemClock_Config+0xcc>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b90:	2310      	movs	r3, #16
 8000b92:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b94:	2302      	movs	r3, #2
 8000b96:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b9c:	2308      	movs	r3, #8
 8000b9e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000ba0:	2340      	movs	r3, #64	; 0x40
 8000ba2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ba8:	2304      	movs	r3, #4
 8000baa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bac:	f107 0320 	add.w	r3, r7, #32
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f001 fa03 	bl	8001fbc <HAL_RCC_OscConfig>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bbc:	f000 f8cc 	bl	8000d58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc0:	230f      	movs	r3, #15
 8000bc2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bd0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bd6:	f107 030c 	add.w	r3, r7, #12
 8000bda:	2102      	movs	r1, #2
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f001 fc65 	bl	80024ac <HAL_RCC_ClockConfig>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000be8:	f000 f8b6 	bl	8000d58 <Error_Handler>
  }
}
 8000bec:	bf00      	nop
 8000bee:	3750      	adds	r7, #80	; 0x50
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40007000 	.word	0x40007000

08000bfc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c02:	4a12      	ldr	r2, [pc, #72]	; (8000c4c <MX_USART2_UART_Init+0x50>)
 8000c04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c06:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c20:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c22:	220c      	movs	r2, #12
 8000c24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c32:	4805      	ldr	r0, [pc, #20]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c34:	f002 f944 	bl	8002ec0 <HAL_UART_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c3e:	f000 f88b 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000784 	.word	0x20000784
 8000c4c:	40004400 	.word	0x40004400

08000c50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	; 0x28
 8000c54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	60da      	str	r2, [r3, #12]
 8000c64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	4b38      	ldr	r3, [pc, #224]	; (8000d4c <MX_GPIO_Init+0xfc>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a37      	ldr	r2, [pc, #220]	; (8000d4c <MX_GPIO_Init+0xfc>)
 8000c70:	f043 0304 	orr.w	r3, r3, #4
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b35      	ldr	r3, [pc, #212]	; (8000d4c <MX_GPIO_Init+0xfc>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0304 	and.w	r3, r3, #4
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	4b31      	ldr	r3, [pc, #196]	; (8000d4c <MX_GPIO_Init+0xfc>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a30      	ldr	r2, [pc, #192]	; (8000d4c <MX_GPIO_Init+0xfc>)
 8000c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b2e      	ldr	r3, [pc, #184]	; (8000d4c <MX_GPIO_Init+0xfc>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	4b2a      	ldr	r3, [pc, #168]	; (8000d4c <MX_GPIO_Init+0xfc>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a29      	ldr	r2, [pc, #164]	; (8000d4c <MX_GPIO_Init+0xfc>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b27      	ldr	r3, [pc, #156]	; (8000d4c <MX_GPIO_Init+0xfc>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	4b23      	ldr	r3, [pc, #140]	; (8000d4c <MX_GPIO_Init+0xfc>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a22      	ldr	r2, [pc, #136]	; (8000d4c <MX_GPIO_Init+0xfc>)
 8000cc4:	f043 0302 	orr.w	r3, r3, #2
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b20      	ldr	r3, [pc, #128]	; (8000d4c <MX_GPIO_Init+0xfc>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0302 	and.w	r3, r3, #2
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f44f 7191 	mov.w	r1, #290	; 0x122
 8000cdc:	481c      	ldr	r0, [pc, #112]	; (8000d50 <MX_GPIO_Init+0x100>)
 8000cde:	f001 f939 	bl	8001f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ce2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ce6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cec:	2302      	movs	r3, #2
 8000cee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4817      	ldr	r0, [pc, #92]	; (8000d54 <MX_GPIO_Init+0x104>)
 8000cf8:	f000 feac 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d00:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0a:	f107 0314 	add.w	r3, r7, #20
 8000d0e:	4619      	mov	r1, r3
 8000d10:	480f      	ldr	r0, [pc, #60]	; (8000d50 <MX_GPIO_Init+0x100>)
 8000d12:	f000 fe9f 	bl	8001a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 LD2_Pin PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin|GPIO_PIN_8;
 8000d16:	f44f 7391 	mov.w	r3, #290	; 0x122
 8000d1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d24:	2300      	movs	r3, #0
 8000d26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d28:	f107 0314 	add.w	r3, r7, #20
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4808      	ldr	r0, [pc, #32]	; (8000d50 <MX_GPIO_Init+0x100>)
 8000d30:	f000 fe90 	bl	8001a54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000d34:	2200      	movs	r2, #0
 8000d36:	2100      	movs	r1, #0
 8000d38:	2006      	movs	r0, #6
 8000d3a:	f000 fdf4 	bl	8001926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000d3e:	2006      	movs	r0, #6
 8000d40:	f000 fe0d 	bl	800195e <HAL_NVIC_EnableIRQ>

}
 8000d44:	bf00      	nop
 8000d46:	3728      	adds	r7, #40	; 0x28
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40020000 	.word	0x40020000
 8000d54:	40020800 	.word	0x40020800

08000d58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d5c:	b672      	cpsid	i
}
 8000d5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <Error_Handler+0x8>
	...

08000d64 <add_simple_services>:
uint16_t chat_service_handle,mychar_tx_handle,mychar_rx_handle;
uint8_t connected=FALSE;
uint8_t set_connectable=1;
uint16_t connection_handle=0;
uint8_t notification_enabled=FALSE;
tBleStatus add_simple_services(){
 8000d64:	b590      	push	{r4, r7, lr}
 8000d66:	b095      	sub	sp, #84	; 0x54
 8000d68:	af06      	add	r7, sp, #24
	tBleStatus ret;
	Service_UUID_t service_uuid;
	Char_UUID_t char_tx_uuid,char_rx_uuid;
	BLUENRG_memcpy(service_uuid.Service_UUID_128,SERVICE_UUID,16);
 8000d6a:	4b28      	ldr	r3, [pc, #160]	; (8000e0c <add_simple_services+0xa8>)
 8000d6c:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000d70:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	ret=aci_gatt_add_service(UUID_TYPE_128,&service_uuid ,PRIMARY_SERVICE, 7, &chat_service_handle);
 8000d76:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000d7a:	4b25      	ldr	r3, [pc, #148]	; (8000e10 <add_simple_services+0xac>)
 8000d7c:	9300      	str	r3, [sp, #0]
 8000d7e:	2307      	movs	r3, #7
 8000d80:	2201      	movs	r2, #1
 8000d82:	2002      	movs	r0, #2
 8000d84:	f004 f88f 	bl	8004ea6 <aci_gatt_add_service>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	BLUENRG_memcpy(char_tx_uuid.Char_UUID_128,characteristic_tx_UUID,16);
 8000d8e:	4b21      	ldr	r3, [pc, #132]	; (8000e14 <add_simple_services+0xb0>)
 8000d90:	f107 0414 	add.w	r4, r7, #20
 8000d94:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d96:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	BLUENRG_memcpy(char_rx_uuid.Char_UUID_128,characteristic_rx_UUID,16);
 8000d9a:	4b1f      	ldr	r3, [pc, #124]	; (8000e18 <add_simple_services+0xb4>)
 8000d9c:	1d3c      	adds	r4, r7, #4
 8000d9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000da0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//Add characteristic
	/*aci_gatt_add_char(Service_Handle, Char_UUID_Type, Char_UUID, Char_Value_Length,
	 Char_Properties, Security_Permissions, GATT_Evt_Mask, Enc_Key_Size, Is_Variable, Char_Handle)*/
	//Char_tx Characteristic

	ret=aci_gatt_add_char(chat_service_handle, UUID_TYPE_128,&char_tx_uuid, 100,CHAR_PROP_NOTIFY ,ATTR_PERMISSION_NONE ,0, 0, 1, &mychar_tx_handle);
 8000da4:	4b1a      	ldr	r3, [pc, #104]	; (8000e10 <add_simple_services+0xac>)
 8000da6:	8818      	ldrh	r0, [r3, #0]
 8000da8:	f107 0214 	add.w	r2, r7, #20
 8000dac:	4b1b      	ldr	r3, [pc, #108]	; (8000e1c <add_simple_services+0xb8>)
 8000dae:	9305      	str	r3, [sp, #20]
 8000db0:	2301      	movs	r3, #1
 8000db2:	9304      	str	r3, [sp, #16]
 8000db4:	2300      	movs	r3, #0
 8000db6:	9303      	str	r3, [sp, #12]
 8000db8:	2300      	movs	r3, #0
 8000dba:	9302      	str	r3, [sp, #8]
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	9301      	str	r3, [sp, #4]
 8000dc0:	2310      	movs	r3, #16
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	2364      	movs	r3, #100	; 0x64
 8000dc6:	2102      	movs	r1, #2
 8000dc8:	f004 f91c 	bl	8005004 <aci_gatt_add_char>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	//Char rx Characterisitic
	ret=aci_gatt_add_char(chat_service_handle, UUID_TYPE_128,&char_rx_uuid, 40,CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP ,ATTR_PERMISSION_NONE ,GATT_NOTIFY_ATTRIBUTE_WRITE, 0, 1, &mychar_rx_handle);
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <add_simple_services+0xac>)
 8000dd4:	8818      	ldrh	r0, [r3, #0]
 8000dd6:	1d3a      	adds	r2, r7, #4
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <add_simple_services+0xbc>)
 8000dda:	9305      	str	r3, [sp, #20]
 8000ddc:	2301      	movs	r3, #1
 8000dde:	9304      	str	r3, [sp, #16]
 8000de0:	2300      	movs	r3, #0
 8000de2:	9303      	str	r3, [sp, #12]
 8000de4:	2301      	movs	r3, #1
 8000de6:	9302      	str	r3, [sp, #8]
 8000de8:	2300      	movs	r3, #0
 8000dea:	9301      	str	r3, [sp, #4]
 8000dec:	230c      	movs	r3, #12
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	2328      	movs	r3, #40	; 0x28
 8000df2:	2102      	movs	r1, #2
 8000df4:	f004 f906 	bl	8005004 <aci_gatt_add_char>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	return ret;
 8000dfe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	373c      	adds	r7, #60	; 0x3c
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd90      	pop	{r4, r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	2000000c 	.word	0x2000000c
 8000e10:	200007ca 	.word	0x200007ca
 8000e14:	2000001c 	.word	0x2000001c
 8000e18:	2000002c 	.word	0x2000002c
 8000e1c:	200007c8 	.word	0x200007c8
 8000e20:	200007cc 	.word	0x200007cc

08000e24 <process_rx_event>:
uint8_t rcv_data[40];
void process_rx_event(uint8_t *received_string,uint8_t no_bytes){
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000e30:	2120      	movs	r1, #32
 8000e32:	4810      	ldr	r0, [pc, #64]	; (8000e74 <process_rx_event+0x50>)
 8000e34:	f001 f8a7 	bl	8001f86 <HAL_GPIO_TogglePin>
	for(int i=0;i<no_bytes;i++){
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	e00b      	b.n	8000e56 <process_rx_event+0x32>
		rcv_data[i]=received_string[i];
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	4413      	add	r3, r2
 8000e44:	7819      	ldrb	r1, [r3, #0]
 8000e46:	4a0c      	ldr	r2, [pc, #48]	; (8000e78 <process_rx_event+0x54>)
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	460a      	mov	r2, r1
 8000e4e:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<no_bytes;i++){
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	3301      	adds	r3, #1
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	78fb      	ldrb	r3, [r7, #3]
 8000e58:	68fa      	ldr	r2, [r7, #12]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	dbef      	blt.n	8000e3e <process_rx_event+0x1a>
	}
	char *incoming_data=(char *)rcv_data;
 8000e5e:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <process_rx_event+0x54>)
 8000e60:	60bb      	str	r3, [r7, #8]

	printf("gelen data=%s\n",incoming_data);
 8000e62:	68b9      	ldr	r1, [r7, #8]
 8000e64:	4805      	ldr	r0, [pc, #20]	; (8000e7c <process_rx_event+0x58>)
 8000e66:	f004 fe9b 	bl	8005ba0 <iprintf>


}
 8000e6a:	bf00      	nop
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40020000 	.word	0x40020000
 8000e78:	200007d0 	.word	0x200007d0
 8000e7c:	08006c40 	.word	0x08006c40

08000e80 <send_data>:

void send_data(uint8_t *send_data,uint8_t no_bytes){
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af02      	add	r7, sp, #8
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	460b      	mov	r3, r1
 8000e8a:	70fb      	strb	r3, [r7, #3]
	tBleStatus ret;
	//Update characteristic value
	ret=aci_gatt_update_char_value(chat_service_handle, mychar_tx_handle, 0, no_bytes,send_data);
 8000e8c:	4b0b      	ldr	r3, [pc, #44]	; (8000ebc <send_data+0x3c>)
 8000e8e:	8818      	ldrh	r0, [r3, #0]
 8000e90:	4b0b      	ldr	r3, [pc, #44]	; (8000ec0 <send_data+0x40>)
 8000e92:	8819      	ldrh	r1, [r3, #0]
 8000e94:	78fa      	ldrb	r2, [r7, #3]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f004 f99b 	bl	80051d8 <aci_gatt_update_char_value>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	73fb      	strb	r3, [r7, #15]
	if(ret!=BLE_STATUS_SUCCESS){
 8000ea6:	7bfb      	ldrb	r3, [r7, #15]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d002      	beq.n	8000eb2 <send_data+0x32>
			printf("Failed to update_char_value\r\n");
 8000eac:	4805      	ldr	r0, [pc, #20]	; (8000ec4 <send_data+0x44>)
 8000eae:	f004 fefd 	bl	8005cac <puts>
		}

}
 8000eb2:	bf00      	nop
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	200007ca 	.word	0x200007ca
 8000ec0:	200007c8 	.word	0x200007c8
 8000ec4:	08006c50 	.word	0x08006c50

08000ec8 <attribute_modified_callback>:
}
void GAP_DisconnectionComplete_CB(void){
	printf("Disconnection Complete....\r\n");
}*/

void attribute_modified_callback(uint16_t handle,uint8_t data_length,uint8_t *att_data){
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	603a      	str	r2, [r7, #0]
 8000ed2:	80fb      	strh	r3, [r7, #6]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	717b      	strb	r3, [r7, #5]
	if(handle==mychar_rx_handle+1){
 8000ed8:	88fa      	ldrh	r2, [r7, #6]
 8000eda:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <attribute_modified_callback+0x4c>)
 8000edc:	881b      	ldrh	r3, [r3, #0]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d105      	bne.n	8000ef0 <attribute_modified_callback+0x28>
		process_rx_event(att_data, data_length);
 8000ee4:	797b      	ldrb	r3, [r7, #5]
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	6838      	ldr	r0, [r7, #0]
 8000eea:	f7ff ff9b 	bl	8000e24 <process_rx_event>
		if(att_data[0]==0x01){
			notification_enabled=TRUE;
		}
	}

}
 8000eee:	e00c      	b.n	8000f0a <attribute_modified_callback+0x42>
	else if(handle==mychar_tx_handle+2){
 8000ef0:	88fa      	ldrh	r2, [r7, #6]
 8000ef2:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <attribute_modified_callback+0x50>)
 8000ef4:	881b      	ldrh	r3, [r3, #0]
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d106      	bne.n	8000f0a <attribute_modified_callback+0x42>
		if(att_data[0]==0x01){
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d102      	bne.n	8000f0a <attribute_modified_callback+0x42>
			notification_enabled=TRUE;
 8000f04:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <attribute_modified_callback+0x54>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	701a      	strb	r2, [r3, #0]
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	200007cc 	.word	0x200007cc
 8000f18:	200007c8 	.word	0x200007c8
 8000f1c:	200001ce 	.word	0x200001ce

08000f20 <aci_gatt_attribute_modified_event>:
void aci_gatt_attribute_modified_event(uint16_t Connection_Handle,
									uint16_t Attr_Handle,
									uint16_t Offset,
									uint16_t Attr_Data_Length,
									uint8_t Attr_Data[])
{
 8000f20:	b590      	push	{r4, r7, lr}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4604      	mov	r4, r0
 8000f28:	4608      	mov	r0, r1
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4623      	mov	r3, r4
 8000f30:	80fb      	strh	r3, [r7, #6]
 8000f32:	4603      	mov	r3, r0
 8000f34:	80bb      	strh	r3, [r7, #4]
 8000f36:	460b      	mov	r3, r1
 8000f38:	807b      	strh	r3, [r7, #2]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	803b      	strh	r3, [r7, #0]
	attribute_modified_callback(Attr_Handle,Attr_Data_Length,Attr_Data);
 8000f3e:	883b      	ldrh	r3, [r7, #0]
 8000f40:	b2d9      	uxtb	r1, r3
 8000f42:	88bb      	ldrh	r3, [r7, #4]
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff ffbe 	bl	8000ec8 <attribute_modified_callback>
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd90      	pop	{r4, r7, pc}

08000f54 <aci_gatt_notification_event>:
 void aci_gatt_notification_event(uint16_t Connection_Handle,
                                 uint16_t Attribute_Handle,
                                 uint8_t Attribute_Value_Length,
                                 uint8_t Attribute_Value[])
 {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	81fb      	strh	r3, [r7, #14]
 8000f60:	460b      	mov	r3, r1
 8000f62:	81bb      	strh	r3, [r7, #12]
 8000f64:	4613      	mov	r3, r2
 8000f66:	72fb      	strb	r3, [r7, #11]
	 if(Attribute_Handle==mychar_tx_handle+2){
 8000f68:	89ba      	ldrh	r2, [r7, #12]
 8000f6a:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <aci_gatt_notification_event+0x34>)
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	3302      	adds	r3, #2
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d104      	bne.n	8000f7e <aci_gatt_notification_event+0x2a>
		 process_rx_event(Attribute_Value, Attribute_Value_Length);
 8000f74:	7afb      	ldrb	r3, [r7, #11]
 8000f76:	4619      	mov	r1, r3
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff ff53 	bl	8000e24 <process_rx_event>
	 }



                   }
 8000f7e:	bf00      	nop
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200007c8 	.word	0x200007c8

08000f8c <hci_le_connection_complete_event>:
									  uint8_t Peer_Adress[6],
									  uint16_t Conn_Interval,
									  uint16_t Conn_Latency,
									  uint16_t Supervision_Timeout,
									  uint8_t Master_Clock_Accuracy)
{
 8000f8c:	b490      	push	{r4, r7}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4604      	mov	r4, r0
 8000f94:	4608      	mov	r0, r1
 8000f96:	4611      	mov	r1, r2
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4623      	mov	r3, r4
 8000f9c:	71fb      	strb	r3, [r7, #7]
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	80bb      	strh	r3, [r7, #4]
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	71bb      	strb	r3, [r7, #6]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	70fb      	strb	r3, [r7, #3]
	connected=TRUE;
 8000faa:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <hci_le_connection_complete_event+0x34>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	701a      	strb	r2, [r3, #0]
	connection_handle=Connection_Handle;
 8000fb0:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <hci_le_connection_complete_event+0x38>)
 8000fb2:	88bb      	ldrh	r3, [r7, #4]
 8000fb4:	8013      	strh	r3, [r2, #0]

}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc90      	pop	{r4, r7}
 8000fbe:	4770      	bx	lr
 8000fc0:	200001cb 	.word	0x200001cb
 8000fc4:	200001cc 	.word	0x200001cc

08000fc8 <hci_disconnection_complete_event>:
void hci_disconnection_complete_event(uint8_t Status,
							         uint16_t Connection_Handle,
									 uint8_t Reason)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	80bb      	strh	r3, [r7, #4]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	71bb      	strb	r3, [r7, #6]
	connected=FALSE;
 8000fda:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <hci_disconnection_complete_event+0x34>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	701a      	strb	r2, [r3, #0]
	set_connectable=1;
 8000fe0:	4b07      	ldr	r3, [pc, #28]	; (8001000 <hci_disconnection_complete_event+0x38>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	701a      	strb	r2, [r3, #0]
	connection_handle=0;
 8000fe6:	4b07      	ldr	r3, [pc, #28]	; (8001004 <hci_disconnection_complete_event+0x3c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	801a      	strh	r2, [r3, #0]
	printf("Disconnected\r\n");
 8000fec:	4806      	ldr	r0, [pc, #24]	; (8001008 <hci_disconnection_complete_event+0x40>)
 8000fee:	f004 fe5d 	bl	8005cac <puts>


}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200001cb 	.word	0x200001cb
 8001000:	2000003c 	.word	0x2000003c
 8001004:	200001cc 	.word	0x200001cc
 8001008:	08006c70 	.word	0x08006c70

0800100c <APP_UserEvRx>:

void APP_UserEvRx(void *pdata){
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	uint32_t i;
	hci_spi_pckt *hci_pckt=(hci_spi_pckt*)pdata;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	61bb      	str	r3, [r7, #24]
	//Process event packet
	if(hci_pckt->type==HCI_EVENT_PKT){
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b04      	cmp	r3, #4
 800101e:	d163      	bne.n	80010e8 <APP_UserEvRx+0xdc>
		//Get data from packet
		hci_event_pckt *event_pckt=(hci_event_pckt*)hci_pckt->data;
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	3301      	adds	r3, #1
 8001024:	617b      	str	r3, [r7, #20]
		//Process meta data event
		if(event_pckt->evt==EVT_LE_META_EVENT){
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b3e      	cmp	r3, #62	; 0x3e
 800102c:	d11e      	bne.n	800106c <APP_UserEvRx+0x60>
			//gET META DATA
			evt_le_meta_event *evt=(void*)event_pckt->data;
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	3302      	adds	r3, #2
 8001032:	60fb      	str	r3, [r7, #12]
			//Process each meta data event
			for(i=0;i<sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type);i++){
 8001034:	2300      	movs	r3, #0
 8001036:	61fb      	str	r3, [r7, #28]
 8001038:	e014      	b.n	8001064 <APP_UserEvRx+0x58>
					if(evt->subevent==hci_le_meta_events_table[i].evt_code){
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	b29a      	uxth	r2, r3
 8001040:	492b      	ldr	r1, [pc, #172]	; (80010f0 <APP_UserEvRx+0xe4>)
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 8001048:	429a      	cmp	r2, r3
 800104a:	d108      	bne.n	800105e <APP_UserEvRx+0x52>
						hci_le_meta_events_table[i].process((void*)evt->data);
 800104c:	4a28      	ldr	r2, [pc, #160]	; (80010f0 <APP_UserEvRx+0xe4>)
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	00db      	lsls	r3, r3, #3
 8001052:	4413      	add	r3, r2
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	3201      	adds	r2, #1
 800105a:	4610      	mov	r0, r2
 800105c:	4798      	blx	r3
			for(i=0;i<sizeof(hci_le_meta_events_table)/sizeof(hci_le_meta_events_table_type);i++){
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3301      	adds	r3, #1
 8001062:	61fb      	str	r3, [r7, #28]
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	2b09      	cmp	r3, #9
 8001068:	d9e7      	bls.n	800103a <APP_UserEvRx+0x2e>

	}



}
 800106a:	e03d      	b.n	80010e8 <APP_UserEvRx+0xdc>
		else if(event_pckt->evt==EVT_VENDOR){
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2bff      	cmp	r3, #255	; 0xff
 8001072:	d11e      	bne.n	80010b2 <APP_UserEvRx+0xa6>
			evt_blue_aci * blue_evt=(void*)event_pckt->data;
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	3302      	adds	r3, #2
 8001078:	613b      	str	r3, [r7, #16]
			for(i=0;i<sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type);i++){
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
 800107e:	e014      	b.n	80010aa <APP_UserEvRx+0x9e>
				if(blue_evt->ecode==hci_vendor_specific_events_table[i].evt_code){
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	881b      	ldrh	r3, [r3, #0]
 8001084:	b29a      	uxth	r2, r3
 8001086:	491b      	ldr	r1, [pc, #108]	; (80010f4 <APP_UserEvRx+0xe8>)
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 800108e:	429a      	cmp	r2, r3
 8001090:	d108      	bne.n	80010a4 <APP_UserEvRx+0x98>
					hci_vendor_specific_events_table[i].process((void*)blue_evt->data);
 8001092:	4a18      	ldr	r2, [pc, #96]	; (80010f4 <APP_UserEvRx+0xe8>)
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	4413      	add	r3, r2
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	3202      	adds	r2, #2
 80010a0:	4610      	mov	r0, r2
 80010a2:	4798      	blx	r3
			for(i=0;i<sizeof(hci_vendor_specific_events_table)/sizeof(hci_vendor_specific_events_table_type);i++){
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	3301      	adds	r3, #1
 80010a8:	61fb      	str	r3, [r7, #28]
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	2b2a      	cmp	r3, #42	; 0x2a
 80010ae:	d9e7      	bls.n	8001080 <APP_UserEvRx+0x74>
}
 80010b0:	e01a      	b.n	80010e8 <APP_UserEvRx+0xdc>
			for(i=0;i<sizeof(hci_events_table)/sizeof(hci_events_table_type);i++){
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
 80010b6:	e014      	b.n	80010e2 <APP_UserEvRx+0xd6>
				if(event_pckt->evt==hci_events_table[i].evt_code){
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	b29a      	uxth	r2, r3
 80010be:	490e      	ldr	r1, [pc, #56]	; (80010f8 <APP_UserEvRx+0xec>)
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f831 3033 	ldrh.w	r3, [r1, r3, lsl #3]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d108      	bne.n	80010dc <APP_UserEvRx+0xd0>
					hci_events_table[i].process((void *)event_pckt->data);
 80010ca:	4a0b      	ldr	r2, [pc, #44]	; (80010f8 <APP_UserEvRx+0xec>)
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	00db      	lsls	r3, r3, #3
 80010d0:	4413      	add	r3, r2
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	3202      	adds	r2, #2
 80010d8:	4610      	mov	r0, r2
 80010da:	4798      	blx	r3
			for(i=0;i<sizeof(hci_events_table)/sizeof(hci_events_table_type);i++){
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	3301      	adds	r3, #1
 80010e0:	61fb      	str	r3, [r7, #28]
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	2b06      	cmp	r3, #6
 80010e6:	d9e7      	bls.n	80010b8 <APP_UserEvRx+0xac>
}
 80010e8:	bf00      	nop
 80010ea:	3720      	adds	r7, #32
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	08006cd0 	.word	0x08006cd0
 80010f4:	08006d20 	.word	0x08006d20
 80010f8:	08006c98 	.word	0x08006c98

080010fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <HAL_MspInit+0x4c>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	4a0f      	ldr	r2, [pc, #60]	; (8001148 <HAL_MspInit+0x4c>)
 800110c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001110:	6453      	str	r3, [r2, #68]	; 0x44
 8001112:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <HAL_MspInit+0x4c>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	603b      	str	r3, [r7, #0]
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <HAL_MspInit+0x4c>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	4a08      	ldr	r2, [pc, #32]	; (8001148 <HAL_MspInit+0x4c>)
 8001128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800112c:	6413      	str	r3, [r2, #64]	; 0x40
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <HAL_MspInit+0x4c>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001136:	603b      	str	r3, [r7, #0]
 8001138:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800113a:	2007      	movs	r0, #7
 800113c:	f000 fbe8 	bl	8001910 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40023800 	.word	0x40023800

0800114c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	; 0x28
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a19      	ldr	r2, [pc, #100]	; (80011d0 <HAL_UART_MspInit+0x84>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d12b      	bne.n	80011c6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <HAL_UART_MspInit+0x88>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	4a17      	ldr	r2, [pc, #92]	; (80011d4 <HAL_UART_MspInit+0x88>)
 8001178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800117c:	6413      	str	r3, [r2, #64]	; 0x40
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <HAL_UART_MspInit+0x88>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <HAL_UART_MspInit+0x88>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a10      	ldr	r2, [pc, #64]	; (80011d4 <HAL_UART_MspInit+0x88>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <HAL_UART_MspInit+0x88>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011a6:	230c      	movs	r3, #12
 80011a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011aa:	2302      	movs	r3, #2
 80011ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b2:	2303      	movs	r3, #3
 80011b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011b6:	2307      	movs	r3, #7
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	4619      	mov	r1, r3
 80011c0:	4805      	ldr	r0, [pc, #20]	; (80011d8 <HAL_UART_MspInit+0x8c>)
 80011c2:	f000 fc47 	bl	8001a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011c6:	bf00      	nop
 80011c8:	3728      	adds	r7, #40	; 0x28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40004400 	.word	0x40004400
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40020000 	.word	0x40020000

080011dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <NMI_Handler+0x4>

080011e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e6:	e7fe      	b.n	80011e6 <HardFault_Handler+0x4>

080011e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011ec:	e7fe      	b.n	80011ec <MemManage_Handler+0x4>

080011ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f2:	e7fe      	b.n	80011f2 <BusFault_Handler+0x4>

080011f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <UsageFault_Handler+0x4>

080011fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001228:	f000 fa3a 	bl	80016a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}

08001230 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8001234:	4802      	ldr	r0, [pc, #8]	; (8001240 <EXTI0_IRQHandler+0x10>)
 8001236:	f000 fbe9 	bl	8001a0c <HAL_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000778 	.word	0x20000778

08001244 <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800124a:	2300      	movs	r3, #0
 800124c:	607b      	str	r3, [r7, #4]

  hspi1.Instance  = SPI1;
 800124e:	4b12      	ldr	r3, [pc, #72]	; (8001298 <BSP_SPI1_Init+0x54>)
 8001250:	4a12      	ldr	r2, [pc, #72]	; (800129c <BSP_SPI1_Init+0x58>)
 8001252:	601a      	str	r2, [r3, #0]

  if(SPI1InitCounter++ == 0)
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <BSP_SPI1_Init+0x5c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	1c5a      	adds	r2, r3, #1
 800125a:	4911      	ldr	r1, [pc, #68]	; (80012a0 <BSP_SPI1_Init+0x5c>)
 800125c:	600a      	str	r2, [r1, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d114      	bne.n	800128c <BSP_SPI1_Init+0x48>
  {
    if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8001262:	480d      	ldr	r0, [pc, #52]	; (8001298 <BSP_SPI1_Init+0x54>)
 8001264:	f001 fd53 	bl	8002d0e <HAL_SPI_GetState>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d10e      	bne.n	800128c <BSP_SPI1_Init+0x48>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0U)
        /* Init the SPI Msp */
        SPI1_MspInit(&hspi1);
 800126e:	480a      	ldr	r0, [pc, #40]	; (8001298 <BSP_SPI1_Init+0x54>)
 8001270:	f000 f87c 	bl	800136c <SPI1_MspInit>
            {
                return BSP_ERROR_MSP_FAILURE;
            }
        }
#endif
        if(ret == BSP_ERROR_NONE)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d108      	bne.n	800128c <BSP_SPI1_Init+0x48>
        {
            /* Init the SPI */
            if (MX_SPI1_Init(&hspi1) != HAL_OK)
 800127a:	4807      	ldr	r0, [pc, #28]	; (8001298 <BSP_SPI1_Init+0x54>)
 800127c:	f000 f83a 	bl	80012f4 <MX_SPI1_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d002      	beq.n	800128c <BSP_SPI1_Init+0x48>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8001286:	f06f 0307 	mvn.w	r3, #7
 800128a:	607b      	str	r3, [r7, #4]
            }
        }
    }
  }

  return ret;
 800128c:	687b      	ldr	r3, [r7, #4]
}
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	200007f8 	.word	0x200007f8
 800129c:	40013000 	.word	0x40013000
 80012a0:	200001d0 	.word	0x200001d0

080012a4 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b088      	sub	sp, #32
 80012a8:	af02      	add	r7, sp, #8
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	4613      	mov	r3, r2
 80012b0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80012b2:	2300      	movs	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]

  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 80012b6:	88fb      	ldrh	r3, [r7, #6]
 80012b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012bc:	9200      	str	r2, [sp, #0]
 80012be:	68ba      	ldr	r2, [r7, #8]
 80012c0:	68f9      	ldr	r1, [r7, #12]
 80012c2:	4807      	ldr	r0, [pc, #28]	; (80012e0 <BSP_SPI1_SendRecv+0x3c>)
 80012c4:	f001 fb81 	bl	80029ca <HAL_SPI_TransmitReceive>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d002      	beq.n	80012d4 <BSP_SPI1_SendRecv+0x30>
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
 80012ce:	f06f 0305 	mvn.w	r3, #5
 80012d2:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80012d4:	697b      	ldr	r3, [r7, #20]
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	200007f8 	.word	0x200007f8

080012e4 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80012e8:	f000 f9ee 	bl	80016c8 <HAL_GetTick>
 80012ec:	4603      	mov	r3, r0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <MX_SPI1_Init>:

/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80012fc:	2300      	movs	r3, #0
 80012fe:	73fb      	strb	r3, [r7, #15]

  hspi->Instance = SPI1;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a19      	ldr	r2, [pc, #100]	; (8001368 <MX_SPI1_Init+0x74>)
 8001304:	601a      	str	r2, [r3, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f44f 7282 	mov.w	r2, #260	; 0x104
 800130c:	605a      	str	r2, [r3, #4]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  hspi->Init.CLKPhase = SPI_PHASE_2EDGE;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2201      	movs	r2, #1
 8001324:	615a      	str	r2, [r3, #20]
  hspi->Init.NSS = SPI_NSS_SOFT;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f44f 7200 	mov.w	r2, #512	; 0x200
 800132c:	619a      	str	r2, [r3, #24]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2228      	movs	r2, #40	; 0x28
 8001332:	61da      	str	r2, [r3, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	621a      	str	r2, [r3, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	629a      	str	r2, [r3, #40]	; 0x28
  hspi->Init.CRCPolynomial = 10;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	220a      	movs	r2, #10
 800134a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f001 faa9 	bl	80028a4 <HAL_SPI_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_SPI1_Init+0x68>
  {
    ret = HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800135c:	7bfb      	ldrb	r3, [r7, #15]
}
 800135e:	4618      	mov	r0, r3
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40013000 	.word	0x40013000

0800136c <SPI1_MspInit>:

static void SPI1_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08a      	sub	sp, #40	; 0x28
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001374:	2300      	movs	r3, #0
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	4b2d      	ldr	r3, [pc, #180]	; (8001430 <SPI1_MspInit+0xc4>)
 800137a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137c:	4a2c      	ldr	r2, [pc, #176]	; (8001430 <SPI1_MspInit+0xc4>)
 800137e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001382:	6453      	str	r3, [r2, #68]	; 0x44
 8001384:	4b2a      	ldr	r3, [pc, #168]	; (8001430 <SPI1_MspInit+0xc4>)
 8001386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001388:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800138c:	613b      	str	r3, [r7, #16]
 800138e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	4b26      	ldr	r3, [pc, #152]	; (8001430 <SPI1_MspInit+0xc4>)
 8001396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001398:	4a25      	ldr	r2, [pc, #148]	; (8001430 <SPI1_MspInit+0xc4>)
 800139a:	f043 0301 	orr.w	r3, r3, #1
 800139e:	6313      	str	r3, [r2, #48]	; 0x30
 80013a0:	4b23      	ldr	r3, [pc, #140]	; (8001430 <SPI1_MspInit+0xc4>)
 80013a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ac:	2300      	movs	r3, #0
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	4b1f      	ldr	r3, [pc, #124]	; (8001430 <SPI1_MspInit+0xc4>)
 80013b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b4:	4a1e      	ldr	r2, [pc, #120]	; (8001430 <SPI1_MspInit+0xc4>)
 80013b6:	f043 0302 	orr.w	r3, r3, #2
 80013ba:	6313      	str	r3, [r2, #48]	; 0x30
 80013bc:	4b1c      	ldr	r3, [pc, #112]	; (8001430 <SPI1_MspInit+0xc4>)
 80013be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 80013c8:	2340      	movs	r3, #64	; 0x40
 80013ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d4:	2303      	movs	r3, #3
 80013d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 80013d8:	2305      	movs	r3, #5
 80013da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	4619      	mov	r1, r3
 80013e2:	4814      	ldr	r0, [pc, #80]	; (8001434 <SPI1_MspInit+0xc8>)
 80013e4:	f000 fb36 	bl	8001a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 80013e8:	2380      	movs	r3, #128	; 0x80
 80013ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ec:	2302      	movs	r3, #2
 80013ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f4:	2303      	movs	r3, #3
 80013f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 80013f8:	2305      	movs	r3, #5
 80013fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	4619      	mov	r1, r3
 8001402:	480c      	ldr	r0, [pc, #48]	; (8001434 <SPI1_MspInit+0xc8>)
 8001404:	f000 fb26 	bl	8001a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8001408:	2308      	movs	r3, #8
 800140a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800140c:	2302      	movs	r3, #2
 800140e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	2300      	movs	r3, #0
 8001412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001414:	2303      	movs	r3, #3
 8001416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 8001418:	2305      	movs	r3, #5
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 800141c:	f107 0314 	add.w	r3, r7, #20
 8001420:	4619      	mov	r1, r3
 8001422:	4805      	ldr	r0, [pc, #20]	; (8001438 <SPI1_MspInit+0xcc>)
 8001424:	f000 fb16 	bl	8001a54 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
}
 8001428:	bf00      	nop
 800142a:	3728      	adds	r7, #40	; 0x28
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40023800 	.word	0x40023800
 8001434:	40020000 	.word	0x40020000
 8001438:	40020400 	.word	0x40020400

0800143c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	e00a      	b.n	8001464 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800144e:	f3af 8000 	nop.w
 8001452:	4601      	mov	r1, r0
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	1c5a      	adds	r2, r3, #1
 8001458:	60ba      	str	r2, [r7, #8]
 800145a:	b2ca      	uxtb	r2, r1
 800145c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	3301      	adds	r3, #1
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	697a      	ldr	r2, [r7, #20]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	429a      	cmp	r2, r3
 800146a:	dbf0      	blt.n	800144e <_read+0x12>
	}

return len;
 800146c:	687b      	ldr	r3, [r7, #4]
}
 800146e:	4618      	mov	r0, r3
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}

08001476 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	b086      	sub	sp, #24
 800147a:	af00      	add	r7, sp, #0
 800147c:	60f8      	str	r0, [r7, #12]
 800147e:	60b9      	str	r1, [r7, #8]
 8001480:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	e009      	b.n	800149c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	60ba      	str	r2, [r7, #8]
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fb25 	bl	8000ae0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	3301      	adds	r3, #1
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	697a      	ldr	r2, [r7, #20]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	dbf1      	blt.n	8001488 <_write+0x12>
	}
	return len;
 80014a4:	687b      	ldr	r3, [r7, #4]
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3718      	adds	r7, #24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <_close>:

int _close(int file)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
	return -1;
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014c6:	b480      	push	{r7}
 80014c8:	b083      	sub	sp, #12
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	6078      	str	r0, [r7, #4]
 80014ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014d6:	605a      	str	r2, [r3, #4]
	return 0;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <_isatty>:

int _isatty(int file)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b083      	sub	sp, #12
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
	return 1;
 80014ee:	2301      	movs	r3, #1
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
	return 0;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3714      	adds	r7, #20
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
	...

08001518 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001520:	4a14      	ldr	r2, [pc, #80]	; (8001574 <_sbrk+0x5c>)
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <_sbrk+0x60>)
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800152c:	4b13      	ldr	r3, [pc, #76]	; (800157c <_sbrk+0x64>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d102      	bne.n	800153a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001534:	4b11      	ldr	r3, [pc, #68]	; (800157c <_sbrk+0x64>)
 8001536:	4a12      	ldr	r2, [pc, #72]	; (8001580 <_sbrk+0x68>)
 8001538:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <_sbrk+0x64>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4413      	add	r3, r2
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	429a      	cmp	r2, r3
 8001546:	d207      	bcs.n	8001558 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001548:	f004 faea 	bl	8005b20 <__errno>
 800154c:	4603      	mov	r3, r0
 800154e:	220c      	movs	r2, #12
 8001550:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001552:	f04f 33ff 	mov.w	r3, #4294967295
 8001556:	e009      	b.n	800156c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001558:	4b08      	ldr	r3, [pc, #32]	; (800157c <_sbrk+0x64>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800155e:	4b07      	ldr	r3, [pc, #28]	; (800157c <_sbrk+0x64>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4413      	add	r3, r2
 8001566:	4a05      	ldr	r2, [pc, #20]	; (800157c <_sbrk+0x64>)
 8001568:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800156a:	68fb      	ldr	r3, [r7, #12]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20020000 	.word	0x20020000
 8001578:	00000400 	.word	0x00000400
 800157c:	200001d4 	.word	0x200001d4
 8001580:	20000878 	.word	0x20000878

08001584 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <SystemInit+0x20>)
 800158a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800158e:	4a05      	ldr	r2, [pc, #20]	; (80015a4 <SystemInit+0x20>)
 8001590:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001594:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80015a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015ac:	480d      	ldr	r0, [pc, #52]	; (80015e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015ae:	490e      	ldr	r1, [pc, #56]	; (80015e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015b0:	4a0e      	ldr	r2, [pc, #56]	; (80015ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015b4:	e002      	b.n	80015bc <LoopCopyDataInit>

080015b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ba:	3304      	adds	r3, #4

080015bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c0:	d3f9      	bcc.n	80015b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015c2:	4a0b      	ldr	r2, [pc, #44]	; (80015f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015c4:	4c0b      	ldr	r4, [pc, #44]	; (80015f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80015c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c8:	e001      	b.n	80015ce <LoopFillZerobss>

080015ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015cc:	3204      	adds	r2, #4

080015ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d0:	d3fb      	bcc.n	80015ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015d2:	f7ff ffd7 	bl	8001584 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015d6:	f004 faa9 	bl	8005b2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015da:	f7ff fa93 	bl	8000b04 <main>
  bx  lr    
 80015de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015e8:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 80015ec:	08006f20 	.word	0x08006f20
  ldr r2, =_sbss
 80015f0:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 80015f4:	20000874 	.word	0x20000874

080015f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015f8:	e7fe      	b.n	80015f8 <ADC_IRQHandler>
	...

080015fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001600:	4b0e      	ldr	r3, [pc, #56]	; (800163c <HAL_Init+0x40>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a0d      	ldr	r2, [pc, #52]	; (800163c <HAL_Init+0x40>)
 8001606:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800160a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800160c:	4b0b      	ldr	r3, [pc, #44]	; (800163c <HAL_Init+0x40>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a0a      	ldr	r2, [pc, #40]	; (800163c <HAL_Init+0x40>)
 8001612:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001616:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001618:	4b08      	ldr	r3, [pc, #32]	; (800163c <HAL_Init+0x40>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a07      	ldr	r2, [pc, #28]	; (800163c <HAL_Init+0x40>)
 800161e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001622:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001624:	2003      	movs	r0, #3
 8001626:	f000 f973 	bl	8001910 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800162a:	2000      	movs	r0, #0
 800162c:	f000 f808 	bl	8001640 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001630:	f7ff fd64 	bl	80010fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40023c00 	.word	0x40023c00

08001640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <HAL_InitTick+0x54>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	4b12      	ldr	r3, [pc, #72]	; (8001698 <HAL_InitTick+0x58>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	4619      	mov	r1, r3
 8001652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001656:	fbb3 f3f1 	udiv	r3, r3, r1
 800165a:	fbb2 f3f3 	udiv	r3, r2, r3
 800165e:	4618      	mov	r0, r3
 8001660:	f000 f999 	bl	8001996 <HAL_SYSTICK_Config>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e00e      	b.n	800168c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b0f      	cmp	r3, #15
 8001672:	d80a      	bhi.n	800168a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001674:	2200      	movs	r2, #0
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	f04f 30ff 	mov.w	r0, #4294967295
 800167c:	f000 f953 	bl	8001926 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001680:	4a06      	ldr	r2, [pc, #24]	; (800169c <HAL_InitTick+0x5c>)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001686:	2300      	movs	r3, #0
 8001688:	e000      	b.n	800168c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
}
 800168c:	4618      	mov	r0, r3
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	20000040 	.word	0x20000040
 8001698:	20000048 	.word	0x20000048
 800169c:	20000044 	.word	0x20000044

080016a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <HAL_IncTick+0x20>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	461a      	mov	r2, r3
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_IncTick+0x24>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4413      	add	r3, r2
 80016b0:	4a04      	ldr	r2, [pc, #16]	; (80016c4 <HAL_IncTick+0x24>)
 80016b2:	6013      	str	r3, [r2, #0]
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	20000048 	.word	0x20000048
 80016c4:	20000850 	.word	0x20000850

080016c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return uwTick;
 80016cc:	4b03      	ldr	r3, [pc, #12]	; (80016dc <HAL_GetTick+0x14>)
 80016ce:	681b      	ldr	r3, [r3, #0]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	20000850 	.word	0x20000850

080016e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016e8:	f7ff ffee 	bl	80016c8 <HAL_GetTick>
 80016ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016f8:	d005      	beq.n	8001706 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016fa:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <HAL_Delay+0x44>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	461a      	mov	r2, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4413      	add	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001706:	bf00      	nop
 8001708:	f7ff ffde 	bl	80016c8 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	429a      	cmp	r2, r3
 8001716:	d8f7      	bhi.n	8001708 <HAL_Delay+0x28>
  {
  }
}
 8001718:	bf00      	nop
 800171a:	bf00      	nop
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000048 	.word	0x20000048

08001728 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001738:	4b0c      	ldr	r3, [pc, #48]	; (800176c <__NVIC_SetPriorityGrouping+0x44>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001744:	4013      	ands	r3, r2
 8001746:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001750:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001758:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800175a:	4a04      	ldr	r2, [pc, #16]	; (800176c <__NVIC_SetPriorityGrouping+0x44>)
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	60d3      	str	r3, [r2, #12]
}
 8001760:	bf00      	nop
 8001762:	3714      	adds	r7, #20
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001774:	4b04      	ldr	r3, [pc, #16]	; (8001788 <__NVIC_GetPriorityGrouping+0x18>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	0a1b      	lsrs	r3, r3, #8
 800177a:	f003 0307 	and.w	r3, r3, #7
}
 800177e:	4618      	mov	r0, r3
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179a:	2b00      	cmp	r3, #0
 800179c:	db0b      	blt.n	80017b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800179e:	79fb      	ldrb	r3, [r7, #7]
 80017a0:	f003 021f 	and.w	r2, r3, #31
 80017a4:	4907      	ldr	r1, [pc, #28]	; (80017c4 <__NVIC_EnableIRQ+0x38>)
 80017a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017aa:	095b      	lsrs	r3, r3, #5
 80017ac:	2001      	movs	r0, #1
 80017ae:	fa00 f202 	lsl.w	r2, r0, r2
 80017b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	e000e100 	.word	0xe000e100

080017c8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	db12      	blt.n	8001800 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	f003 021f 	and.w	r2, r3, #31
 80017e0:	490a      	ldr	r1, [pc, #40]	; (800180c <__NVIC_DisableIRQ+0x44>)
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	095b      	lsrs	r3, r3, #5
 80017e8:	2001      	movs	r0, #1
 80017ea:	fa00 f202 	lsl.w	r2, r0, r2
 80017ee:	3320      	adds	r3, #32
 80017f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80017f4:	f3bf 8f4f 	dsb	sy
}
 80017f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017fa:	f3bf 8f6f 	isb	sy
}
 80017fe:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	e000e100 	.word	0xe000e100

08001810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	6039      	str	r1, [r7, #0]
 800181a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001820:	2b00      	cmp	r3, #0
 8001822:	db0a      	blt.n	800183a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	b2da      	uxtb	r2, r3
 8001828:	490c      	ldr	r1, [pc, #48]	; (800185c <__NVIC_SetPriority+0x4c>)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	0112      	lsls	r2, r2, #4
 8001830:	b2d2      	uxtb	r2, r2
 8001832:	440b      	add	r3, r1
 8001834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001838:	e00a      	b.n	8001850 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	b2da      	uxtb	r2, r3
 800183e:	4908      	ldr	r1, [pc, #32]	; (8001860 <__NVIC_SetPriority+0x50>)
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	f003 030f 	and.w	r3, r3, #15
 8001846:	3b04      	subs	r3, #4
 8001848:	0112      	lsls	r2, r2, #4
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	440b      	add	r3, r1
 800184e:	761a      	strb	r2, [r3, #24]
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000e100 	.word	0xe000e100
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001864:	b480      	push	{r7}
 8001866:	b089      	sub	sp, #36	; 0x24
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	f1c3 0307 	rsb	r3, r3, #7
 800187e:	2b04      	cmp	r3, #4
 8001880:	bf28      	it	cs
 8001882:	2304      	movcs	r3, #4
 8001884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3304      	adds	r3, #4
 800188a:	2b06      	cmp	r3, #6
 800188c:	d902      	bls.n	8001894 <NVIC_EncodePriority+0x30>
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3b03      	subs	r3, #3
 8001892:	e000      	b.n	8001896 <NVIC_EncodePriority+0x32>
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001898:	f04f 32ff 	mov.w	r2, #4294967295
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43da      	mvns	r2, r3
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	401a      	ands	r2, r3
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018ac:	f04f 31ff 	mov.w	r1, #4294967295
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	fa01 f303 	lsl.w	r3, r1, r3
 80018b6:	43d9      	mvns	r1, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	4313      	orrs	r3, r2
         );
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3724      	adds	r7, #36	; 0x24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
	...

080018cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018dc:	d301      	bcc.n	80018e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018de:	2301      	movs	r3, #1
 80018e0:	e00f      	b.n	8001902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018e2:	4a0a      	ldr	r2, [pc, #40]	; (800190c <SysTick_Config+0x40>)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ea:	210f      	movs	r1, #15
 80018ec:	f04f 30ff 	mov.w	r0, #4294967295
 80018f0:	f7ff ff8e 	bl	8001810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f4:	4b05      	ldr	r3, [pc, #20]	; (800190c <SysTick_Config+0x40>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018fa:	4b04      	ldr	r3, [pc, #16]	; (800190c <SysTick_Config+0x40>)
 80018fc:	2207      	movs	r2, #7
 80018fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	e000e010 	.word	0xe000e010

08001910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff ff05 	bl	8001728 <__NVIC_SetPriorityGrouping>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001926:	b580      	push	{r7, lr}
 8001928:	b086      	sub	sp, #24
 800192a:	af00      	add	r7, sp, #0
 800192c:	4603      	mov	r3, r0
 800192e:	60b9      	str	r1, [r7, #8]
 8001930:	607a      	str	r2, [r7, #4]
 8001932:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001938:	f7ff ff1a 	bl	8001770 <__NVIC_GetPriorityGrouping>
 800193c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	68b9      	ldr	r1, [r7, #8]
 8001942:	6978      	ldr	r0, [r7, #20]
 8001944:	f7ff ff8e 	bl	8001864 <NVIC_EncodePriority>
 8001948:	4602      	mov	r2, r0
 800194a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800194e:	4611      	mov	r1, r2
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff5d 	bl	8001810 <__NVIC_SetPriority>
}
 8001956:	bf00      	nop
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	4603      	mov	r3, r0
 8001966:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff0d 	bl	800178c <__NVIC_EnableIRQ>
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	4603      	mov	r3, r0
 8001982:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001988:	4618      	mov	r0, r3
 800198a:	f7ff ff1d 	bl	80017c8 <__NVIC_DisableIRQ>
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b082      	sub	sp, #8
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f7ff ff94 	bl	80018cc <SysTick_Config>
 80019a4:	4603      	mov	r3, r0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80019ae:	b480      	push	{r7}
 80019b0:	b087      	sub	sp, #28
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	60f8      	str	r0, [r7, #12]
 80019b6:	460b      	mov	r3, r1
 80019b8:	607a      	str	r2, [r7, #4]
 80019ba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80019bc:	2300      	movs	r3, #0
 80019be:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 80019c0:	7afb      	ldrb	r3, [r7, #11]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d103      	bne.n	80019ce <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	605a      	str	r2, [r3, #4]
      break;
 80019cc:	e002      	b.n	80019d4 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	75fb      	strb	r3, [r7, #23]
      break;
 80019d2:	bf00      	nop
  }

  return status;
 80019d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	371c      	adds	r7, #28
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr

080019e2 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e003      	b.n	80019fe <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80019fc:	2300      	movs	r3, #0
  }
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
	...

08001a0c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 031f 	and.w	r3, r3, #31
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	60fb      	str	r3, [r7, #12]

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8001a24:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <HAL_EXTI_IRQHandler+0x44>)
 8001a26:	695b      	ldr	r3, [r3, #20]
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	60bb      	str	r3, [r7, #8]
  if (regval != 0x00u)
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d009      	beq.n	8001a48 <HAL_EXTI_IRQHandler+0x3c>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8001a34:	4a06      	ldr	r2, [pc, #24]	; (8001a50 <HAL_EXTI_IRQHandler+0x44>)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d002      	beq.n	8001a48 <HAL_EXTI_IRQHandler+0x3c>
    {
      hexti->PendingCallback();
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	4798      	blx	r3
    }
  }
}
 8001a48:	bf00      	nop
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40013c00 	.word	0x40013c00

08001a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b089      	sub	sp, #36	; 0x24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61fb      	str	r3, [r7, #28]
 8001a6e:	e159      	b.n	8001d24 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a70:	2201      	movs	r2, #1
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	4013      	ands	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	f040 8148 	bne.w	8001d1e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f003 0303 	and.w	r3, r3, #3
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d005      	beq.n	8001aa6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d130      	bne.n	8001b08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	2203      	movs	r2, #3
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	69ba      	ldr	r2, [r7, #24]
 8001aba:	4013      	ands	r3, r2
 8001abc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	68da      	ldr	r2, [r3, #12]
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001adc:	2201      	movs	r2, #1
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	091b      	lsrs	r3, r3, #4
 8001af2:	f003 0201 	and.w	r2, r3, #1
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 0303 	and.w	r3, r3, #3
 8001b10:	2b03      	cmp	r3, #3
 8001b12:	d017      	beq.n	8001b44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	2203      	movs	r2, #3
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 0303 	and.w	r3, r3, #3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d123      	bne.n	8001b98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	08da      	lsrs	r2, r3, #3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3208      	adds	r2, #8
 8001b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	220f      	movs	r2, #15
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	691a      	ldr	r2, [r3, #16]
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	08da      	lsrs	r2, r3, #3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	3208      	adds	r2, #8
 8001b92:	69b9      	ldr	r1, [r7, #24]
 8001b94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 0203 	and.w	r2, r3, #3
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f000 80a2 	beq.w	8001d1e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	4b57      	ldr	r3, [pc, #348]	; (8001d3c <HAL_GPIO_Init+0x2e8>)
 8001be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be2:	4a56      	ldr	r2, [pc, #344]	; (8001d3c <HAL_GPIO_Init+0x2e8>)
 8001be4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001be8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bea:	4b54      	ldr	r3, [pc, #336]	; (8001d3c <HAL_GPIO_Init+0x2e8>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bf6:	4a52      	ldr	r2, [pc, #328]	; (8001d40 <HAL_GPIO_Init+0x2ec>)
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	089b      	lsrs	r3, r3, #2
 8001bfc:	3302      	adds	r3, #2
 8001bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	220f      	movs	r2, #15
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43db      	mvns	r3, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4013      	ands	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a49      	ldr	r2, [pc, #292]	; (8001d44 <HAL_GPIO_Init+0x2f0>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d019      	beq.n	8001c56 <HAL_GPIO_Init+0x202>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a48      	ldr	r2, [pc, #288]	; (8001d48 <HAL_GPIO_Init+0x2f4>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d013      	beq.n	8001c52 <HAL_GPIO_Init+0x1fe>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a47      	ldr	r2, [pc, #284]	; (8001d4c <HAL_GPIO_Init+0x2f8>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d00d      	beq.n	8001c4e <HAL_GPIO_Init+0x1fa>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a46      	ldr	r2, [pc, #280]	; (8001d50 <HAL_GPIO_Init+0x2fc>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d007      	beq.n	8001c4a <HAL_GPIO_Init+0x1f6>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a45      	ldr	r2, [pc, #276]	; (8001d54 <HAL_GPIO_Init+0x300>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d101      	bne.n	8001c46 <HAL_GPIO_Init+0x1f2>
 8001c42:	2304      	movs	r3, #4
 8001c44:	e008      	b.n	8001c58 <HAL_GPIO_Init+0x204>
 8001c46:	2307      	movs	r3, #7
 8001c48:	e006      	b.n	8001c58 <HAL_GPIO_Init+0x204>
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e004      	b.n	8001c58 <HAL_GPIO_Init+0x204>
 8001c4e:	2302      	movs	r3, #2
 8001c50:	e002      	b.n	8001c58 <HAL_GPIO_Init+0x204>
 8001c52:	2301      	movs	r3, #1
 8001c54:	e000      	b.n	8001c58 <HAL_GPIO_Init+0x204>
 8001c56:	2300      	movs	r3, #0
 8001c58:	69fa      	ldr	r2, [r7, #28]
 8001c5a:	f002 0203 	and.w	r2, r2, #3
 8001c5e:	0092      	lsls	r2, r2, #2
 8001c60:	4093      	lsls	r3, r2
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c68:	4935      	ldr	r1, [pc, #212]	; (8001d40 <HAL_GPIO_Init+0x2ec>)
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	089b      	lsrs	r3, r3, #2
 8001c6e:	3302      	adds	r3, #2
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c76:	4b38      	ldr	r3, [pc, #224]	; (8001d58 <HAL_GPIO_Init+0x304>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c9a:	4a2f      	ldr	r2, [pc, #188]	; (8001d58 <HAL_GPIO_Init+0x304>)
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ca0:	4b2d      	ldr	r3, [pc, #180]	; (8001d58 <HAL_GPIO_Init+0x304>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cc4:	4a24      	ldr	r2, [pc, #144]	; (8001d58 <HAL_GPIO_Init+0x304>)
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cca:	4b23      	ldr	r3, [pc, #140]	; (8001d58 <HAL_GPIO_Init+0x304>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cee:	4a1a      	ldr	r2, [pc, #104]	; (8001d58 <HAL_GPIO_Init+0x304>)
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cf4:	4b18      	ldr	r3, [pc, #96]	; (8001d58 <HAL_GPIO_Init+0x304>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d003      	beq.n	8001d18 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d18:	4a0f      	ldr	r2, [pc, #60]	; (8001d58 <HAL_GPIO_Init+0x304>)
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	3301      	adds	r3, #1
 8001d22:	61fb      	str	r3, [r7, #28]
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	2b0f      	cmp	r3, #15
 8001d28:	f67f aea2 	bls.w	8001a70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d2c:	bf00      	nop
 8001d2e:	bf00      	nop
 8001d30:	3724      	adds	r7, #36	; 0x24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40013800 	.word	0x40013800
 8001d44:	40020000 	.word	0x40020000
 8001d48:	40020400 	.word	0x40020400
 8001d4c:	40020800 	.word	0x40020800
 8001d50:	40020c00 	.word	0x40020c00
 8001d54:	40021000 	.word	0x40021000
 8001d58:	40013c00 	.word	0x40013c00

08001d5c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b087      	sub	sp, #28
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d66:	2300      	movs	r3, #0
 8001d68:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d72:	2300      	movs	r3, #0
 8001d74:	617b      	str	r3, [r7, #20]
 8001d76:	e0bb      	b.n	8001ef0 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d78:	2201      	movs	r2, #1
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	4013      	ands	r3, r2
 8001d88:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	f040 80ab 	bne.w	8001eea <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001d94:	4a5c      	ldr	r2, [pc, #368]	; (8001f08 <HAL_GPIO_DeInit+0x1ac>)
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	089b      	lsrs	r3, r3, #2
 8001d9a:	3302      	adds	r3, #2
 8001d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	220f      	movs	r2, #15
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	68ba      	ldr	r2, [r7, #8]
 8001db2:	4013      	ands	r3, r2
 8001db4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a54      	ldr	r2, [pc, #336]	; (8001f0c <HAL_GPIO_DeInit+0x1b0>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d019      	beq.n	8001df2 <HAL_GPIO_DeInit+0x96>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a53      	ldr	r2, [pc, #332]	; (8001f10 <HAL_GPIO_DeInit+0x1b4>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d013      	beq.n	8001dee <HAL_GPIO_DeInit+0x92>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a52      	ldr	r2, [pc, #328]	; (8001f14 <HAL_GPIO_DeInit+0x1b8>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d00d      	beq.n	8001dea <HAL_GPIO_DeInit+0x8e>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a51      	ldr	r2, [pc, #324]	; (8001f18 <HAL_GPIO_DeInit+0x1bc>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d007      	beq.n	8001de6 <HAL_GPIO_DeInit+0x8a>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a50      	ldr	r2, [pc, #320]	; (8001f1c <HAL_GPIO_DeInit+0x1c0>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d101      	bne.n	8001de2 <HAL_GPIO_DeInit+0x86>
 8001dde:	2304      	movs	r3, #4
 8001de0:	e008      	b.n	8001df4 <HAL_GPIO_DeInit+0x98>
 8001de2:	2307      	movs	r3, #7
 8001de4:	e006      	b.n	8001df4 <HAL_GPIO_DeInit+0x98>
 8001de6:	2303      	movs	r3, #3
 8001de8:	e004      	b.n	8001df4 <HAL_GPIO_DeInit+0x98>
 8001dea:	2302      	movs	r3, #2
 8001dec:	e002      	b.n	8001df4 <HAL_GPIO_DeInit+0x98>
 8001dee:	2301      	movs	r3, #1
 8001df0:	e000      	b.n	8001df4 <HAL_GPIO_DeInit+0x98>
 8001df2:	2300      	movs	r3, #0
 8001df4:	697a      	ldr	r2, [r7, #20]
 8001df6:	f002 0203 	and.w	r2, r2, #3
 8001dfa:	0092      	lsls	r2, r2, #2
 8001dfc:	4093      	lsls	r3, r2
 8001dfe:	68ba      	ldr	r2, [r7, #8]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d132      	bne.n	8001e6a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001e04:	4b46      	ldr	r3, [pc, #280]	; (8001f20 <HAL_GPIO_DeInit+0x1c4>)
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	43db      	mvns	r3, r3
 8001e0c:	4944      	ldr	r1, [pc, #272]	; (8001f20 <HAL_GPIO_DeInit+0x1c4>)
 8001e0e:	4013      	ands	r3, r2
 8001e10:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001e12:	4b43      	ldr	r3, [pc, #268]	; (8001f20 <HAL_GPIO_DeInit+0x1c4>)
 8001e14:	685a      	ldr	r2, [r3, #4]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	4941      	ldr	r1, [pc, #260]	; (8001f20 <HAL_GPIO_DeInit+0x1c4>)
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001e20:	4b3f      	ldr	r3, [pc, #252]	; (8001f20 <HAL_GPIO_DeInit+0x1c4>)
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	43db      	mvns	r3, r3
 8001e28:	493d      	ldr	r1, [pc, #244]	; (8001f20 <HAL_GPIO_DeInit+0x1c4>)
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001e2e:	4b3c      	ldr	r3, [pc, #240]	; (8001f20 <HAL_GPIO_DeInit+0x1c4>)
 8001e30:	68da      	ldr	r2, [r3, #12]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	43db      	mvns	r3, r3
 8001e36:	493a      	ldr	r1, [pc, #232]	; (8001f20 <HAL_GPIO_DeInit+0x1c4>)
 8001e38:	4013      	ands	r3, r2
 8001e3a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	220f      	movs	r2, #15
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001e4c:	4a2e      	ldr	r2, [pc, #184]	; (8001f08 <HAL_GPIO_DeInit+0x1ac>)
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	089b      	lsrs	r3, r3, #2
 8001e52:	3302      	adds	r3, #2
 8001e54:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	43da      	mvns	r2, r3
 8001e5c:	482a      	ldr	r0, [pc, #168]	; (8001f08 <HAL_GPIO_DeInit+0x1ac>)
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	089b      	lsrs	r3, r3, #2
 8001e62:	400a      	ands	r2, r1
 8001e64:	3302      	adds	r3, #2
 8001e66:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	2103      	movs	r1, #3
 8001e74:	fa01 f303 	lsl.w	r3, r1, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	401a      	ands	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	08da      	lsrs	r2, r3, #3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3208      	adds	r2, #8
 8001e88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	220f      	movs	r2, #15
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	08d2      	lsrs	r2, r2, #3
 8001ea0:	4019      	ands	r1, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3208      	adds	r2, #8
 8001ea6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68da      	ldr	r2, [r3, #12]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	2103      	movs	r1, #3
 8001eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	401a      	ands	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	401a      	ands	r2, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	2103      	movs	r1, #3
 8001ede:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	401a      	ands	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	3301      	adds	r3, #1
 8001eee:	617b      	str	r3, [r7, #20]
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	2b0f      	cmp	r3, #15
 8001ef4:	f67f af40 	bls.w	8001d78 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001ef8:	bf00      	nop
 8001efa:	bf00      	nop
 8001efc:	371c      	adds	r7, #28
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	40013800 	.word	0x40013800
 8001f0c:	40020000 	.word	0x40020000
 8001f10:	40020400 	.word	0x40020400
 8001f14:	40020800 	.word	0x40020800
 8001f18:	40020c00 	.word	0x40020c00
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40013c00 	.word	0x40013c00

08001f24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	691a      	ldr	r2, [r3, #16]
 8001f34:	887b      	ldrh	r3, [r7, #2]
 8001f36:	4013      	ands	r3, r2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d002      	beq.n	8001f42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	73fb      	strb	r3, [r7, #15]
 8001f40:	e001      	b.n	8001f46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f42:	2300      	movs	r3, #0
 8001f44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	807b      	strh	r3, [r7, #2]
 8001f60:	4613      	mov	r3, r2
 8001f62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f64:	787b      	ldrb	r3, [r7, #1]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f6a:	887a      	ldrh	r2, [r7, #2]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f70:	e003      	b.n	8001f7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f72:	887b      	ldrh	r3, [r7, #2]
 8001f74:	041a      	lsls	r2, r3, #16
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	619a      	str	r2, [r3, #24]
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b085      	sub	sp, #20
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f98:	887a      	ldrh	r2, [r7, #2]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	041a      	lsls	r2, r3, #16
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	43d9      	mvns	r1, r3
 8001fa4:	887b      	ldrh	r3, [r7, #2]
 8001fa6:	400b      	ands	r3, r1
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	619a      	str	r2, [r3, #24]
}
 8001fae:	bf00      	nop
 8001fb0:	3714      	adds	r7, #20
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
	...

08001fbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e264      	b.n	8002498 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d075      	beq.n	80020c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fda:	4ba3      	ldr	r3, [pc, #652]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 030c 	and.w	r3, r3, #12
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	d00c      	beq.n	8002000 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fe6:	4ba0      	ldr	r3, [pc, #640]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fee:	2b08      	cmp	r3, #8
 8001ff0:	d112      	bne.n	8002018 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ff2:	4b9d      	ldr	r3, [pc, #628]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ffa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ffe:	d10b      	bne.n	8002018 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002000:	4b99      	ldr	r3, [pc, #612]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d05b      	beq.n	80020c4 <HAL_RCC_OscConfig+0x108>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d157      	bne.n	80020c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e23f      	b.n	8002498 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002020:	d106      	bne.n	8002030 <HAL_RCC_OscConfig+0x74>
 8002022:	4b91      	ldr	r3, [pc, #580]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a90      	ldr	r2, [pc, #576]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800202c:	6013      	str	r3, [r2, #0]
 800202e:	e01d      	b.n	800206c <HAL_RCC_OscConfig+0xb0>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002038:	d10c      	bne.n	8002054 <HAL_RCC_OscConfig+0x98>
 800203a:	4b8b      	ldr	r3, [pc, #556]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a8a      	ldr	r2, [pc, #552]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002044:	6013      	str	r3, [r2, #0]
 8002046:	4b88      	ldr	r3, [pc, #544]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a87      	ldr	r2, [pc, #540]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 800204c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002050:	6013      	str	r3, [r2, #0]
 8002052:	e00b      	b.n	800206c <HAL_RCC_OscConfig+0xb0>
 8002054:	4b84      	ldr	r3, [pc, #528]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a83      	ldr	r2, [pc, #524]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 800205a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800205e:	6013      	str	r3, [r2, #0]
 8002060:	4b81      	ldr	r3, [pc, #516]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a80      	ldr	r2, [pc, #512]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800206a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d013      	beq.n	800209c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002074:	f7ff fb28 	bl	80016c8 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800207c:	f7ff fb24 	bl	80016c8 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b64      	cmp	r3, #100	; 0x64
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e204      	b.n	8002498 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800208e:	4b76      	ldr	r3, [pc, #472]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0f0      	beq.n	800207c <HAL_RCC_OscConfig+0xc0>
 800209a:	e014      	b.n	80020c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209c:	f7ff fb14 	bl	80016c8 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020a4:	f7ff fb10 	bl	80016c8 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b64      	cmp	r3, #100	; 0x64
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e1f0      	b.n	8002498 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020b6:	4b6c      	ldr	r3, [pc, #432]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f0      	bne.n	80020a4 <HAL_RCC_OscConfig+0xe8>
 80020c2:	e000      	b.n	80020c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d063      	beq.n	800219a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020d2:	4b65      	ldr	r3, [pc, #404]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 030c 	and.w	r3, r3, #12
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00b      	beq.n	80020f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020de:	4b62      	ldr	r3, [pc, #392]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020e6:	2b08      	cmp	r3, #8
 80020e8:	d11c      	bne.n	8002124 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020ea:	4b5f      	ldr	r3, [pc, #380]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d116      	bne.n	8002124 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f6:	4b5c      	ldr	r3, [pc, #368]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d005      	beq.n	800210e <HAL_RCC_OscConfig+0x152>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d001      	beq.n	800210e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e1c4      	b.n	8002498 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210e:	4b56      	ldr	r3, [pc, #344]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4952      	ldr	r1, [pc, #328]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 800211e:	4313      	orrs	r3, r2
 8002120:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002122:	e03a      	b.n	800219a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d020      	beq.n	800216e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800212c:	4b4f      	ldr	r3, [pc, #316]	; (800226c <HAL_RCC_OscConfig+0x2b0>)
 800212e:	2201      	movs	r2, #1
 8002130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002132:	f7ff fac9 	bl	80016c8 <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800213a:	f7ff fac5 	bl	80016c8 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e1a5      	b.n	8002498 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800214c:	4b46      	ldr	r3, [pc, #280]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0f0      	beq.n	800213a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002158:	4b43      	ldr	r3, [pc, #268]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	4940      	ldr	r1, [pc, #256]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002168:	4313      	orrs	r3, r2
 800216a:	600b      	str	r3, [r1, #0]
 800216c:	e015      	b.n	800219a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800216e:	4b3f      	ldr	r3, [pc, #252]	; (800226c <HAL_RCC_OscConfig+0x2b0>)
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002174:	f7ff faa8 	bl	80016c8 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800217c:	f7ff faa4 	bl	80016c8 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b02      	cmp	r3, #2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e184      	b.n	8002498 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800218e:	4b36      	ldr	r3, [pc, #216]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f0      	bne.n	800217c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0308 	and.w	r3, r3, #8
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d030      	beq.n	8002208 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	695b      	ldr	r3, [r3, #20]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d016      	beq.n	80021dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021ae:	4b30      	ldr	r3, [pc, #192]	; (8002270 <HAL_RCC_OscConfig+0x2b4>)
 80021b0:	2201      	movs	r2, #1
 80021b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b4:	f7ff fa88 	bl	80016c8 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021bc:	f7ff fa84 	bl	80016c8 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e164      	b.n	8002498 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ce:	4b26      	ldr	r3, [pc, #152]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 80021d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f0      	beq.n	80021bc <HAL_RCC_OscConfig+0x200>
 80021da:	e015      	b.n	8002208 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021dc:	4b24      	ldr	r3, [pc, #144]	; (8002270 <HAL_RCC_OscConfig+0x2b4>)
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e2:	f7ff fa71 	bl	80016c8 <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e8:	e008      	b.n	80021fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021ea:	f7ff fa6d 	bl	80016c8 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e14d      	b.n	8002498 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021fc:	4b1a      	ldr	r3, [pc, #104]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 80021fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1f0      	bne.n	80021ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	f000 80a0 	beq.w	8002356 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002216:	2300      	movs	r3, #0
 8002218:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800221a:	4b13      	ldr	r3, [pc, #76]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d10f      	bne.n	8002246 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	4b0f      	ldr	r3, [pc, #60]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	4a0e      	ldr	r2, [pc, #56]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002234:	6413      	str	r3, [r2, #64]	; 0x40
 8002236:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <HAL_RCC_OscConfig+0x2ac>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223e:	60bb      	str	r3, [r7, #8]
 8002240:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002242:	2301      	movs	r3, #1
 8002244:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002246:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <HAL_RCC_OscConfig+0x2b8>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224e:	2b00      	cmp	r3, #0
 8002250:	d121      	bne.n	8002296 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002252:	4b08      	ldr	r3, [pc, #32]	; (8002274 <HAL_RCC_OscConfig+0x2b8>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a07      	ldr	r2, [pc, #28]	; (8002274 <HAL_RCC_OscConfig+0x2b8>)
 8002258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800225c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800225e:	f7ff fa33 	bl	80016c8 <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002264:	e011      	b.n	800228a <HAL_RCC_OscConfig+0x2ce>
 8002266:	bf00      	nop
 8002268:	40023800 	.word	0x40023800
 800226c:	42470000 	.word	0x42470000
 8002270:	42470e80 	.word	0x42470e80
 8002274:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002278:	f7ff fa26 	bl	80016c8 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b02      	cmp	r3, #2
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e106      	b.n	8002498 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228a:	4b85      	ldr	r3, [pc, #532]	; (80024a0 <HAL_RCC_OscConfig+0x4e4>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0f0      	beq.n	8002278 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d106      	bne.n	80022ac <HAL_RCC_OscConfig+0x2f0>
 800229e:	4b81      	ldr	r3, [pc, #516]	; (80024a4 <HAL_RCC_OscConfig+0x4e8>)
 80022a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a2:	4a80      	ldr	r2, [pc, #512]	; (80024a4 <HAL_RCC_OscConfig+0x4e8>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	6713      	str	r3, [r2, #112]	; 0x70
 80022aa:	e01c      	b.n	80022e6 <HAL_RCC_OscConfig+0x32a>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	2b05      	cmp	r3, #5
 80022b2:	d10c      	bne.n	80022ce <HAL_RCC_OscConfig+0x312>
 80022b4:	4b7b      	ldr	r3, [pc, #492]	; (80024a4 <HAL_RCC_OscConfig+0x4e8>)
 80022b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b8:	4a7a      	ldr	r2, [pc, #488]	; (80024a4 <HAL_RCC_OscConfig+0x4e8>)
 80022ba:	f043 0304 	orr.w	r3, r3, #4
 80022be:	6713      	str	r3, [r2, #112]	; 0x70
 80022c0:	4b78      	ldr	r3, [pc, #480]	; (80024a4 <HAL_RCC_OscConfig+0x4e8>)
 80022c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c4:	4a77      	ldr	r2, [pc, #476]	; (80024a4 <HAL_RCC_OscConfig+0x4e8>)
 80022c6:	f043 0301 	orr.w	r3, r3, #1
 80022ca:	6713      	str	r3, [r2, #112]	; 0x70
 80022cc:	e00b      	b.n	80022e6 <HAL_RCC_OscConfig+0x32a>
 80022ce:	4b75      	ldr	r3, [pc, #468]	; (80024a4 <HAL_RCC_OscConfig+0x4e8>)
 80022d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d2:	4a74      	ldr	r2, [pc, #464]	; (80024a4 <HAL_RCC_OscConfig+0x4e8>)
 80022d4:	f023 0301 	bic.w	r3, r3, #1
 80022d8:	6713      	str	r3, [r2, #112]	; 0x70
 80022da:	4b72      	ldr	r3, [pc, #456]	; (80024a4 <HAL_RCC_OscConfig+0x4e8>)
 80022dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022de:	4a71      	ldr	r2, [pc, #452]	; (80024a4 <HAL_RCC_OscConfig+0x4e8>)
 80022e0:	f023 0304 	bic.w	r3, r3, #4
 80022e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d015      	beq.n	800231a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ee:	f7ff f9eb 	bl	80016c8 <HAL_GetTick>
 80022f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f4:	e00a      	b.n	800230c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022f6:	f7ff f9e7 	bl	80016c8 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	f241 3288 	movw	r2, #5000	; 0x1388
 8002304:	4293      	cmp	r3, r2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e0c5      	b.n	8002498 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800230c:	4b65      	ldr	r3, [pc, #404]	; (80024a4 <HAL_RCC_OscConfig+0x4e8>)
 800230e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0ee      	beq.n	80022f6 <HAL_RCC_OscConfig+0x33a>
 8002318:	e014      	b.n	8002344 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800231a:	f7ff f9d5 	bl	80016c8 <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002320:	e00a      	b.n	8002338 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002322:	f7ff f9d1 	bl	80016c8 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002330:	4293      	cmp	r3, r2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e0af      	b.n	8002498 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002338:	4b5a      	ldr	r3, [pc, #360]	; (80024a4 <HAL_RCC_OscConfig+0x4e8>)
 800233a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1ee      	bne.n	8002322 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002344:	7dfb      	ldrb	r3, [r7, #23]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d105      	bne.n	8002356 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800234a:	4b56      	ldr	r3, [pc, #344]	; (80024a4 <HAL_RCC_OscConfig+0x4e8>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	4a55      	ldr	r2, [pc, #340]	; (80024a4 <HAL_RCC_OscConfig+0x4e8>)
 8002350:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002354:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 809b 	beq.w	8002496 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002360:	4b50      	ldr	r3, [pc, #320]	; (80024a4 <HAL_RCC_OscConfig+0x4e8>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f003 030c 	and.w	r3, r3, #12
 8002368:	2b08      	cmp	r3, #8
 800236a:	d05c      	beq.n	8002426 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	2b02      	cmp	r3, #2
 8002372:	d141      	bne.n	80023f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002374:	4b4c      	ldr	r3, [pc, #304]	; (80024a8 <HAL_RCC_OscConfig+0x4ec>)
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237a:	f7ff f9a5 	bl	80016c8 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002382:	f7ff f9a1 	bl	80016c8 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e081      	b.n	8002498 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002394:	4b43      	ldr	r3, [pc, #268]	; (80024a4 <HAL_RCC_OscConfig+0x4e8>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d1f0      	bne.n	8002382 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	69da      	ldr	r2, [r3, #28]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	431a      	orrs	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ae:	019b      	lsls	r3, r3, #6
 80023b0:	431a      	orrs	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b6:	085b      	lsrs	r3, r3, #1
 80023b8:	3b01      	subs	r3, #1
 80023ba:	041b      	lsls	r3, r3, #16
 80023bc:	431a      	orrs	r2, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c2:	061b      	lsls	r3, r3, #24
 80023c4:	4937      	ldr	r1, [pc, #220]	; (80024a4 <HAL_RCC_OscConfig+0x4e8>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023ca:	4b37      	ldr	r3, [pc, #220]	; (80024a8 <HAL_RCC_OscConfig+0x4ec>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d0:	f7ff f97a 	bl	80016c8 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023d8:	f7ff f976 	bl	80016c8 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e056      	b.n	8002498 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ea:	4b2e      	ldr	r3, [pc, #184]	; (80024a4 <HAL_RCC_OscConfig+0x4e8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0f0      	beq.n	80023d8 <HAL_RCC_OscConfig+0x41c>
 80023f6:	e04e      	b.n	8002496 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f8:	4b2b      	ldr	r3, [pc, #172]	; (80024a8 <HAL_RCC_OscConfig+0x4ec>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fe:	f7ff f963 	bl	80016c8 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002406:	f7ff f95f 	bl	80016c8 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e03f      	b.n	8002498 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002418:	4b22      	ldr	r3, [pc, #136]	; (80024a4 <HAL_RCC_OscConfig+0x4e8>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1f0      	bne.n	8002406 <HAL_RCC_OscConfig+0x44a>
 8002424:	e037      	b.n	8002496 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d101      	bne.n	8002432 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e032      	b.n	8002498 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002432:	4b1c      	ldr	r3, [pc, #112]	; (80024a4 <HAL_RCC_OscConfig+0x4e8>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d028      	beq.n	8002492 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800244a:	429a      	cmp	r2, r3
 800244c:	d121      	bne.n	8002492 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002458:	429a      	cmp	r2, r3
 800245a:	d11a      	bne.n	8002492 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800245c:	68fa      	ldr	r2, [r7, #12]
 800245e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002462:	4013      	ands	r3, r2
 8002464:	687a      	ldr	r2, [r7, #4]
 8002466:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002468:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800246a:	4293      	cmp	r3, r2
 800246c:	d111      	bne.n	8002492 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002478:	085b      	lsrs	r3, r3, #1
 800247a:	3b01      	subs	r3, #1
 800247c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800247e:	429a      	cmp	r2, r3
 8002480:	d107      	bne.n	8002492 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800248e:	429a      	cmp	r2, r3
 8002490:	d001      	beq.n	8002496 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e000      	b.n	8002498 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40007000 	.word	0x40007000
 80024a4:	40023800 	.word	0x40023800
 80024a8:	42470060 	.word	0x42470060

080024ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e0cc      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024c0:	4b68      	ldr	r3, [pc, #416]	; (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	683a      	ldr	r2, [r7, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d90c      	bls.n	80024e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ce:	4b65      	ldr	r3, [pc, #404]	; (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	b2d2      	uxtb	r2, r2
 80024d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d6:	4b63      	ldr	r3, [pc, #396]	; (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0307 	and.w	r3, r3, #7
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d001      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e0b8      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d020      	beq.n	8002536 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0304 	and.w	r3, r3, #4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d005      	beq.n	800250c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002500:	4b59      	ldr	r3, [pc, #356]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	4a58      	ldr	r2, [pc, #352]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002506:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800250a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0308 	and.w	r3, r3, #8
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002518:	4b53      	ldr	r3, [pc, #332]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	4a52      	ldr	r2, [pc, #328]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800251e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002522:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002524:	4b50      	ldr	r3, [pc, #320]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	494d      	ldr	r1, [pc, #308]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002532:	4313      	orrs	r3, r2
 8002534:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d044      	beq.n	80025cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d107      	bne.n	800255a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254a:	4b47      	ldr	r3, [pc, #284]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d119      	bne.n	800258a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e07f      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2b02      	cmp	r3, #2
 8002560:	d003      	beq.n	800256a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002566:	2b03      	cmp	r3, #3
 8002568:	d107      	bne.n	800257a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800256a:	4b3f      	ldr	r3, [pc, #252]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d109      	bne.n	800258a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e06f      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257a:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e067      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800258a:	4b37      	ldr	r3, [pc, #220]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f023 0203 	bic.w	r2, r3, #3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	4934      	ldr	r1, [pc, #208]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002598:	4313      	orrs	r3, r2
 800259a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800259c:	f7ff f894 	bl	80016c8 <HAL_GetTick>
 80025a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a2:	e00a      	b.n	80025ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a4:	f7ff f890 	bl	80016c8 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e04f      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025ba:	4b2b      	ldr	r3, [pc, #172]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 020c 	and.w	r2, r3, #12
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d1eb      	bne.n	80025a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025cc:	4b25      	ldr	r3, [pc, #148]	; (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0307 	and.w	r3, r3, #7
 80025d4:	683a      	ldr	r2, [r7, #0]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d20c      	bcs.n	80025f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025da:	4b22      	ldr	r3, [pc, #136]	; (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e2:	4b20      	ldr	r3, [pc, #128]	; (8002664 <HAL_RCC_ClockConfig+0x1b8>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d001      	beq.n	80025f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e032      	b.n	800265a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d008      	beq.n	8002612 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002600:	4b19      	ldr	r3, [pc, #100]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	4916      	ldr	r1, [pc, #88]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800260e:	4313      	orrs	r3, r2
 8002610:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b00      	cmp	r3, #0
 800261c:	d009      	beq.n	8002632 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800261e:	4b12      	ldr	r3, [pc, #72]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
 800262a:	00db      	lsls	r3, r3, #3
 800262c:	490e      	ldr	r1, [pc, #56]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800262e:	4313      	orrs	r3, r2
 8002630:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002632:	f000 f821 	bl	8002678 <HAL_RCC_GetSysClockFreq>
 8002636:	4602      	mov	r2, r0
 8002638:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <HAL_RCC_ClockConfig+0x1bc>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	091b      	lsrs	r3, r3, #4
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	490a      	ldr	r1, [pc, #40]	; (800266c <HAL_RCC_ClockConfig+0x1c0>)
 8002644:	5ccb      	ldrb	r3, [r1, r3]
 8002646:	fa22 f303 	lsr.w	r3, r2, r3
 800264a:	4a09      	ldr	r2, [pc, #36]	; (8002670 <HAL_RCC_ClockConfig+0x1c4>)
 800264c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800264e:	4b09      	ldr	r3, [pc, #36]	; (8002674 <HAL_RCC_ClockConfig+0x1c8>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4618      	mov	r0, r3
 8002654:	f7fe fff4 	bl	8001640 <HAL_InitTick>

  return HAL_OK;
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3710      	adds	r7, #16
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	40023c00 	.word	0x40023c00
 8002668:	40023800 	.word	0x40023800
 800266c:	08006c80 	.word	0x08006c80
 8002670:	20000040 	.word	0x20000040
 8002674:	20000044 	.word	0x20000044

08002678 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002678:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800267c:	b084      	sub	sp, #16
 800267e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002680:	2300      	movs	r3, #0
 8002682:	607b      	str	r3, [r7, #4]
 8002684:	2300      	movs	r3, #0
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	2300      	movs	r3, #0
 800268a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800268c:	2300      	movs	r3, #0
 800268e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002690:	4b67      	ldr	r3, [pc, #412]	; (8002830 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 030c 	and.w	r3, r3, #12
 8002698:	2b08      	cmp	r3, #8
 800269a:	d00d      	beq.n	80026b8 <HAL_RCC_GetSysClockFreq+0x40>
 800269c:	2b08      	cmp	r3, #8
 800269e:	f200 80bd 	bhi.w	800281c <HAL_RCC_GetSysClockFreq+0x1a4>
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <HAL_RCC_GetSysClockFreq+0x34>
 80026a6:	2b04      	cmp	r3, #4
 80026a8:	d003      	beq.n	80026b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80026aa:	e0b7      	b.n	800281c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026ac:	4b61      	ldr	r3, [pc, #388]	; (8002834 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80026ae:	60bb      	str	r3, [r7, #8]
       break;
 80026b0:	e0b7      	b.n	8002822 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026b2:	4b61      	ldr	r3, [pc, #388]	; (8002838 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80026b4:	60bb      	str	r3, [r7, #8]
      break;
 80026b6:	e0b4      	b.n	8002822 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026b8:	4b5d      	ldr	r3, [pc, #372]	; (8002830 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026c0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026c2:	4b5b      	ldr	r3, [pc, #364]	; (8002830 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d04d      	beq.n	800276a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ce:	4b58      	ldr	r3, [pc, #352]	; (8002830 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	099b      	lsrs	r3, r3, #6
 80026d4:	461a      	mov	r2, r3
 80026d6:	f04f 0300 	mov.w	r3, #0
 80026da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80026de:	f04f 0100 	mov.w	r1, #0
 80026e2:	ea02 0800 	and.w	r8, r2, r0
 80026e6:	ea03 0901 	and.w	r9, r3, r1
 80026ea:	4640      	mov	r0, r8
 80026ec:	4649      	mov	r1, r9
 80026ee:	f04f 0200 	mov.w	r2, #0
 80026f2:	f04f 0300 	mov.w	r3, #0
 80026f6:	014b      	lsls	r3, r1, #5
 80026f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80026fc:	0142      	lsls	r2, r0, #5
 80026fe:	4610      	mov	r0, r2
 8002700:	4619      	mov	r1, r3
 8002702:	ebb0 0008 	subs.w	r0, r0, r8
 8002706:	eb61 0109 	sbc.w	r1, r1, r9
 800270a:	f04f 0200 	mov.w	r2, #0
 800270e:	f04f 0300 	mov.w	r3, #0
 8002712:	018b      	lsls	r3, r1, #6
 8002714:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002718:	0182      	lsls	r2, r0, #6
 800271a:	1a12      	subs	r2, r2, r0
 800271c:	eb63 0301 	sbc.w	r3, r3, r1
 8002720:	f04f 0000 	mov.w	r0, #0
 8002724:	f04f 0100 	mov.w	r1, #0
 8002728:	00d9      	lsls	r1, r3, #3
 800272a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800272e:	00d0      	lsls	r0, r2, #3
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	eb12 0208 	adds.w	r2, r2, r8
 8002738:	eb43 0309 	adc.w	r3, r3, r9
 800273c:	f04f 0000 	mov.w	r0, #0
 8002740:	f04f 0100 	mov.w	r1, #0
 8002744:	0259      	lsls	r1, r3, #9
 8002746:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800274a:	0250      	lsls	r0, r2, #9
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	4610      	mov	r0, r2
 8002752:	4619      	mov	r1, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	461a      	mov	r2, r3
 8002758:	f04f 0300 	mov.w	r3, #0
 800275c:	f7fd fd98 	bl	8000290 <__aeabi_uldivmod>
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4613      	mov	r3, r2
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	e04a      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800276a:	4b31      	ldr	r3, [pc, #196]	; (8002830 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	099b      	lsrs	r3, r3, #6
 8002770:	461a      	mov	r2, r3
 8002772:	f04f 0300 	mov.w	r3, #0
 8002776:	f240 10ff 	movw	r0, #511	; 0x1ff
 800277a:	f04f 0100 	mov.w	r1, #0
 800277e:	ea02 0400 	and.w	r4, r2, r0
 8002782:	ea03 0501 	and.w	r5, r3, r1
 8002786:	4620      	mov	r0, r4
 8002788:	4629      	mov	r1, r5
 800278a:	f04f 0200 	mov.w	r2, #0
 800278e:	f04f 0300 	mov.w	r3, #0
 8002792:	014b      	lsls	r3, r1, #5
 8002794:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002798:	0142      	lsls	r2, r0, #5
 800279a:	4610      	mov	r0, r2
 800279c:	4619      	mov	r1, r3
 800279e:	1b00      	subs	r0, r0, r4
 80027a0:	eb61 0105 	sbc.w	r1, r1, r5
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	f04f 0300 	mov.w	r3, #0
 80027ac:	018b      	lsls	r3, r1, #6
 80027ae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80027b2:	0182      	lsls	r2, r0, #6
 80027b4:	1a12      	subs	r2, r2, r0
 80027b6:	eb63 0301 	sbc.w	r3, r3, r1
 80027ba:	f04f 0000 	mov.w	r0, #0
 80027be:	f04f 0100 	mov.w	r1, #0
 80027c2:	00d9      	lsls	r1, r3, #3
 80027c4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027c8:	00d0      	lsls	r0, r2, #3
 80027ca:	4602      	mov	r2, r0
 80027cc:	460b      	mov	r3, r1
 80027ce:	1912      	adds	r2, r2, r4
 80027d0:	eb45 0303 	adc.w	r3, r5, r3
 80027d4:	f04f 0000 	mov.w	r0, #0
 80027d8:	f04f 0100 	mov.w	r1, #0
 80027dc:	0299      	lsls	r1, r3, #10
 80027de:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80027e2:	0290      	lsls	r0, r2, #10
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4610      	mov	r0, r2
 80027ea:	4619      	mov	r1, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	461a      	mov	r2, r3
 80027f0:	f04f 0300 	mov.w	r3, #0
 80027f4:	f7fd fd4c 	bl	8000290 <__aeabi_uldivmod>
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	4613      	mov	r3, r2
 80027fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002800:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	0c1b      	lsrs	r3, r3, #16
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	3301      	adds	r3, #1
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	fbb2 f3f3 	udiv	r3, r2, r3
 8002818:	60bb      	str	r3, [r7, #8]
      break;
 800281a:	e002      	b.n	8002822 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800281c:	4b05      	ldr	r3, [pc, #20]	; (8002834 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800281e:	60bb      	str	r3, [r7, #8]
      break;
 8002820:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002822:	68bb      	ldr	r3, [r7, #8]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800282e:	bf00      	nop
 8002830:	40023800 	.word	0x40023800
 8002834:	00f42400 	.word	0x00f42400
 8002838:	007a1200 	.word	0x007a1200

0800283c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002840:	4b03      	ldr	r3, [pc, #12]	; (8002850 <HAL_RCC_GetHCLKFreq+0x14>)
 8002842:	681b      	ldr	r3, [r3, #0]
}
 8002844:	4618      	mov	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	20000040 	.word	0x20000040

08002854 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002858:	f7ff fff0 	bl	800283c <HAL_RCC_GetHCLKFreq>
 800285c:	4602      	mov	r2, r0
 800285e:	4b05      	ldr	r3, [pc, #20]	; (8002874 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	0a9b      	lsrs	r3, r3, #10
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	4903      	ldr	r1, [pc, #12]	; (8002878 <HAL_RCC_GetPCLK1Freq+0x24>)
 800286a:	5ccb      	ldrb	r3, [r1, r3]
 800286c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002870:	4618      	mov	r0, r3
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40023800 	.word	0x40023800
 8002878:	08006c90 	.word	0x08006c90

0800287c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002880:	f7ff ffdc 	bl	800283c <HAL_RCC_GetHCLKFreq>
 8002884:	4602      	mov	r2, r0
 8002886:	4b05      	ldr	r3, [pc, #20]	; (800289c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	0b5b      	lsrs	r3, r3, #13
 800288c:	f003 0307 	and.w	r3, r3, #7
 8002890:	4903      	ldr	r1, [pc, #12]	; (80028a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002892:	5ccb      	ldrb	r3, [r1, r3]
 8002894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002898:	4618      	mov	r0, r3
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40023800 	.word	0x40023800
 80028a0:	08006c90 	.word	0x08006c90

080028a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e07b      	b.n	80029ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d108      	bne.n	80028d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028c6:	d009      	beq.n	80028dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	61da      	str	r2, [r3, #28]
 80028ce:	e005      	b.n	80028dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d106      	bne.n	80028fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f85d 	bl	80029b6 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2202      	movs	r2, #2
 8002900:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002912:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002924:	431a      	orrs	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	431a      	orrs	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	431a      	orrs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800294c:	431a      	orrs	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002956:	431a      	orrs	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002960:	ea42 0103 	orr.w	r1, r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002968:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	0c1b      	lsrs	r3, r3, #16
 800297a:	f003 0104 	and.w	r1, r3, #4
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002982:	f003 0210 	and.w	r2, r3, #16
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	69da      	ldr	r2, [r3, #28]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800299c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b08c      	sub	sp, #48	; 0x30
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	60f8      	str	r0, [r7, #12]
 80029d2:	60b9      	str	r1, [r7, #8]
 80029d4:	607a      	str	r2, [r7, #4]
 80029d6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80029d8:	2301      	movs	r3, #1
 80029da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80029dc:	2300      	movs	r3, #0
 80029de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d101      	bne.n	80029f0 <HAL_SPI_TransmitReceive+0x26>
 80029ec:	2302      	movs	r3, #2
 80029ee:	e18a      	b.n	8002d06 <HAL_SPI_TransmitReceive+0x33c>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029f8:	f7fe fe66 	bl	80016c8 <HAL_GetTick>
 80029fc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002a0e:	887b      	ldrh	r3, [r7, #2]
 8002a10:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d00f      	beq.n	8002a3a <HAL_SPI_TransmitReceive+0x70>
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a20:	d107      	bne.n	8002a32 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d103      	bne.n	8002a32 <HAL_SPI_TransmitReceive+0x68>
 8002a2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d003      	beq.n	8002a3a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002a32:	2302      	movs	r3, #2
 8002a34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a38:	e15b      	b.n	8002cf2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d005      	beq.n	8002a4c <HAL_SPI_TransmitReceive+0x82>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d002      	beq.n	8002a4c <HAL_SPI_TransmitReceive+0x82>
 8002a46:	887b      	ldrh	r3, [r7, #2]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d103      	bne.n	8002a54 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a52:	e14e      	b.n	8002cf2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d003      	beq.n	8002a68 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2205      	movs	r2, #5
 8002a64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	887a      	ldrh	r2, [r7, #2]
 8002a78:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	887a      	ldrh	r2, [r7, #2]
 8002a7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	887a      	ldrh	r2, [r7, #2]
 8002a8a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	887a      	ldrh	r2, [r7, #2]
 8002a90:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa8:	2b40      	cmp	r3, #64	; 0x40
 8002aaa:	d007      	beq.n	8002abc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002aba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ac4:	d178      	bne.n	8002bb8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d002      	beq.n	8002ad4 <HAL_SPI_TransmitReceive+0x10a>
 8002ace:	8b7b      	ldrh	r3, [r7, #26]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d166      	bne.n	8002ba2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad8:	881a      	ldrh	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae4:	1c9a      	adds	r2, r3, #2
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	3b01      	subs	r3, #1
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002af8:	e053      	b.n	8002ba2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d11b      	bne.n	8002b40 <HAL_SPI_TransmitReceive+0x176>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d016      	beq.n	8002b40 <HAL_SPI_TransmitReceive+0x176>
 8002b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d113      	bne.n	8002b40 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1c:	881a      	ldrh	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b28:	1c9a      	adds	r2, r3, #2
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	3b01      	subs	r3, #1
 8002b36:	b29a      	uxth	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d119      	bne.n	8002b82 <HAL_SPI_TransmitReceive+0x1b8>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d014      	beq.n	8002b82 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68da      	ldr	r2, [r3, #12]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b62:	b292      	uxth	r2, r2
 8002b64:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6a:	1c9a      	adds	r2, r3, #2
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	3b01      	subs	r3, #1
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002b82:	f7fe fda1 	bl	80016c8 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d807      	bhi.n	8002ba2 <HAL_SPI_TransmitReceive+0x1d8>
 8002b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b98:	d003      	beq.n	8002ba2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002ba0:	e0a7      	b.n	8002cf2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d1a6      	bne.n	8002afa <HAL_SPI_TransmitReceive+0x130>
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1a1      	bne.n	8002afa <HAL_SPI_TransmitReceive+0x130>
 8002bb6:	e07c      	b.n	8002cb2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d002      	beq.n	8002bc6 <HAL_SPI_TransmitReceive+0x1fc>
 8002bc0:	8b7b      	ldrh	r3, [r7, #26]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d16b      	bne.n	8002c9e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	330c      	adds	r3, #12
 8002bd0:	7812      	ldrb	r2, [r2, #0]
 8002bd2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd8:	1c5a      	adds	r2, r3, #1
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	3b01      	subs	r3, #1
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bec:	e057      	b.n	8002c9e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d11c      	bne.n	8002c36 <HAL_SPI_TransmitReceive+0x26c>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d017      	beq.n	8002c36 <HAL_SPI_TransmitReceive+0x26c>
 8002c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d114      	bne.n	8002c36 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	330c      	adds	r3, #12
 8002c16:	7812      	ldrb	r2, [r2, #0]
 8002c18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	b29a      	uxth	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d119      	bne.n	8002c78 <HAL_SPI_TransmitReceive+0x2ae>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d014      	beq.n	8002c78 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68da      	ldr	r2, [r3, #12]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c58:	b2d2      	uxtb	r2, r2
 8002c5a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c60:	1c5a      	adds	r2, r3, #1
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c74:	2301      	movs	r3, #1
 8002c76:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002c78:	f7fe fd26 	bl	80016c8 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d803      	bhi.n	8002c90 <HAL_SPI_TransmitReceive+0x2c6>
 8002c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c8e:	d102      	bne.n	8002c96 <HAL_SPI_TransmitReceive+0x2cc>
 8002c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d103      	bne.n	8002c9e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002c9c:	e029      	b.n	8002cf2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1a2      	bne.n	8002bee <HAL_SPI_TransmitReceive+0x224>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d19d      	bne.n	8002bee <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 f8c0 	bl	8002e3c <SPI_EndRxTxTransaction>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d006      	beq.n	8002cd0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002cce:	e010      	b.n	8002cf2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d10b      	bne.n	8002cf0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cd8:	2300      	movs	r3, #0
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	e000      	b.n	8002cf2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002cf0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002d02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3730      	adds	r7, #48	; 0x30
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b083      	sub	sp, #12
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d1c:	b2db      	uxtb	r3, r3
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
	...

08002d2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b088      	sub	sp, #32
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	603b      	str	r3, [r7, #0]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d3c:	f7fe fcc4 	bl	80016c8 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d44:	1a9b      	subs	r3, r3, r2
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	4413      	add	r3, r2
 8002d4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d4c:	f7fe fcbc 	bl	80016c8 <HAL_GetTick>
 8002d50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d52:	4b39      	ldr	r3, [pc, #228]	; (8002e38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	015b      	lsls	r3, r3, #5
 8002d58:	0d1b      	lsrs	r3, r3, #20
 8002d5a:	69fa      	ldr	r2, [r7, #28]
 8002d5c:	fb02 f303 	mul.w	r3, r2, r3
 8002d60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d62:	e054      	b.n	8002e0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d6a:	d050      	beq.n	8002e0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d6c:	f7fe fcac 	bl	80016c8 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	69fa      	ldr	r2, [r7, #28]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d902      	bls.n	8002d82 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d13d      	bne.n	8002dfe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d9a:	d111      	bne.n	8002dc0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002da4:	d004      	beq.n	8002db0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dae:	d107      	bne.n	8002dc0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dc8:	d10f      	bne.n	8002dea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002de8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e017      	b.n	8002e2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d101      	bne.n	8002e08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	4013      	ands	r3, r2
 8002e18:	68ba      	ldr	r2, [r7, #8]
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	bf0c      	ite	eq
 8002e1e:	2301      	moveq	r3, #1
 8002e20:	2300      	movne	r3, #0
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	461a      	mov	r2, r3
 8002e26:	79fb      	ldrb	r3, [r7, #7]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d19b      	bne.n	8002d64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3720      	adds	r7, #32
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	20000040 	.word	0x20000040

08002e3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b088      	sub	sp, #32
 8002e40:	af02      	add	r7, sp, #8
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002e48:	4b1b      	ldr	r3, [pc, #108]	; (8002eb8 <SPI_EndRxTxTransaction+0x7c>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a1b      	ldr	r2, [pc, #108]	; (8002ebc <SPI_EndRxTxTransaction+0x80>)
 8002e4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e52:	0d5b      	lsrs	r3, r3, #21
 8002e54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002e58:	fb02 f303 	mul.w	r3, r2, r3
 8002e5c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e66:	d112      	bne.n	8002e8e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	2180      	movs	r1, #128	; 0x80
 8002e72:	68f8      	ldr	r0, [r7, #12]
 8002e74:	f7ff ff5a 	bl	8002d2c <SPI_WaitFlagStateUntilTimeout>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d016      	beq.n	8002eac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e82:	f043 0220 	orr.w	r2, r3, #32
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e00f      	b.n	8002eae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00a      	beq.n	8002eaa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea4:	2b80      	cmp	r3, #128	; 0x80
 8002ea6:	d0f2      	beq.n	8002e8e <SPI_EndRxTxTransaction+0x52>
 8002ea8:	e000      	b.n	8002eac <SPI_EndRxTxTransaction+0x70>
        break;
 8002eaa:	bf00      	nop
  }

  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	20000040 	.word	0x20000040
 8002ebc:	165e9f81 	.word	0x165e9f81

08002ec0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e03f      	b.n	8002f52 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d106      	bne.n	8002eec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f7fe f930 	bl	800114c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2224      	movs	r2, #36	; 0x24
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f929 	bl	800315c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	691a      	ldr	r2, [r3, #16]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695a      	ldr	r2, [r3, #20]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68da      	ldr	r2, [r3, #12]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b08a      	sub	sp, #40	; 0x28
 8002f5e:	af02      	add	r7, sp, #8
 8002f60:	60f8      	str	r0, [r7, #12]
 8002f62:	60b9      	str	r1, [r7, #8]
 8002f64:	603b      	str	r3, [r7, #0]
 8002f66:	4613      	mov	r3, r2
 8002f68:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b20      	cmp	r3, #32
 8002f78:	d17c      	bne.n	8003074 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d002      	beq.n	8002f86 <HAL_UART_Transmit+0x2c>
 8002f80:	88fb      	ldrh	r3, [r7, #6]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e075      	b.n	8003076 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d101      	bne.n	8002f98 <HAL_UART_Transmit+0x3e>
 8002f94:	2302      	movs	r3, #2
 8002f96:	e06e      	b.n	8003076 <HAL_UART_Transmit+0x11c>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2221      	movs	r2, #33	; 0x21
 8002faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fae:	f7fe fb8b 	bl	80016c8 <HAL_GetTick>
 8002fb2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	88fa      	ldrh	r2, [r7, #6]
 8002fb8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	88fa      	ldrh	r2, [r7, #6]
 8002fbe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fc8:	d108      	bne.n	8002fdc <HAL_UART_Transmit+0x82>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d104      	bne.n	8002fdc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	61bb      	str	r3, [r7, #24]
 8002fda:	e003      	b.n	8002fe4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002fec:	e02a      	b.n	8003044 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	9300      	str	r3, [sp, #0]
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	2180      	movs	r1, #128	; 0x80
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 f840 	bl	800307e <UART_WaitOnFlagUntilTimeout>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e036      	b.n	8003076 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10b      	bne.n	8003026 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	881b      	ldrh	r3, [r3, #0]
 8003012:	461a      	mov	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800301c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	3302      	adds	r3, #2
 8003022:	61bb      	str	r3, [r7, #24]
 8003024:	e007      	b.n	8003036 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	781a      	ldrb	r2, [r3, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	3301      	adds	r3, #1
 8003034:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800303a:	b29b      	uxth	r3, r3
 800303c:	3b01      	subs	r3, #1
 800303e:	b29a      	uxth	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003048:	b29b      	uxth	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1cf      	bne.n	8002fee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2200      	movs	r2, #0
 8003056:	2140      	movs	r1, #64	; 0x40
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 f810 	bl	800307e <UART_WaitOnFlagUntilTimeout>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e006      	b.n	8003076 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2220      	movs	r2, #32
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003070:	2300      	movs	r3, #0
 8003072:	e000      	b.n	8003076 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003074:	2302      	movs	r3, #2
  }
}
 8003076:	4618      	mov	r0, r3
 8003078:	3720      	adds	r7, #32
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	b090      	sub	sp, #64	; 0x40
 8003082:	af00      	add	r7, sp, #0
 8003084:	60f8      	str	r0, [r7, #12]
 8003086:	60b9      	str	r1, [r7, #8]
 8003088:	603b      	str	r3, [r7, #0]
 800308a:	4613      	mov	r3, r2
 800308c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800308e:	e050      	b.n	8003132 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003090:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003096:	d04c      	beq.n	8003132 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003098:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800309a:	2b00      	cmp	r3, #0
 800309c:	d007      	beq.n	80030ae <UART_WaitOnFlagUntilTimeout+0x30>
 800309e:	f7fe fb13 	bl	80016c8 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d241      	bcs.n	8003132 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	330c      	adds	r3, #12
 80030b4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b8:	e853 3f00 	ldrex	r3, [r3]
 80030bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80030c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	330c      	adds	r3, #12
 80030cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030ce:	637a      	str	r2, [r7, #52]	; 0x34
 80030d0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030d6:	e841 2300 	strex	r3, r2, [r1]
 80030da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80030dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1e5      	bne.n	80030ae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	3314      	adds	r3, #20
 80030e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	e853 3f00 	ldrex	r3, [r3]
 80030f0:	613b      	str	r3, [r7, #16]
   return(result);
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	f023 0301 	bic.w	r3, r3, #1
 80030f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	3314      	adds	r3, #20
 8003100:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003102:	623a      	str	r2, [r7, #32]
 8003104:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003106:	69f9      	ldr	r1, [r7, #28]
 8003108:	6a3a      	ldr	r2, [r7, #32]
 800310a:	e841 2300 	strex	r3, r2, [r1]
 800310e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1e5      	bne.n	80030e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2220      	movs	r2, #32
 800311a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2220      	movs	r2, #32
 8003122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e00f      	b.n	8003152 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	4013      	ands	r3, r2
 800313c:	68ba      	ldr	r2, [r7, #8]
 800313e:	429a      	cmp	r2, r3
 8003140:	bf0c      	ite	eq
 8003142:	2301      	moveq	r3, #1
 8003144:	2300      	movne	r3, #0
 8003146:	b2db      	uxtb	r3, r3
 8003148:	461a      	mov	r2, r3
 800314a:	79fb      	ldrb	r3, [r7, #7]
 800314c:	429a      	cmp	r2, r3
 800314e:	d09f      	beq.n	8003090 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3740      	adds	r7, #64	; 0x40
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
	...

0800315c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800315c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003160:	b09f      	sub	sp, #124	; 0x7c
 8003162:	af00      	add	r7, sp, #0
 8003164:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003172:	68d9      	ldr	r1, [r3, #12]
 8003174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	ea40 0301 	orr.w	r3, r0, r1
 800317c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800317e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003180:	689a      	ldr	r2, [r3, #8]
 8003182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003184:	691b      	ldr	r3, [r3, #16]
 8003186:	431a      	orrs	r2, r3
 8003188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800318a:	695b      	ldr	r3, [r3, #20]
 800318c:	431a      	orrs	r2, r3
 800318e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	4313      	orrs	r3, r2
 8003194:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80031a0:	f021 010c 	bic.w	r1, r1, #12
 80031a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031aa:	430b      	orrs	r3, r1
 80031ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	695b      	ldr	r3, [r3, #20]
 80031b4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80031b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ba:	6999      	ldr	r1, [r3, #24]
 80031bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	ea40 0301 	orr.w	r3, r0, r1
 80031c4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	4bc5      	ldr	r3, [pc, #788]	; (80034e0 <UART_SetConfig+0x384>)
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d004      	beq.n	80031da <UART_SetConfig+0x7e>
 80031d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	4bc3      	ldr	r3, [pc, #780]	; (80034e4 <UART_SetConfig+0x388>)
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d103      	bne.n	80031e2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031da:	f7ff fb4f 	bl	800287c <HAL_RCC_GetPCLK2Freq>
 80031de:	6778      	str	r0, [r7, #116]	; 0x74
 80031e0:	e002      	b.n	80031e8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031e2:	f7ff fb37 	bl	8002854 <HAL_RCC_GetPCLK1Freq>
 80031e6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031f0:	f040 80b6 	bne.w	8003360 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031f6:	461c      	mov	r4, r3
 80031f8:	f04f 0500 	mov.w	r5, #0
 80031fc:	4622      	mov	r2, r4
 80031fe:	462b      	mov	r3, r5
 8003200:	1891      	adds	r1, r2, r2
 8003202:	6439      	str	r1, [r7, #64]	; 0x40
 8003204:	415b      	adcs	r3, r3
 8003206:	647b      	str	r3, [r7, #68]	; 0x44
 8003208:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800320c:	1912      	adds	r2, r2, r4
 800320e:	eb45 0303 	adc.w	r3, r5, r3
 8003212:	f04f 0000 	mov.w	r0, #0
 8003216:	f04f 0100 	mov.w	r1, #0
 800321a:	00d9      	lsls	r1, r3, #3
 800321c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003220:	00d0      	lsls	r0, r2, #3
 8003222:	4602      	mov	r2, r0
 8003224:	460b      	mov	r3, r1
 8003226:	1911      	adds	r1, r2, r4
 8003228:	6639      	str	r1, [r7, #96]	; 0x60
 800322a:	416b      	adcs	r3, r5
 800322c:	667b      	str	r3, [r7, #100]	; 0x64
 800322e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	461a      	mov	r2, r3
 8003234:	f04f 0300 	mov.w	r3, #0
 8003238:	1891      	adds	r1, r2, r2
 800323a:	63b9      	str	r1, [r7, #56]	; 0x38
 800323c:	415b      	adcs	r3, r3
 800323e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003240:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003244:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003248:	f7fd f822 	bl	8000290 <__aeabi_uldivmod>
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	4ba5      	ldr	r3, [pc, #660]	; (80034e8 <UART_SetConfig+0x38c>)
 8003252:	fba3 2302 	umull	r2, r3, r3, r2
 8003256:	095b      	lsrs	r3, r3, #5
 8003258:	011e      	lsls	r6, r3, #4
 800325a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800325c:	461c      	mov	r4, r3
 800325e:	f04f 0500 	mov.w	r5, #0
 8003262:	4622      	mov	r2, r4
 8003264:	462b      	mov	r3, r5
 8003266:	1891      	adds	r1, r2, r2
 8003268:	6339      	str	r1, [r7, #48]	; 0x30
 800326a:	415b      	adcs	r3, r3
 800326c:	637b      	str	r3, [r7, #52]	; 0x34
 800326e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003272:	1912      	adds	r2, r2, r4
 8003274:	eb45 0303 	adc.w	r3, r5, r3
 8003278:	f04f 0000 	mov.w	r0, #0
 800327c:	f04f 0100 	mov.w	r1, #0
 8003280:	00d9      	lsls	r1, r3, #3
 8003282:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003286:	00d0      	lsls	r0, r2, #3
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	1911      	adds	r1, r2, r4
 800328e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003290:	416b      	adcs	r3, r5
 8003292:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003294:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	461a      	mov	r2, r3
 800329a:	f04f 0300 	mov.w	r3, #0
 800329e:	1891      	adds	r1, r2, r2
 80032a0:	62b9      	str	r1, [r7, #40]	; 0x28
 80032a2:	415b      	adcs	r3, r3
 80032a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80032aa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80032ae:	f7fc ffef 	bl	8000290 <__aeabi_uldivmod>
 80032b2:	4602      	mov	r2, r0
 80032b4:	460b      	mov	r3, r1
 80032b6:	4b8c      	ldr	r3, [pc, #560]	; (80034e8 <UART_SetConfig+0x38c>)
 80032b8:	fba3 1302 	umull	r1, r3, r3, r2
 80032bc:	095b      	lsrs	r3, r3, #5
 80032be:	2164      	movs	r1, #100	; 0x64
 80032c0:	fb01 f303 	mul.w	r3, r1, r3
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	3332      	adds	r3, #50	; 0x32
 80032ca:	4a87      	ldr	r2, [pc, #540]	; (80034e8 <UART_SetConfig+0x38c>)
 80032cc:	fba2 2303 	umull	r2, r3, r2, r3
 80032d0:	095b      	lsrs	r3, r3, #5
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80032d8:	441e      	add	r6, r3
 80032da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032dc:	4618      	mov	r0, r3
 80032de:	f04f 0100 	mov.w	r1, #0
 80032e2:	4602      	mov	r2, r0
 80032e4:	460b      	mov	r3, r1
 80032e6:	1894      	adds	r4, r2, r2
 80032e8:	623c      	str	r4, [r7, #32]
 80032ea:	415b      	adcs	r3, r3
 80032ec:	627b      	str	r3, [r7, #36]	; 0x24
 80032ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032f2:	1812      	adds	r2, r2, r0
 80032f4:	eb41 0303 	adc.w	r3, r1, r3
 80032f8:	f04f 0400 	mov.w	r4, #0
 80032fc:	f04f 0500 	mov.w	r5, #0
 8003300:	00dd      	lsls	r5, r3, #3
 8003302:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003306:	00d4      	lsls	r4, r2, #3
 8003308:	4622      	mov	r2, r4
 800330a:	462b      	mov	r3, r5
 800330c:	1814      	adds	r4, r2, r0
 800330e:	653c      	str	r4, [r7, #80]	; 0x50
 8003310:	414b      	adcs	r3, r1
 8003312:	657b      	str	r3, [r7, #84]	; 0x54
 8003314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	461a      	mov	r2, r3
 800331a:	f04f 0300 	mov.w	r3, #0
 800331e:	1891      	adds	r1, r2, r2
 8003320:	61b9      	str	r1, [r7, #24]
 8003322:	415b      	adcs	r3, r3
 8003324:	61fb      	str	r3, [r7, #28]
 8003326:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800332a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800332e:	f7fc ffaf 	bl	8000290 <__aeabi_uldivmod>
 8003332:	4602      	mov	r2, r0
 8003334:	460b      	mov	r3, r1
 8003336:	4b6c      	ldr	r3, [pc, #432]	; (80034e8 <UART_SetConfig+0x38c>)
 8003338:	fba3 1302 	umull	r1, r3, r3, r2
 800333c:	095b      	lsrs	r3, r3, #5
 800333e:	2164      	movs	r1, #100	; 0x64
 8003340:	fb01 f303 	mul.w	r3, r1, r3
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	3332      	adds	r3, #50	; 0x32
 800334a:	4a67      	ldr	r2, [pc, #412]	; (80034e8 <UART_SetConfig+0x38c>)
 800334c:	fba2 2303 	umull	r2, r3, r2, r3
 8003350:	095b      	lsrs	r3, r3, #5
 8003352:	f003 0207 	and.w	r2, r3, #7
 8003356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4432      	add	r2, r6
 800335c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800335e:	e0b9      	b.n	80034d4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003360:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003362:	461c      	mov	r4, r3
 8003364:	f04f 0500 	mov.w	r5, #0
 8003368:	4622      	mov	r2, r4
 800336a:	462b      	mov	r3, r5
 800336c:	1891      	adds	r1, r2, r2
 800336e:	6139      	str	r1, [r7, #16]
 8003370:	415b      	adcs	r3, r3
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003378:	1912      	adds	r2, r2, r4
 800337a:	eb45 0303 	adc.w	r3, r5, r3
 800337e:	f04f 0000 	mov.w	r0, #0
 8003382:	f04f 0100 	mov.w	r1, #0
 8003386:	00d9      	lsls	r1, r3, #3
 8003388:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800338c:	00d0      	lsls	r0, r2, #3
 800338e:	4602      	mov	r2, r0
 8003390:	460b      	mov	r3, r1
 8003392:	eb12 0804 	adds.w	r8, r2, r4
 8003396:	eb43 0905 	adc.w	r9, r3, r5
 800339a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	4618      	mov	r0, r3
 80033a0:	f04f 0100 	mov.w	r1, #0
 80033a4:	f04f 0200 	mov.w	r2, #0
 80033a8:	f04f 0300 	mov.w	r3, #0
 80033ac:	008b      	lsls	r3, r1, #2
 80033ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80033b2:	0082      	lsls	r2, r0, #2
 80033b4:	4640      	mov	r0, r8
 80033b6:	4649      	mov	r1, r9
 80033b8:	f7fc ff6a 	bl	8000290 <__aeabi_uldivmod>
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	4b49      	ldr	r3, [pc, #292]	; (80034e8 <UART_SetConfig+0x38c>)
 80033c2:	fba3 2302 	umull	r2, r3, r3, r2
 80033c6:	095b      	lsrs	r3, r3, #5
 80033c8:	011e      	lsls	r6, r3, #4
 80033ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033cc:	4618      	mov	r0, r3
 80033ce:	f04f 0100 	mov.w	r1, #0
 80033d2:	4602      	mov	r2, r0
 80033d4:	460b      	mov	r3, r1
 80033d6:	1894      	adds	r4, r2, r2
 80033d8:	60bc      	str	r4, [r7, #8]
 80033da:	415b      	adcs	r3, r3
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033e2:	1812      	adds	r2, r2, r0
 80033e4:	eb41 0303 	adc.w	r3, r1, r3
 80033e8:	f04f 0400 	mov.w	r4, #0
 80033ec:	f04f 0500 	mov.w	r5, #0
 80033f0:	00dd      	lsls	r5, r3, #3
 80033f2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80033f6:	00d4      	lsls	r4, r2, #3
 80033f8:	4622      	mov	r2, r4
 80033fa:	462b      	mov	r3, r5
 80033fc:	1814      	adds	r4, r2, r0
 80033fe:	64bc      	str	r4, [r7, #72]	; 0x48
 8003400:	414b      	adcs	r3, r1
 8003402:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	4618      	mov	r0, r3
 800340a:	f04f 0100 	mov.w	r1, #0
 800340e:	f04f 0200 	mov.w	r2, #0
 8003412:	f04f 0300 	mov.w	r3, #0
 8003416:	008b      	lsls	r3, r1, #2
 8003418:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800341c:	0082      	lsls	r2, r0, #2
 800341e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003422:	f7fc ff35 	bl	8000290 <__aeabi_uldivmod>
 8003426:	4602      	mov	r2, r0
 8003428:	460b      	mov	r3, r1
 800342a:	4b2f      	ldr	r3, [pc, #188]	; (80034e8 <UART_SetConfig+0x38c>)
 800342c:	fba3 1302 	umull	r1, r3, r3, r2
 8003430:	095b      	lsrs	r3, r3, #5
 8003432:	2164      	movs	r1, #100	; 0x64
 8003434:	fb01 f303 	mul.w	r3, r1, r3
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	3332      	adds	r3, #50	; 0x32
 800343e:	4a2a      	ldr	r2, [pc, #168]	; (80034e8 <UART_SetConfig+0x38c>)
 8003440:	fba2 2303 	umull	r2, r3, r2, r3
 8003444:	095b      	lsrs	r3, r3, #5
 8003446:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800344a:	441e      	add	r6, r3
 800344c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800344e:	4618      	mov	r0, r3
 8003450:	f04f 0100 	mov.w	r1, #0
 8003454:	4602      	mov	r2, r0
 8003456:	460b      	mov	r3, r1
 8003458:	1894      	adds	r4, r2, r2
 800345a:	603c      	str	r4, [r7, #0]
 800345c:	415b      	adcs	r3, r3
 800345e:	607b      	str	r3, [r7, #4]
 8003460:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003464:	1812      	adds	r2, r2, r0
 8003466:	eb41 0303 	adc.w	r3, r1, r3
 800346a:	f04f 0400 	mov.w	r4, #0
 800346e:	f04f 0500 	mov.w	r5, #0
 8003472:	00dd      	lsls	r5, r3, #3
 8003474:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003478:	00d4      	lsls	r4, r2, #3
 800347a:	4622      	mov	r2, r4
 800347c:	462b      	mov	r3, r5
 800347e:	eb12 0a00 	adds.w	sl, r2, r0
 8003482:	eb43 0b01 	adc.w	fp, r3, r1
 8003486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	4618      	mov	r0, r3
 800348c:	f04f 0100 	mov.w	r1, #0
 8003490:	f04f 0200 	mov.w	r2, #0
 8003494:	f04f 0300 	mov.w	r3, #0
 8003498:	008b      	lsls	r3, r1, #2
 800349a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800349e:	0082      	lsls	r2, r0, #2
 80034a0:	4650      	mov	r0, sl
 80034a2:	4659      	mov	r1, fp
 80034a4:	f7fc fef4 	bl	8000290 <__aeabi_uldivmod>
 80034a8:	4602      	mov	r2, r0
 80034aa:	460b      	mov	r3, r1
 80034ac:	4b0e      	ldr	r3, [pc, #56]	; (80034e8 <UART_SetConfig+0x38c>)
 80034ae:	fba3 1302 	umull	r1, r3, r3, r2
 80034b2:	095b      	lsrs	r3, r3, #5
 80034b4:	2164      	movs	r1, #100	; 0x64
 80034b6:	fb01 f303 	mul.w	r3, r1, r3
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	011b      	lsls	r3, r3, #4
 80034be:	3332      	adds	r3, #50	; 0x32
 80034c0:	4a09      	ldr	r2, [pc, #36]	; (80034e8 <UART_SetConfig+0x38c>)
 80034c2:	fba2 2303 	umull	r2, r3, r2, r3
 80034c6:	095b      	lsrs	r3, r3, #5
 80034c8:	f003 020f 	and.w	r2, r3, #15
 80034cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4432      	add	r2, r6
 80034d2:	609a      	str	r2, [r3, #8]
}
 80034d4:	bf00      	nop
 80034d6:	377c      	adds	r7, #124	; 0x7c
 80034d8:	46bd      	mov	sp, r7
 80034da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034de:	bf00      	nop
 80034e0:	40011000 	.word	0x40011000
 80034e4:	40011400 	.word	0x40011400
 80034e8:	51eb851f 	.word	0x51eb851f

080034ec <hci_disconnection_complete_event_process>:
 * @param Reason Reason for disconnection. See Error Codes.
 * @retval None
 */

tBleStatus hci_disconnection_complete_event_process(uint8_t *buffer_in)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80034f4:	2300      	movs	r3, #0
 80034f6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_disconnection_complete_event_rp0 *rp0 = (hci_disconnection_complete_event_rp0 *)buffer_in;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	60bb      	str	r3, [r7, #8]
  hci_disconnection_complete_event(rp0->Status,
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	7818      	ldrb	r0, [r3, #0]
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003506:	b299      	uxth	r1, r3
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	78db      	ldrb	r3, [r3, #3]
 800350c:	461a      	mov	r2, r3
 800350e:	f7fd fd5b 	bl	8000fc8 <hci_disconnection_complete_event>
                                   rp0->Connection_Handle,
                                   rp0->Reason);

  return status;
 8003512:	7bfb      	ldrb	r3, [r7, #15]
}
 8003514:	4618      	mov	r0, r3
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <hci_encryption_change_event_process>:
 *        - 0x01: Link Level Encryption is ON with AES-CCM
 * @retval None
 */

tBleStatus hci_encryption_change_event_process(uint8_t *buffer_in)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003524:	2300      	movs	r3, #0
 8003526:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_change_event_rp0 *rp0 = (hci_encryption_change_event_rp0 *)buffer_in;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	60bb      	str	r3, [r7, #8]
  hci_encryption_change_event(rp0->Status,
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	7818      	ldrb	r0, [r3, #0]
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003536:	b299      	uxth	r1, r3
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	78db      	ldrb	r3, [r3, #3]
 800353c:	461a      	mov	r2, r3
 800353e:	f000 ffd8 	bl	80044f2 <hci_encryption_change_event>
                              rp0->Connection_Handle,
                              rp0->Encryption_Enabled);

  return status;
 8003542:	7bfb      	ldrb	r3, [r7, #15]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <hci_read_remote_version_information_complete_event_process>:
 * @param Subversion Subversion of the LMP in the remote Controller
 * @retval None
 */

tBleStatus hci_read_remote_version_information_complete_event_process(uint8_t *buffer_in)
{
 800354c:	b590      	push	{r4, r7, lr}
 800354e:	b087      	sub	sp, #28
 8003550:	af02      	add	r7, sp, #8
 8003552:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003554:	2300      	movs	r3, #0
 8003556:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_read_remote_version_information_complete_event_rp0 *rp0 = (hci_read_remote_version_information_complete_event_rp0 *)buffer_in;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	60bb      	str	r3, [r7, #8]
  hci_read_remote_version_information_complete_event(rp0->Status,
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	7818      	ldrb	r0, [r3, #0]
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003566:	b299      	uxth	r1, r3
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	78da      	ldrb	r2, [r3, #3]
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	889b      	ldrh	r3, [r3, #4]
 8003570:	b29c      	uxth	r4, r3
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	88db      	ldrh	r3, [r3, #6]
 8003576:	b29b      	uxth	r3, r3
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	4623      	mov	r3, r4
 800357c:	f000 ffc8 	bl	8004510 <hci_read_remote_version_information_complete_event>
                                                     rp0->Connection_Handle,
                                                     rp0->Version,
                                                     rp0->Manufacturer_Name,
                                                     rp0->Subversion);

  return status;
 8003580:	7bfb      	ldrb	r3, [r7, #15]
}
 8003582:	4618      	mov	r0, r3
 8003584:	3714      	adds	r7, #20
 8003586:	46bd      	mov	sp, r7
 8003588:	bd90      	pop	{r4, r7, pc}

0800358a <hci_hardware_error_event_process>:
 *        - 0x03: Internal queue overflow error
 * @retval None
 */

tBleStatus hci_hardware_error_event_process(uint8_t *buffer_in)
{
 800358a:	b580      	push	{r7, lr}
 800358c:	b084      	sub	sp, #16
 800358e:	af00      	add	r7, sp, #0
 8003590:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003592:	2300      	movs	r3, #0
 8003594:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_hardware_error_event_rp0 *rp0 = (hci_hardware_error_event_rp0 *)buffer_in;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	60bb      	str	r3, [r7, #8]
  hci_hardware_error_event(rp0->Hardware_Code);
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 ffca 	bl	8004538 <hci_hardware_error_event>

  return status;
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <hci_number_of_completed_packets_event_process>:
 * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
 * @retval None
 */

tBleStatus hci_number_of_completed_packets_event_process(uint8_t *buffer_in)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b0a6      	sub	sp, #152	; 0x98
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80035b6:	2300      	movs	r3, #0
 80035b8:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  hci_number_of_completed_packets_event_rp0 *rp0 = (hci_number_of_completed_packets_event_rp0 *)buffer_in;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 1;
 80035c2:	2301      	movs	r3, #1
 80035c4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Packets_Pair_Entry_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 80035c8:	2300      	movs	r3, #0
 80035ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80035ce:	e030      	b.n	8003632 <hci_number_of_completed_packets_event_process+0x84>
    Handle_Packets_Pair_Entry[i].Connection_Handle = rp0->Handle_Packets_Pair_Entry[i].Connection_Handle;
 80035d0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80035d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4413      	add	r3, r2
 80035dc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80035ec:	440b      	add	r3, r1
 80035ee:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 80035f2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80035f6:	3302      	adds	r3, #2
 80035f8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets = rp0->Handle_Packets_Pair_Entry[i].HC_Num_Of_Completed_Packets;
 80035fc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003600:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4413      	add	r3, r2
 8003608:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800360c:	b29a      	uxth	r2, r3
 800360e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8003618:	440b      	add	r3, r1
 800361a:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 800361e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003622:	3302      	adds	r3, #2
 8003624:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8003628:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800362c:	3301      	adds	r3, #1
 800362e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003632:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	461a      	mov	r2, r3
 800363a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800363e:	4293      	cmp	r3, r2
 8003640:	dbc6      	blt.n	80035d0 <hci_number_of_completed_packets_event_process+0x22>
  }
  hci_number_of_completed_packets_event(rp0->Number_of_Handles,
 8003642:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	f107 0208 	add.w	r2, r7, #8
 800364c:	4611      	mov	r1, r2
 800364e:	4618      	mov	r0, r3
 8003650:	f000 ff7d 	bl	800454e <hci_number_of_completed_packets_event>
                                        Handle_Packets_Pair_Entry);

  return status;
 8003654:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8003658:	4618      	mov	r0, r3
 800365a:	3798      	adds	r7, #152	; 0x98
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <hci_data_buffer_overflow_event_process>:
 *        - 0x01: ACL Buffer Overflow
 * @retval None
 */

tBleStatus hci_data_buffer_overflow_event_process(uint8_t *buffer_in)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003668:	2300      	movs	r3, #0
 800366a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_data_buffer_overflow_event_rp0 *rp0 = (hci_data_buffer_overflow_event_rp0 *)buffer_in;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	60bb      	str	r3, [r7, #8]
  hci_data_buffer_overflow_event(rp0->Link_Type);
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f000 ff76 	bl	8004566 <hci_data_buffer_overflow_event>

  return status;
 800367a:	7bfb      	ldrb	r3, [r7, #15]
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <hci_encryption_key_refresh_complete_event_process>:
 *        - 0x0000 ... 0x0EFF
 * @retval None
 */

tBleStatus hci_encryption_key_refresh_complete_event_process(uint8_t *buffer_in)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800368c:	2300      	movs	r3, #0
 800368e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_encryption_key_refresh_complete_event_rp0 *rp0 = (hci_encryption_key_refresh_complete_event_rp0 *)buffer_in;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	60bb      	str	r3, [r7, #8]
  hci_encryption_key_refresh_complete_event(rp0->Status,
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	781a      	ldrb	r2, [r3, #0]
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800369e:	b29b      	uxth	r3, r3
 80036a0:	4619      	mov	r1, r3
 80036a2:	4610      	mov	r0, r2
 80036a4:	f000 ff6a 	bl	800457c <hci_encryption_key_refresh_complete_event>
                                            rp0->Connection_Handle);

  return status;
 80036a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}

080036b2 <aci_blue_initialized_event_process>:
 *        - 0x09: System reset due to ECC error
 * @retval None
 */

tBleStatus aci_blue_initialized_event_process(uint8_t *buffer_in)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b084      	sub	sp, #16
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80036ba:	2300      	movs	r3, #0
 80036bc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_initialized_event_rp0 *rp0 = (aci_blue_initialized_event_rp0 *)buffer_in;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	60bb      	str	r3, [r7, #8]
  aci_blue_initialized_event(rp0->Reason_Code);
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f001 f9dd 	bl	8004a86 <aci_blue_initialized_event>

  return status;
 80036cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <aci_blue_events_lost_event_process>:
 *        - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
 * @retval None
 */

tBleStatus aci_blue_events_lost_event_process(uint8_t *buffer_in)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b084      	sub	sp, #16
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80036de:	2300      	movs	r3, #0
 80036e0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_events_lost_event_rp0 *rp0 = (aci_blue_events_lost_event_rp0 *)buffer_in;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	60bb      	str	r3, [r7, #8]
  aci_blue_events_lost_event(rp0->Lost_Events);
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f001 f9d7 	bl	8004a9c <aci_blue_events_lost_event>

  return status;
 80036ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <aci_blue_crash_info_event_process>:
 * @param Debug_Data Debug data
 * @retval None
 */

tBleStatus aci_blue_crash_info_event_process(uint8_t *buffer_in)
{
 80036f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80036fc:	b08d      	sub	sp, #52	; 0x34
 80036fe:	af08      	add	r7, sp, #32
 8003700:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003702:	2300      	movs	r3, #0
 8003704:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_blue_crash_info_event_rp0 *rp0 = (aci_blue_crash_info_event_rp0 *)buffer_in;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	60bb      	str	r3, [r7, #8]
  aci_blue_crash_info_event(rp0->Crash_Type,
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	f893 c000 	ldrb.w	ip, [r3]
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	f8d3 e001 	ldr.w	lr, [r3, #1]
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	f8d3 8005 	ldr.w	r8, [r3, #5]
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f8d3 9009 	ldr.w	r9, [r3, #9]
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	f8d3 300d 	ldr.w	r3, [r3, #13]
 8003728:	603b      	str	r3, [r7, #0]
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	f8d2 2011 	ldr.w	r2, [r2, #17]
 8003730:	68b9      	ldr	r1, [r7, #8]
 8003732:	f8d1 1015 	ldr.w	r1, [r1, #21]
 8003736:	68b8      	ldr	r0, [r7, #8]
 8003738:	f8d0 0019 	ldr.w	r0, [r0, #25]
 800373c:	68bc      	ldr	r4, [r7, #8]
 800373e:	f8d4 401d 	ldr.w	r4, [r4, #29]
 8003742:	68bd      	ldr	r5, [r7, #8]
 8003744:	f8d5 5021 	ldr.w	r5, [r5, #33]	; 0x21
 8003748:	68be      	ldr	r6, [r7, #8]
 800374a:	f896 6025 	ldrb.w	r6, [r6, #37]	; 0x25
                            rp0->R12,
                            rp0->LR,
                            rp0->PC,
                            rp0->xPSR,
                            rp0->Debug_Data_Length,
                            rp0->Debug_Data);
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	3326      	adds	r3, #38	; 0x26
  aci_blue_crash_info_event(rp0->Crash_Type,
 8003752:	9307      	str	r3, [sp, #28]
 8003754:	9606      	str	r6, [sp, #24]
 8003756:	9505      	str	r5, [sp, #20]
 8003758:	9404      	str	r4, [sp, #16]
 800375a:	9003      	str	r0, [sp, #12]
 800375c:	9102      	str	r1, [sp, #8]
 800375e:	9201      	str	r2, [sp, #4]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	464b      	mov	r3, r9
 8003766:	4642      	mov	r2, r8
 8003768:	4671      	mov	r1, lr
 800376a:	4660      	mov	r0, ip
 800376c:	f001 f9a0 	bl	8004ab0 <aci_blue_crash_info_event>

  return status;
 8003770:	7bfb      	ldrb	r3, [r7, #15]
}
 8003772:	4618      	mov	r0, r3
 8003774:	3714      	adds	r7, #20
 8003776:	46bd      	mov	sp, r7
 8003778:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800377c <aci_hal_end_of_radio_activity_event_process>:
 *        time units.
 * @retval None
 */

tBleStatus aci_hal_end_of_radio_activity_event_process(uint8_t *buffer_in)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003784:	2300      	movs	r3, #0
 8003786:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_end_of_radio_activity_event_rp0 *rp0 = (aci_hal_end_of_radio_activity_event_rp0 *)buffer_in;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	60bb      	str	r3, [r7, #8]
  aci_hal_end_of_radio_activity_event(rp0->Last_State,
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	7818      	ldrb	r0, [r3, #0]
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	7859      	ldrb	r1, [r3, #1]
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800379a:	461a      	mov	r2, r3
 800379c:	f001 f996 	bl	8004acc <aci_hal_end_of_radio_activity_event>
                                      rp0->Next_State,
                                      rp0->Next_State_SysTime);

  return status;
 80037a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <aci_hal_scan_req_report_event_process>:
 *        peer device
 * @retval None
 */

tBleStatus aci_hal_scan_req_report_event_process(uint8_t *buffer_in)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b084      	sub	sp, #16
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80037b2:	2300      	movs	r3, #0
 80037b4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_scan_req_report_event_rp0 *rp0 = (aci_hal_scan_req_report_event_rp0 *)buffer_in;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	60bb      	str	r3, [r7, #8]
  aci_hal_scan_req_report_event(rp0->RSSI,
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	f993 0000 	ldrsb.w	r0, [r3]
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	7859      	ldrb	r1, [r3, #1]
                                rp0->Peer_Address_Type,
                                rp0->Peer_Address);
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	3302      	adds	r3, #2
  aci_hal_scan_req_report_event(rp0->RSSI,
 80037c8:	461a      	mov	r2, r3
 80037ca:	f001 f98d 	bl	8004ae8 <aci_hal_scan_req_report_event>

  return status;
 80037ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <aci_hal_fw_error_event_process>:
 *        the connection handle where the abnormal condition has occurred.
 * @retval None
 */

tBleStatus aci_hal_fw_error_event_process(uint8_t *buffer_in)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80037e0:	2300      	movs	r3, #0
 80037e2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_hal_fw_error_event_rp0 *rp0 = (aci_hal_fw_error_event_rp0 *)buffer_in;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	60bb      	str	r3, [r7, #8]
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	7818      	ldrb	r0, [r3, #0]
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	7859      	ldrb	r1, [r3, #1]
                         rp0->Data_Length,
                         rp0->Data);
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	3302      	adds	r3, #2
  aci_hal_fw_error_event(rp0->FW_Error_Type,
 80037f4:	461a      	mov	r2, r3
 80037f6:	f001 f985 	bl	8004b04 <aci_hal_fw_error_event>

  return status;
 80037fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <aci_gap_limited_discoverable_event_process>:
 *        discoverable mode ends due to timeout. The timeout is 180 seconds.
 * @retval None
 */

tBleStatus aci_gap_limited_discoverable_event_process(uint8_t *buffer_in)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800380c:	2300      	movs	r3, #0
 800380e:	73fb      	strb	r3, [r7, #15]
  aci_gap_limited_discoverable_event();
 8003810:	f000 ff4a 	bl	80046a8 <aci_gap_limited_discoverable_event>

  return status;
 8003814:	7bfb      	ldrb	r3, [r7, #15]
}
 8003816:	4618      	mov	r0, r3
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <aci_gap_pairing_complete_event_process>:
 *        - 0x0C: SMP_SC_NUMCOMPARISON_FAILED
 * @retval None
 */

tBleStatus aci_gap_pairing_complete_event_process(uint8_t *buffer_in)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b084      	sub	sp, #16
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003826:	2300      	movs	r3, #0
 8003828:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pairing_complete_event_rp0 *rp0 = (aci_gap_pairing_complete_event_rp0 *)buffer_in;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	60bb      	str	r3, [r7, #8]
  aci_gap_pairing_complete_event(rp0->Connection_Handle,
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	881b      	ldrh	r3, [r3, #0]
 8003832:	b298      	uxth	r0, r3
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	7899      	ldrb	r1, [r3, #2]
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	78db      	ldrb	r3, [r3, #3]
 800383c:	461a      	mov	r2, r3
 800383e:	f000 ff3a 	bl	80046b6 <aci_gap_pairing_complete_event>
                                 rp0->Status,
                                 rp0->Reason);

  return status;
 8003842:	7bfb      	ldrb	r3, [r7, #15]
}
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <aci_gap_pass_key_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_pass_key_req_event_process(uint8_t *buffer_in)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003854:	2300      	movs	r3, #0
 8003856:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_pass_key_req_event_rp0 *rp0 = (aci_gap_pass_key_req_event_rp0 *)buffer_in;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	60bb      	str	r3, [r7, #8]
  aci_gap_pass_key_req_event(rp0->Connection_Handle);
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	881b      	ldrh	r3, [r3, #0]
 8003860:	b29b      	uxth	r3, r3
 8003862:	4618      	mov	r0, r3
 8003864:	f000 ff36 	bl	80046d4 <aci_gap_pass_key_req_event>

  return status;
 8003868:	7bfb      	ldrb	r3, [r7, #15]
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <aci_gap_authorization_req_event_process>:
 *        requested.
 * @retval None
 */

tBleStatus aci_gap_authorization_req_event_process(uint8_t *buffer_in)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b084      	sub	sp, #16
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800387a:	2300      	movs	r3, #0
 800387c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_authorization_req_event_rp0 *rp0 = (aci_gap_authorization_req_event_rp0 *)buffer_in;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	60bb      	str	r3, [r7, #8]
  aci_gap_authorization_req_event(rp0->Connection_Handle);
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	881b      	ldrh	r3, [r3, #0]
 8003886:	b29b      	uxth	r3, r3
 8003888:	4618      	mov	r0, r3
 800388a:	f000 ff2e 	bl	80046ea <aci_gap_authorization_req_event>

  return status;
 800388e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003890:	4618      	mov	r0, r3
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <aci_gap_slave_security_initiated_event_process>:
 *        successfully sent to the master.
 * @retval None
 */

tBleStatus aci_gap_slave_security_initiated_event_process(uint8_t *buffer_in)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80038a0:	2300      	movs	r3, #0
 80038a2:	73fb      	strb	r3, [r7, #15]
  aci_gap_slave_security_initiated_event();
 80038a4:	f000 ff2c 	bl	8004700 <aci_gap_slave_security_initiated_event>

  return status;
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}

080038b2 <aci_gap_bond_lost_event_process>:
 *        force_rebond set to 1.
 * @retval None
 */

tBleStatus aci_gap_bond_lost_event_process(uint8_t *buffer_in)
{
 80038b2:	b580      	push	{r7, lr}
 80038b4:	b084      	sub	sp, #16
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80038ba:	2300      	movs	r3, #0
 80038bc:	73fb      	strb	r3, [r7, #15]
  aci_gap_bond_lost_event();
 80038be:	f000 ff26 	bl	800470e <aci_gap_bond_lost_event>

  return status;
 80038c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3710      	adds	r7, #16
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <aci_gap_proc_complete_event_process>:
 *        of the peer device if the procedure completed successfully.
 * @retval None
 */

tBleStatus aci_gap_proc_complete_event_process(uint8_t *buffer_in)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80038d4:	2300      	movs	r3, #0
 80038d6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_proc_complete_event_rp0 *rp0 = (aci_gap_proc_complete_event_rp0 *)buffer_in;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	60bb      	str	r3, [r7, #8]
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	7818      	ldrb	r0, [r3, #0]
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	7859      	ldrb	r1, [r3, #1]
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	789a      	ldrb	r2, [r3, #2]
                              rp0->Status,
                              rp0->Data_Length,
                              rp0->Data);
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	3303      	adds	r3, #3
  aci_gap_proc_complete_event(rp0->Procedure_Code,
 80038ec:	f000 ff16 	bl	800471c <aci_gap_proc_complete_event>

  return status;
 80038f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <aci_gap_addr_not_resolved_event_process>:
 *        could not be resolved with any of the stored IRK's.
 * @retval None
 */

tBleStatus aci_gap_addr_not_resolved_event_process(uint8_t *buffer_in)
{
 80038fa:	b580      	push	{r7, lr}
 80038fc:	b084      	sub	sp, #16
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003902:	2300      	movs	r3, #0
 8003904:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_addr_not_resolved_event_rp0 *rp0 = (aci_gap_addr_not_resolved_event_rp0 *)buffer_in;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	60bb      	str	r3, [r7, #8]
  aci_gap_addr_not_resolved_event(rp0->Connection_Handle);
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	881b      	ldrh	r3, [r3, #0]
 800390e:	b29b      	uxth	r3, r3
 8003910:	4618      	mov	r0, r3
 8003912:	f000 ff13 	bl	800473c <aci_gap_addr_not_resolved_event>

  return status;
 8003916:	7bfb      	ldrb	r3, [r7, #15]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <aci_gap_numeric_comparison_value_event_process>:
 * @param Numeric_Value
 * @retval None
 */

tBleStatus aci_gap_numeric_comparison_value_event_process(uint8_t *buffer_in)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003928:	2300      	movs	r3, #0
 800392a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_numeric_comparison_value_event_rp0 *rp0 = (aci_gap_numeric_comparison_value_event_rp0 *)buffer_in;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	60bb      	str	r3, [r7, #8]
  aci_gap_numeric_comparison_value_event(rp0->Connection_Handle,
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	881b      	ldrh	r3, [r3, #0]
 8003934:	b29a      	uxth	r2, r3
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800393c:	4619      	mov	r1, r3
 800393e:	4610      	mov	r0, r2
 8003940:	f000 ff07 	bl	8004752 <aci_gap_numeric_comparison_value_event>
                                         rp0->Numeric_Value);

  return status;
 8003944:	7bfb      	ldrb	r3, [r7, #15]
}
 8003946:	4618      	mov	r0, r3
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <aci_gap_keypress_notification_event_process>:
 *        - 0x04: PASSKEY_ENTRY_COMPLETED
 * @retval None
 */

tBleStatus aci_gap_keypress_notification_event_process(uint8_t *buffer_in)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b084      	sub	sp, #16
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003956:	2300      	movs	r3, #0
 8003958:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gap_keypress_notification_event_rp0 *rp0 = (aci_gap_keypress_notification_event_rp0 *)buffer_in;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	60bb      	str	r3, [r7, #8]
  aci_gap_keypress_notification_event(rp0->Connection_Handle,
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	881b      	ldrh	r3, [r3, #0]
 8003962:	b29a      	uxth	r2, r3
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	789b      	ldrb	r3, [r3, #2]
 8003968:	4619      	mov	r1, r3
 800396a:	4610      	mov	r0, r2
 800396c:	f000 fefd 	bl	800476a <aci_gap_keypress_notification_event>
                                      rp0->Notification_Type);

  return status;
 8003970:	7bfb      	ldrb	r3, [r7, #15]
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <aci_l2cap_connection_update_resp_event_process>:
 * @param Result
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_resp_event_process(uint8_t *buffer_in)
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b084      	sub	sp, #16
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003982:	2300      	movs	r3, #0
 8003984:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_resp_event_rp0 *rp0 = (aci_l2cap_connection_update_resp_event_rp0 *)buffer_in;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_resp_event(rp0->Connection_Handle,
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	881b      	ldrh	r3, [r3, #0]
 800398e:	b29a      	uxth	r2, r3
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	885b      	ldrh	r3, [r3, #2]
 8003994:	b29b      	uxth	r3, r3
 8003996:	4619      	mov	r1, r3
 8003998:	4610      	mov	r0, r2
 800399a:	f001 f830 	bl	80049fe <aci_l2cap_connection_update_resp_event>
                                         rp0->Result);

  return status;
 800399e:	7bfb      	ldrb	r3, [r7, #15]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <aci_l2cap_proc_timeout_event_process>:
 * @param Data
 * @retval None
 */

tBleStatus aci_l2cap_proc_timeout_event_process(uint8_t *buffer_in)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80039b0:	2300      	movs	r3, #0
 80039b2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_proc_timeout_event_rp0 *rp0 = (aci_l2cap_proc_timeout_event_rp0 *)buffer_in;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	60bb      	str	r3, [r7, #8]
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	881b      	ldrh	r3, [r3, #0]
 80039bc:	b298      	uxth	r0, r3
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	7899      	ldrb	r1, [r3, #2]
                               rp0->Data_Length,
                               rp0->Data);
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	3303      	adds	r3, #3
  aci_l2cap_proc_timeout_event(rp0->Connection_Handle,
 80039c6:	461a      	mov	r2, r3
 80039c8:	f001 f827 	bl	8004a1a <aci_l2cap_proc_timeout_event>

  return status;
 80039cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <aci_l2cap_connection_update_req_event_process>:
 *        - 10 (100 ms)  ... 3200 (32000 ms) 
 * @retval None
 */

tBleStatus aci_l2cap_connection_update_req_event_process(uint8_t *buffer_in)
{
 80039d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039d8:	b089      	sub	sp, #36	; 0x24
 80039da:	af04      	add	r7, sp, #16
 80039dc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80039de:	2300      	movs	r3, #0
 80039e0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_connection_update_req_event_rp0 *rp0 = (aci_l2cap_connection_update_req_event_rp0 *)buffer_in;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	60bb      	str	r3, [r7, #8]
  aci_l2cap_connection_update_req_event(rp0->Connection_Handle,
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	b298      	uxth	r0, r3
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	789c      	ldrb	r4, [r3, #2]
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80039f6:	b29d      	uxth	r5, r3
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80039fe:	b29e      	uxth	r6, r3
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 8003a0e:	b292      	uxth	r2, r2
 8003a10:	68b9      	ldr	r1, [r7, #8]
 8003a12:	f8b1 100b 	ldrh.w	r1, [r1, #11]
 8003a16:	b289      	uxth	r1, r1
 8003a18:	9102      	str	r1, [sp, #8]
 8003a1a:	9201      	str	r2, [sp, #4]
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	4633      	mov	r3, r6
 8003a20:	462a      	mov	r2, r5
 8003a22:	4621      	mov	r1, r4
 8003a24:	f001 f807 	bl	8004a36 <aci_l2cap_connection_update_req_event>
                                        rp0->Interval_Min,
                                        rp0->Interval_Max,
                                        rp0->Slave_Latency,
                                        rp0->Timeout_Multiplier);

  return status;
 8003a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3714      	adds	r7, #20
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a32 <aci_l2cap_command_reject_event_process>:
 * @param Data Data field associated with Reason
 * @retval None
 */

tBleStatus aci_l2cap_command_reject_event_process(uint8_t *buffer_in)
{
 8003a32:	b590      	push	{r4, r7, lr}
 8003a34:	b087      	sub	sp, #28
 8003a36:	af02      	add	r7, sp, #8
 8003a38:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_l2cap_command_reject_event_rp0 *rp0 = (aci_l2cap_command_reject_event_rp0 *)buffer_in;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	60bb      	str	r3, [r7, #8]
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	881b      	ldrh	r3, [r3, #0]
 8003a46:	b298      	uxth	r0, r3
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	7899      	ldrb	r1, [r3, #2]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	795c      	ldrb	r4, [r3, #5]
                                 rp0->Identifier,
                                 rp0->Reason,
                                 rp0->Data_Length,
                                 rp0->Data);
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	3306      	adds	r3, #6
  aci_l2cap_command_reject_event(rp0->Connection_Handle,
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	4623      	mov	r3, r4
 8003a60:	f000 fffd 	bl	8004a5e <aci_l2cap_command_reject_event>

  return status;
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd90      	pop	{r4, r7, pc}

08003a6e <aci_gatt_attribute_modified_event_process>:
 * @param Attr_Data The modified value
 * @retval None
 */

tBleStatus aci_gatt_attribute_modified_event_process(uint8_t *buffer_in)
{
 8003a6e:	b590      	push	{r4, r7, lr}
 8003a70:	b087      	sub	sp, #28
 8003a72:	af02      	add	r7, sp, #8
 8003a74:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003a76:	2300      	movs	r3, #0
 8003a78:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_attribute_modified_event_rp0 *rp0 = (aci_gatt_attribute_modified_event_rp0 *)buffer_in;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	60bb      	str	r3, [r7, #8]
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	881b      	ldrh	r3, [r3, #0]
 8003a82:	b298      	uxth	r0, r3
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	885b      	ldrh	r3, [r3, #2]
 8003a88:	b299      	uxth	r1, r3
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	889b      	ldrh	r3, [r3, #4]
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	88db      	ldrh	r3, [r3, #6]
 8003a94:	b29c      	uxth	r4, r3
                                    rp0->Attr_Handle,
                                    rp0->Offset,
                                    rp0->Attr_Data_Length,
                                    rp0->Attr_Data);
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	3308      	adds	r3, #8
  aci_gatt_attribute_modified_event(rp0->Connection_Handle,
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	4623      	mov	r3, r4
 8003a9e:	f7fd fa3f 	bl	8000f20 <aci_gatt_attribute_modified_event>

  return status;
 8003aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3714      	adds	r7, #20
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd90      	pop	{r4, r7, pc}

08003aac <aci_gatt_proc_timeout_event_process>:
 *        timed out
 * @retval None
 */

tBleStatus aci_gatt_proc_timeout_event_process(uint8_t *buffer_in)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_timeout_event_rp0 *rp0 = (aci_gatt_proc_timeout_event_rp0 *)buffer_in;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_timeout_event(rp0->Connection_Handle);
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	881b      	ldrh	r3, [r3, #0]
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 fe5f 	bl	8004786 <aci_gatt_proc_timeout_event>

  return status;
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <aci_att_exchange_mtu_resp_event_process>:
 * @param Server_RX_MTU ATT_MTU value agreed between server and client
 * @retval None
 */

tBleStatus aci_att_exchange_mtu_resp_event_process(uint8_t *buffer_in)
{
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b084      	sub	sp, #16
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003ada:	2300      	movs	r3, #0
 8003adc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exchange_mtu_resp_event_rp0 *rp0 = (aci_att_exchange_mtu_resp_event_rp0 *)buffer_in;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	60bb      	str	r3, [r7, #8]
  aci_att_exchange_mtu_resp_event(rp0->Connection_Handle,
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	881b      	ldrh	r3, [r3, #0]
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	885b      	ldrh	r3, [r3, #2]
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	4619      	mov	r1, r3
 8003af0:	4610      	mov	r0, r2
 8003af2:	f000 fe53 	bl	800479c <aci_att_exchange_mtu_resp_event>
                                  rp0->Server_RX_MTU);

  return status;
 8003af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3710      	adds	r7, #16
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <aci_att_find_info_resp_event_process>:
 *        pair is:[2 octets for handle, 16 octets for UUIDs]
 * @retval None
 */

tBleStatus aci_att_find_info_resp_event_process(uint8_t *buffer_in)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_find_info_resp_event_rp0 *rp0 = (aci_att_find_info_resp_event_rp0 *)buffer_in;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	60bb      	str	r3, [r7, #8]
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	881b      	ldrh	r3, [r3, #0]
 8003b14:	b298      	uxth	r0, r3
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	7899      	ldrb	r1, [r3, #2]
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	78da      	ldrb	r2, [r3, #3]
                               rp0->Format,
                               rp0->Event_Data_Length,
                               rp0->Handle_UUID_Pair);
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	3304      	adds	r3, #4
  aci_att_find_info_resp_event(rp0->Connection_Handle,
 8003b22:	f000 fe49 	bl	80047b8 <aci_att_find_info_resp_event>

  return status;
 8003b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <aci_att_find_by_type_value_resp_event_process>:
 * @param Attribute_Group_Handle_Pair See @ref Attribute_Group_Handle_Pair_t
 * @retval None
 */

tBleStatus aci_att_find_by_type_value_resp_event_process(uint8_t *buffer_in)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b0a6      	sub	sp, #152	; 0x98
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  aci_att_find_by_type_value_resp_event_rp0 *rp0 = (aci_att_find_by_type_value_resp_event_rp0 *)buffer_in;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 3;
 8003b44:	2303      	movs	r3, #3
 8003b46:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[HCI_MAX_PAYLOAD_SIZE/sizeof(Attribute_Group_Handle_Pair_t)];
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b50:	e030      	b.n	8003bb4 <aci_att_find_by_type_value_resp_event_process+0x84>
    Attribute_Group_Handle_Pair[i].Found_Attribute_Handle = rp0->Attribute_Group_Handle_Pair[i].Found_Attribute_Handle;
 8003b52:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003b56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8003b6e:	440b      	add	r3, r1
 8003b70:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8003b74:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003b78:	3302      	adds	r3, #2
 8003b7a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Attribute_Group_Handle_Pair[i].Group_End_Handle = rp0->Attribute_Group_Handle_Pair[i].Group_End_Handle;
 8003b7e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003b82:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	4413      	add	r3, r2
 8003b8a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8003b9a:	440b      	add	r3, r1
 8003b9c:	f823 2c8e 	strh.w	r2, [r3, #-142]
    size += 2;
 8003ba0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003ba4:	3302      	adds	r3, #2
 8003ba6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Num_of_Handle_Pair; i++) {
 8003baa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003bae:	3301      	adds	r3, #1
 8003bb0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003bb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003bb8:	789b      	ldrb	r3, [r3, #2]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	dbc6      	blt.n	8003b52 <aci_att_find_by_type_value_resp_event_process+0x22>
  }
  aci_att_find_by_type_value_resp_event(rp0->Connection_Handle,
 8003bc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003bc8:	881b      	ldrh	r3, [r3, #0]
 8003bca:	b298      	uxth	r0, r3
 8003bcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003bd0:	789b      	ldrb	r3, [r3, #2]
 8003bd2:	f107 0208 	add.w	r2, r7, #8
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	f000 fdfe 	bl	80047d8 <aci_att_find_by_type_value_resp_event>
                                        rp0->Num_of_Handle_Pair,
                                        Attribute_Group_Handle_Pair);

  return status;
 8003bdc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3798      	adds	r7, #152	; 0x98
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <aci_att_read_by_type_resp_event_process>:
 *        Value]
 * @retval None
 */

tBleStatus aci_att_read_by_type_resp_event_process(uint8_t *buffer_in)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_type_resp_event_rp0 *rp0 = (aci_att_read_by_type_resp_event_rp0 *)buffer_in;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	881b      	ldrh	r3, [r3, #0]
 8003bfc:	b298      	uxth	r0, r3
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	7899      	ldrb	r1, [r3, #2]
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	78da      	ldrb	r2, [r3, #3]
                                  rp0->Handle_Value_Pair_Length,
                                  rp0->Data_Length,
                                  rp0->Handle_Value_Pair_Data);
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	3304      	adds	r3, #4
  aci_att_read_by_type_resp_event(rp0->Connection_Handle,
 8003c0a:	f000 fdf3 	bl	80047f4 <aci_att_read_by_type_resp_event>

  return status;
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <aci_att_read_resp_event_process>:
 * @param Attribute_Value The value of the attribute.
 * @retval None
 */

tBleStatus aci_att_read_resp_event_process(uint8_t *buffer_in)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003c20:	2300      	movs	r3, #0
 8003c22:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_resp_event_rp0 *rp0 = (aci_att_read_resp_event_rp0 *)buffer_in;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	60bb      	str	r3, [r7, #8]
  aci_att_read_resp_event(rp0->Connection_Handle,
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	881b      	ldrh	r3, [r3, #0]
 8003c2c:	b298      	uxth	r0, r3
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	7899      	ldrb	r1, [r3, #2]
                          rp0->Event_Data_Length,
                          rp0->Attribute_Value);
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	3303      	adds	r3, #3
  aci_att_read_resp_event(rp0->Connection_Handle,
 8003c36:	461a      	mov	r2, r3
 8003c38:	f000 fdec 	bl	8004814 <aci_att_read_resp_event>

  return status;
 8003c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <aci_att_read_blob_resp_event_process>:
 * @param Attribute_Value Part of the attribute value.
 * @retval None
 */

tBleStatus aci_att_read_blob_resp_event_process(uint8_t *buffer_in)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b084      	sub	sp, #16
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_blob_resp_event_rp0 *rp0 = (aci_att_read_blob_resp_event_rp0 *)buffer_in;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	60bb      	str	r3, [r7, #8]
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	881b      	ldrh	r3, [r3, #0]
 8003c5a:	b298      	uxth	r0, r3
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	7899      	ldrb	r1, [r3, #2]
                               rp0->Event_Data_Length,
                               rp0->Attribute_Value);
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	3303      	adds	r3, #3
  aci_att_read_blob_resp_event(rp0->Connection_Handle,
 8003c64:	461a      	mov	r2, r3
 8003c66:	f000 fde3 	bl	8004830 <aci_att_read_blob_resp_event>

  return status;
 8003c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3710      	adds	r7, #16
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <aci_att_read_multiple_resp_event_process>:
 *        the order that they were requested.
 * @retval None
 */

tBleStatus aci_att_read_multiple_resp_event_process(uint8_t *buffer_in)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_multiple_resp_event_rp0 *rp0 = (aci_att_read_multiple_resp_event_rp0 *)buffer_in;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	60bb      	str	r3, [r7, #8]
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	881b      	ldrh	r3, [r3, #0]
 8003c88:	b298      	uxth	r0, r3
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	7899      	ldrb	r1, [r3, #2]
                                   rp0->Event_Data_Length,
                                   rp0->Set_Of_Values);
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	3303      	adds	r3, #3
  aci_att_read_multiple_resp_event(rp0->Connection_Handle,
 8003c92:	461a      	mov	r2, r3
 8003c94:	f000 fdda 	bl	800484c <aci_att_read_multiple_resp_event>

  return status;
 8003c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <aci_att_read_by_group_type_resp_event_process>:
 *        Handle, (Attribute_Data_Length - 4 octets) for Attribute Value]
 * @retval None
 */

tBleStatus aci_att_read_by_group_type_resp_event_process(uint8_t *buffer_in)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b084      	sub	sp, #16
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003caa:	2300      	movs	r3, #0
 8003cac:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_read_by_group_type_resp_event_rp0 *rp0 = (aci_att_read_by_group_type_resp_event_rp0 *)buffer_in;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	60bb      	str	r3, [r7, #8]
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	881b      	ldrh	r3, [r3, #0]
 8003cb6:	b298      	uxth	r0, r3
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	7899      	ldrb	r1, [r3, #2]
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	78da      	ldrb	r2, [r3, #3]
                                        rp0->Attribute_Data_Length,
                                        rp0->Data_Length,
                                        rp0->Attribute_Data_List);
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	3304      	adds	r3, #4
  aci_att_read_by_group_type_resp_event(rp0->Connection_Handle,
 8003cc4:	f000 fdd0 	bl	8004868 <aci_att_read_by_group_type_resp_event>

  return status;
 8003cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <aci_att_prepare_write_resp_event_process>:
 * @param Part_Attribute_Value The value of the attribute to be written
 * @retval None
 */

tBleStatus aci_att_prepare_write_resp_event_process(uint8_t *buffer_in)
{
 8003cd2:	b590      	push	{r4, r7, lr}
 8003cd4:	b087      	sub	sp, #28
 8003cd6:	af02      	add	r7, sp, #8
 8003cd8:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_prepare_write_resp_event_rp0 *rp0 = (aci_att_prepare_write_resp_event_rp0 *)buffer_in;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	60bb      	str	r3, [r7, #8]
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	881b      	ldrh	r3, [r3, #0]
 8003ce6:	b298      	uxth	r0, r3
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	885b      	ldrh	r3, [r3, #2]
 8003cec:	b299      	uxth	r1, r3
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	889b      	ldrh	r3, [r3, #4]
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	799c      	ldrb	r4, [r3, #6]
                                   rp0->Attribute_Handle,
                                   rp0->Offset,
                                   rp0->Part_Attribute_Value_Length,
                                   rp0->Part_Attribute_Value);
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	3307      	adds	r3, #7
  aci_att_prepare_write_resp_event(rp0->Connection_Handle,
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	4623      	mov	r3, r4
 8003d00:	f000 fdc2 	bl	8004888 <aci_att_prepare_write_resp_event>

  return status;
 8003d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd90      	pop	{r4, r7, pc}

08003d0e <aci_att_exec_write_resp_event_process>:
 * @param Connection_Handle Connection handle related to the response
 * @retval None
 */

tBleStatus aci_att_exec_write_resp_event_process(uint8_t *buffer_in)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b084      	sub	sp, #16
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003d16:	2300      	movs	r3, #0
 8003d18:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_att_exec_write_resp_event_rp0 *rp0 = (aci_att_exec_write_resp_event_rp0 *)buffer_in;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	60bb      	str	r3, [r7, #8]
  aci_att_exec_write_resp_event(rp0->Connection_Handle);
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	881b      	ldrh	r3, [r3, #0]
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 fdc3 	bl	80048b0 <aci_att_exec_write_resp_event>

  return status;
 8003d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <aci_gatt_indication_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_indication_event_process(uint8_t *buffer_in)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_indication_event_rp0 *rp0 = (aci_gatt_indication_event_rp0 *)buffer_in;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	60bb      	str	r3, [r7, #8]
  aci_gatt_indication_event(rp0->Connection_Handle,
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	881b      	ldrh	r3, [r3, #0]
 8003d48:	b298      	uxth	r0, r3
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	885b      	ldrh	r3, [r3, #2]
 8003d4e:	b299      	uxth	r1, r3
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	791a      	ldrb	r2, [r3, #4]
                            rp0->Attribute_Handle,
                            rp0->Attribute_Value_Length,
                            rp0->Attribute_Value);
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	3305      	adds	r3, #5
  aci_gatt_indication_event(rp0->Connection_Handle,
 8003d58:	f000 fdb5 	bl	80048c6 <aci_gatt_indication_event>

  return status;
 8003d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <aci_gatt_notification_event_process>:
 * @param Attribute_Value The current value of the attribute
 * @retval None
 */

tBleStatus aci_gatt_notification_event_process(uint8_t *buffer_in)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b084      	sub	sp, #16
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_notification_event_rp0 *rp0 = (aci_gatt_notification_event_rp0 *)buffer_in;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	60bb      	str	r3, [r7, #8]
  aci_gatt_notification_event(rp0->Connection_Handle,
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	b298      	uxth	r0, r3
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	885b      	ldrh	r3, [r3, #2]
 8003d80:	b299      	uxth	r1, r3
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	791a      	ldrb	r2, [r3, #4]
                              rp0->Attribute_Handle,
                              rp0->Attribute_Value_Length,
                              rp0->Attribute_Value);
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	3305      	adds	r3, #5
  aci_gatt_notification_event(rp0->Connection_Handle,
 8003d8a:	f7fd f8e3 	bl	8000f54 <aci_gatt_notification_event>

  return status;
 8003d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <aci_gatt_proc_complete_event_process>:
 *        was successful.
 * @retval None
 */

tBleStatus aci_gatt_proc_complete_event_process(uint8_t *buffer_in)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003da0:	2300      	movs	r3, #0
 8003da2:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_proc_complete_event_rp0 *rp0 = (aci_gatt_proc_complete_event_rp0 *)buffer_in;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	60bb      	str	r3, [r7, #8]
  aci_gatt_proc_complete_event(rp0->Connection_Handle,
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	881b      	ldrh	r3, [r3, #0]
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	789b      	ldrb	r3, [r3, #2]
 8003db2:	4619      	mov	r1, r3
 8003db4:	4610      	mov	r0, r2
 8003db6:	f000 fd96 	bl	80048e6 <aci_gatt_proc_complete_event>
                               rp0->Error_Code);

  return status;
 8003dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <aci_gatt_error_resp_event_process>:
 *        - 0x11: Insufficient resources
 * @retval None
 */

tBleStatus aci_gatt_error_resp_event_process(uint8_t *buffer_in)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_error_resp_event_rp0 *rp0 = (aci_gatt_error_resp_event_rp0 *)buffer_in;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	60bb      	str	r3, [r7, #8]
  aci_gatt_error_resp_event(rp0->Connection_Handle,
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	881b      	ldrh	r3, [r3, #0]
 8003dd8:	b298      	uxth	r0, r3
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	7899      	ldrb	r1, [r3, #2]
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	795b      	ldrb	r3, [r3, #5]
 8003dea:	f000 fd8a 	bl	8004902 <aci_gatt_error_resp_event>
                            rp0->Req_Opcode,
                            rp0->Attribute_Handle,
                            rp0->Error_Code);

  return status;
 8003dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <aci_gatt_disc_read_char_by_uuid_resp_event_process>:
 *        been performed.
 * @retval None
 */

tBleStatus aci_gatt_disc_read_char_by_uuid_resp_event_process(uint8_t *buffer_in)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003e00:	2300      	movs	r3, #0
 8003e02:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *rp0 = (aci_gatt_disc_read_char_by_uuid_resp_event_rp0 *)buffer_in;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	60bb      	str	r3, [r7, #8]
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	881b      	ldrh	r3, [r3, #0]
 8003e0c:	b298      	uxth	r0, r3
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	885b      	ldrh	r3, [r3, #2]
 8003e12:	b299      	uxth	r1, r3
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	791a      	ldrb	r2, [r3, #4]
                                             rp0->Attribute_Handle,
                                             rp0->Attribute_Value_Length,
                                             rp0->Attribute_Value);
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	3305      	adds	r3, #5
  aci_gatt_disc_read_char_by_uuid_resp_event(rp0->Connection_Handle,
 8003e1c:	f000 fd85 	bl	800492a <aci_gatt_disc_read_char_by_uuid_resp_event>

  return status;
 8003e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <aci_gatt_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_write_permit_req_event_process(uint8_t *buffer_in)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b084      	sub	sp, #16
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003e32:	2300      	movs	r3, #0
 8003e34:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_write_permit_req_event_rp0 *rp0 = (aci_gatt_write_permit_req_event_rp0 *)buffer_in;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	60bb      	str	r3, [r7, #8]
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	881b      	ldrh	r3, [r3, #0]
 8003e3e:	b298      	uxth	r0, r3
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	885b      	ldrh	r3, [r3, #2]
 8003e44:	b299      	uxth	r1, r3
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	791a      	ldrb	r2, [r3, #4]
                                  rp0->Attribute_Handle,
                                  rp0->Data_Length,
                                  rp0->Data);
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	3305      	adds	r3, #5
  aci_gatt_write_permit_req_event(rp0->Connection_Handle,
 8003e4e:	f000 fd7c 	bl	800494a <aci_gatt_write_permit_req_event>

  return status;
 8003e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <aci_gatt_read_permit_req_event_process>:
 * @param Offset Contains the offset from which the read has been requested
 * @retval None
 */

tBleStatus aci_gatt_read_permit_req_event_process(uint8_t *buffer_in)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003e64:	2300      	movs	r3, #0
 8003e66:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_read_permit_req_event_rp0 *rp0 = (aci_gatt_read_permit_req_event_rp0 *)buffer_in;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	60bb      	str	r3, [r7, #8]
  aci_gatt_read_permit_req_event(rp0->Connection_Handle,
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	881b      	ldrh	r3, [r3, #0]
 8003e70:	b298      	uxth	r0, r3
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	885b      	ldrh	r3, [r3, #2]
 8003e76:	b299      	uxth	r1, r3
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	889b      	ldrh	r3, [r3, #4]
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	461a      	mov	r2, r3
 8003e80:	f000 fd73 	bl	800496a <aci_gatt_read_permit_req_event>
                                 rp0->Attribute_Handle,
                                 rp0->Offset);

  return status;
 8003e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <aci_gatt_read_multi_permit_req_event_process>:
 * @param Handle_Item See @ref Handle_Item_t
 * @retval None
 */

tBleStatus aci_gatt_read_multi_permit_req_event_process(uint8_t *buffer_in)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b0a6      	sub	sp, #152	; 0x98
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003e96:	2300      	movs	r3, #0
 8003e98:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  aci_gatt_read_multi_permit_req_event_rp0 *rp0 = (aci_gatt_read_multi_permit_req_event_rp0 *)buffer_in;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 3;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Handle_Item_t Handle_Item[HCI_MAX_PAYLOAD_SIZE/sizeof(Handle_Item_t)];
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003eae:	e01a      	b.n	8003ee6 <aci_gatt_read_multi_permit_req_event_process+0x58>
    Handle_Item[i].Handle = rp0->Handle_Item[i].Handle;
 8003eb0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003eb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	4413      	add	r3, r2
 8003ebc:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003ec6:	005b      	lsls	r3, r3, #1
 8003ec8:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8003ecc:	440b      	add	r3, r1
 8003ece:	f823 2c90 	strh.w	r2, [r3, #-144]
    size += 2;
 8003ed2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003ed6:	3302      	adds	r3, #2
 8003ed8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Number_of_Handles; i++) {
 8003edc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ee6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003eea:	789b      	ldrb	r3, [r3, #2]
 8003eec:	461a      	mov	r2, r3
 8003eee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	dbdc      	blt.n	8003eb0 <aci_gatt_read_multi_permit_req_event_process+0x22>
  }
  aci_gatt_read_multi_permit_req_event(rp0->Connection_Handle,
 8003ef6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	b298      	uxth	r0, r3
 8003efe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f02:	789b      	ldrb	r3, [r3, #2]
 8003f04:	f107 0208 	add.w	r2, r7, #8
 8003f08:	4619      	mov	r1, r3
 8003f0a:	f000 fd3d 	bl	8004988 <aci_gatt_read_multi_permit_req_event>
                                       rp0->Number_of_Handles,
                                       Handle_Item);

  return status;
 8003f0e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3798      	adds	r7, #152	; 0x98
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <aci_gatt_tx_pool_available_event_process>:
 * @param Available_Buffers Not used.
 * @retval None
 */

tBleStatus aci_gatt_tx_pool_available_event_process(uint8_t *buffer_in)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b084      	sub	sp, #16
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003f22:	2300      	movs	r3, #0
 8003f24:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_tx_pool_available_event_rp0 *rp0 = (aci_gatt_tx_pool_available_event_rp0 *)buffer_in;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	60bb      	str	r3, [r7, #8]
  aci_gatt_tx_pool_available_event(rp0->Connection_Handle,
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	881b      	ldrh	r3, [r3, #0]
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	885b      	ldrh	r3, [r3, #2]
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	4619      	mov	r1, r3
 8003f38:	4610      	mov	r0, r2
 8003f3a:	f000 fd33 	bl	80049a4 <aci_gatt_tx_pool_available_event>
                                   rp0->Available_Buffers);

  return status;
 8003f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <aci_gatt_server_confirmation_event_process>:
 * @param Connection_Handle Connection handle related to the event
 * @retval None
 */

tBleStatus aci_gatt_server_confirmation_event_process(uint8_t *buffer_in)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b084      	sub	sp, #16
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003f50:	2300      	movs	r3, #0
 8003f52:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_server_confirmation_event_rp0 *rp0 = (aci_gatt_server_confirmation_event_rp0 *)buffer_in;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	60bb      	str	r3, [r7, #8]
  aci_gatt_server_confirmation_event(rp0->Connection_Handle);
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	881b      	ldrh	r3, [r3, #0]
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 fd2e 	bl	80049c0 <aci_gatt_server_confirmation_event>

  return status;
 8003f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <aci_gatt_prepare_write_permit_req_event_process>:
 * @param Data The data that the client has requested to write
 * @retval None
 */

tBleStatus aci_gatt_prepare_write_permit_req_event_process(uint8_t *buffer_in)
{
 8003f6e:	b590      	push	{r4, r7, lr}
 8003f70:	b087      	sub	sp, #28
 8003f72:	af02      	add	r7, sp, #8
 8003f74:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003f76:	2300      	movs	r3, #0
 8003f78:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  aci_gatt_prepare_write_permit_req_event_rp0 *rp0 = (aci_gatt_prepare_write_permit_req_event_rp0 *)buffer_in;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	60bb      	str	r3, [r7, #8]
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	881b      	ldrh	r3, [r3, #0]
 8003f82:	b298      	uxth	r0, r3
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	885b      	ldrh	r3, [r3, #2]
 8003f88:	b299      	uxth	r1, r3
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	889b      	ldrh	r3, [r3, #4]
 8003f8e:	b29a      	uxth	r2, r3
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	799c      	ldrb	r4, [r3, #6]
                                          rp0->Attribute_Handle,
                                          rp0->Offset,
                                          rp0->Data_Length,
                                          rp0->Data);
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	3307      	adds	r3, #7
  aci_gatt_prepare_write_permit_req_event(rp0->Connection_Handle,
 8003f98:	9300      	str	r3, [sp, #0]
 8003f9a:	4623      	mov	r3, r4
 8003f9c:	f000 fd1b 	bl	80049d6 <aci_gatt_prepare_write_permit_req_event>

  return status;
 8003fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd90      	pop	{r4, r7, pc}

08003faa <hci_le_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_connection_complete_event_process(uint8_t *buffer_in)
{
 8003faa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fac:	b08b      	sub	sp, #44	; 0x2c
 8003fae:	af06      	add	r7, sp, #24
 8003fb0:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_complete_event_rp0 *rp0 = (hci_le_connection_complete_event_rp0 *)buffer_in;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	60bb      	str	r3, [r7, #8]
  hci_le_connection_complete_event(rp0->Status,
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	781d      	ldrb	r5, [r3, #0]
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003fc4:	b29e      	uxth	r6, r3
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	f893 c003 	ldrb.w	ip, [r3, #3]
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	f893 e004 	ldrb.w	lr, [r3, #4]
                                   rp0->Connection_Handle,
                                   rp0->Role,
                                   rp0->Peer_Address_Type,
                                   rp0->Peer_Address,
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	3305      	adds	r3, #5
  hci_le_connection_complete_event(rp0->Status,
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	f8b2 200b 	ldrh.w	r2, [r2, #11]
 8003fdc:	b292      	uxth	r2, r2
 8003fde:	68b9      	ldr	r1, [r7, #8]
 8003fe0:	f8b1 100d 	ldrh.w	r1, [r1, #13]
 8003fe4:	b289      	uxth	r1, r1
 8003fe6:	68b8      	ldr	r0, [r7, #8]
 8003fe8:	f8b0 000f 	ldrh.w	r0, [r0, #15]
 8003fec:	b280      	uxth	r0, r0
 8003fee:	68bc      	ldr	r4, [r7, #8]
 8003ff0:	7c64      	ldrb	r4, [r4, #17]
 8003ff2:	9404      	str	r4, [sp, #16]
 8003ff4:	9003      	str	r0, [sp, #12]
 8003ff6:	9102      	str	r1, [sp, #8]
 8003ff8:	9201      	str	r2, [sp, #4]
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	4673      	mov	r3, lr
 8003ffe:	4662      	mov	r2, ip
 8004000:	4631      	mov	r1, r6
 8004002:	4628      	mov	r0, r5
 8004004:	f7fc ffc2 	bl	8000f8c <hci_le_connection_complete_event>
                                   rp0->Conn_Interval,
                                   rp0->Conn_Latency,
                                   rp0->Supervision_Timeout,
                                   rp0->Master_Clock_Accuracy);

  return status;
 8004008:	7bfb      	ldrb	r3, [r7, #15]
}
 800400a:	4618      	mov	r0, r3
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004012 <hci_le_advertising_report_event_process>:
 * @param Advertising_Report See @ref Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_advertising_report_event_process(uint8_t *buffer_in)
{
 8004012:	b580      	push	{r7, lr}
 8004014:	b0a4      	sub	sp, #144	; 0x90
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800401a:	2300      	movs	r3, #0
 800401c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  /* Input params */
  hci_le_advertising_report_event_rp0 *rp0 = (hci_le_advertising_report_event_rp0 *)buffer_in;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint8_t size = 1;
 8004026:	2301      	movs	r3, #1
 8004028:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  int i;
  Advertising_Report_t Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 800402c:	2300      	movs	r3, #0
 800402e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004032:	e0b8      	b.n	80041a6 <hci_le_advertising_report_event_process+0x194>
    Advertising_Report[i].Event_Type = rp0->Advertising_Report[i].Event_Type;
 8004034:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8004038:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800403c:	4613      	mov	r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	4413      	add	r3, r2
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	4413      	add	r3, r2
 8004046:	440b      	add	r3, r1
 8004048:	3301      	adds	r3, #1
 800404a:	7819      	ldrb	r1, [r3, #0]
 800404c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004050:	4613      	mov	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800405c:	4413      	add	r3, r2
 800405e:	3b88      	subs	r3, #136	; 0x88
 8004060:	460a      	mov	r2, r1
 8004062:	701a      	strb	r2, [r3, #0]
    size += 1;
 8004064:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004068:	3301      	adds	r3, #1
 800406a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Address_Type = rp0->Advertising_Report[i].Address_Type;
 800406e:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8004072:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004076:	4613      	mov	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4413      	add	r3, r2
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	4413      	add	r3, r2
 8004080:	440b      	add	r3, r1
 8004082:	3302      	adds	r3, #2
 8004084:	7819      	ldrb	r1, [r3, #0]
 8004086:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800408a:	4613      	mov	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	4413      	add	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8004096:	4413      	add	r3, r2
 8004098:	3b87      	subs	r3, #135	; 0x87
 800409a:	460a      	mov	r2, r1
 800409c:	701a      	strb	r2, [r3, #0]
    size += 1;
 800409e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80040a2:	3301      	adds	r3, #1
 80040a4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    BLUENRG_memcpy((void *) Advertising_Report[i].Address, (const void *) rp0->Advertising_Report[i].Address, 6);
 80040a8:	f107 0108 	add.w	r1, r7, #8
 80040ac:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80040b0:	4613      	mov	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	4413      	add	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	440b      	add	r3, r1
 80040ba:	1c98      	adds	r0, r3, #2
 80040bc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80040c0:	4613      	mov	r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4413      	add	r3, r2
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	4413      	add	r3, r2
 80040ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80040ce:	4413      	add	r3, r2
 80040d0:	3303      	adds	r3, #3
 80040d2:	2206      	movs	r2, #6
 80040d4:	4619      	mov	r1, r3
 80040d6:	f001 fd4d 	bl	8005b74 <memcpy>
    size += 6;
 80040da:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80040de:	3306      	adds	r3, #6
 80040e0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Length_Data = rp0->Advertising_Report[i].Length_Data;
 80040e4:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80040e8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80040ec:	4613      	mov	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	005b      	lsls	r3, r3, #1
 80040f4:	4413      	add	r3, r2
 80040f6:	440b      	add	r3, r1
 80040f8:	3309      	adds	r3, #9
 80040fa:	7819      	ldrb	r1, [r3, #0]
 80040fc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004100:	4613      	mov	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800410c:	4413      	add	r3, r2
 800410e:	3b80      	subs	r3, #128	; 0x80
 8004110:	460a      	mov	r2, r1
 8004112:	701a      	strb	r2, [r3, #0]
    size += 1;
 8004114:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004118:	3301      	adds	r3, #1
 800411a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].Data = rp0->Advertising_Report[i].Data;
 800411e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004122:	4613      	mov	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4413      	add	r3, r2
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	4413      	add	r3, r2
 800412c:	3308      	adds	r3, #8
 800412e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004132:	4413      	add	r3, r2
 8004134:	1c99      	adds	r1, r3, #2
 8004136:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800413a:	4613      	mov	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4413      	add	r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8004146:	4413      	add	r3, r2
 8004148:	3b7c      	subs	r3, #124	; 0x7c
 800414a:	6019      	str	r1, [r3, #0]
    size += rp0->Advertising_Report[i].Length_Data;
 800414c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8004150:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004154:	4613      	mov	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	4413      	add	r3, r2
 800415e:	440b      	add	r3, r1
 8004160:	3309      	adds	r3, #9
 8004162:	781a      	ldrb	r2, [r3, #0]
 8004164:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004168:	4413      	add	r3, r2
 800416a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    Advertising_Report[i].RSSI = (uint8_t)buffer_in[size];
 800416e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	4413      	add	r3, r2
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	b259      	sxtb	r1, r3
 800417a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800417e:	4613      	mov	r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	4413      	add	r3, r2
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	f107 0290 	add.w	r2, r7, #144	; 0x90
 800418a:	4413      	add	r3, r2
 800418c:	3b78      	subs	r3, #120	; 0x78
 800418e:	460a      	mov	r2, r1
 8004190:	701a      	strb	r2, [r3, #0]
    size += 1;
 8004192:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004196:	3301      	adds	r3, #1
 8004198:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  for (i = 0; i < rp0->Num_Reports; i++) {
 800419c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041a0:	3301      	adds	r3, #1
 80041a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80041a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	461a      	mov	r2, r3
 80041ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041b2:	4293      	cmp	r3, r2
 80041b4:	f6ff af3e 	blt.w	8004034 <hci_le_advertising_report_event_process+0x22>
  }
  hci_le_advertising_report_event(rp0->Num_Reports,
 80041b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	f107 0208 	add.w	r2, r7, #8
 80041c2:	4611      	mov	r1, r2
 80041c4:	4618      	mov	r0, r3
 80041c6:	f000 f9e7 	bl	8004598 <hci_le_advertising_report_event>
                                  Advertising_Report);

  return status;
 80041ca:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3790      	adds	r7, #144	; 0x90
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <hci_le_connection_update_complete_event_process>:
 *        - 0x000A (100 ms)  ... 0x0C80 (32000 ms) 
 * @retval None
 */

tBleStatus hci_le_connection_update_complete_event_process(uint8_t *buffer_in)
{
 80041d6:	b590      	push	{r4, r7, lr}
 80041d8:	b087      	sub	sp, #28
 80041da:	af02      	add	r7, sp, #8
 80041dc:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80041de:	2300      	movs	r3, #0
 80041e0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_connection_update_complete_event_rp0 *rp0 = (hci_le_connection_update_complete_event_rp0 *)buffer_in;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	60bb      	str	r3, [r7, #8]
  hci_le_connection_update_complete_event(rp0->Status,
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	7818      	ldrb	r0, [r3, #0]
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80041f0:	b299      	uxth	r1, r3
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8004200:	b29c      	uxth	r4, r3
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8004208:	b29b      	uxth	r3, r3
 800420a:	9300      	str	r3, [sp, #0]
 800420c:	4623      	mov	r3, r4
 800420e:	f000 f9cf 	bl	80045b0 <hci_le_connection_update_complete_event>
                                          rp0->Connection_Handle,
                                          rp0->Conn_Interval,
                                          rp0->Conn_Latency,
                                          rp0->Supervision_Timeout);

  return status;
 8004212:	7bfb      	ldrb	r3, [r7, #15]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3714      	adds	r7, #20
 8004218:	46bd      	mov	sp, r7
 800421a:	bd90      	pop	{r4, r7, pc}

0800421c <hci_le_read_remote_used_features_complete_event_process>:
 *        Layer specification.
 * @retval None
 */

tBleStatus hci_le_read_remote_used_features_complete_event_process(uint8_t *buffer_in)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8004224:	2300      	movs	r3, #0
 8004226:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_remote_used_features_complete_event_rp0 *rp0 = (hci_le_read_remote_used_features_complete_event_rp0 *)buffer_in;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	60bb      	str	r3, [r7, #8]
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	7818      	ldrb	r0, [r3, #0]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004236:	b299      	uxth	r1, r3
                                                  rp0->Connection_Handle,
                                                  rp0->LE_Features);
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	3303      	adds	r3, #3
  hci_le_read_remote_used_features_complete_event(rp0->Status,
 800423c:	461a      	mov	r2, r3
 800423e:	f000 f9cb 	bl	80045d8 <hci_le_read_remote_used_features_complete_event>

  return status;
 8004242:	7bfb      	ldrb	r3, [r7, #15]
}
 8004244:	4618      	mov	r0, r3
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <hci_le_long_term_key_request_event_process>:
 * @param Encrypted_Diversifier 16-bit encrypted diversifier
 * @retval None
 */

tBleStatus hci_le_long_term_key_request_event_process(uint8_t *buffer_in)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8004254:	2300      	movs	r3, #0
 8004256:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_long_term_key_request_event_rp0 *rp0 = (hci_le_long_term_key_request_event_rp0 *)buffer_in;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	60bb      	str	r3, [r7, #8]
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	881b      	ldrh	r3, [r3, #0]
 8004260:	b298      	uxth	r0, r3
                                     rp0->Random_Number,
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	1c99      	adds	r1, r3, #2
  hci_le_long_term_key_request_event(rp0->Connection_Handle,
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	895b      	ldrh	r3, [r3, #10]
 800426a:	b29b      	uxth	r3, r3
 800426c:	461a      	mov	r2, r3
 800426e:	f000 f9c1 	bl	80045f4 <hci_le_long_term_key_request_event>
                                     rp0->Encrypted_Diversifier);

  return status;
 8004272:	7bfb      	ldrb	r3, [r7, #15]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <hci_le_data_length_change_event_process>:
 *        future use)
 * @retval None
 */

tBleStatus hci_le_data_length_change_event_process(uint8_t *buffer_in)
{
 800427c:	b590      	push	{r4, r7, lr}
 800427e:	b087      	sub	sp, #28
 8004280:	af02      	add	r7, sp, #8
 8004282:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8004284:	2300      	movs	r3, #0
 8004286:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_data_length_change_event_rp0 *rp0 = (hci_le_data_length_change_event_rp0 *)buffer_in;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	60bb      	str	r3, [r7, #8]
  hci_le_data_length_change_event(rp0->Connection_Handle,
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	881b      	ldrh	r3, [r3, #0]
 8004290:	b298      	uxth	r0, r3
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	885b      	ldrh	r3, [r3, #2]
 8004296:	b299      	uxth	r1, r3
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	889b      	ldrh	r3, [r3, #4]
 800429c:	b29a      	uxth	r2, r3
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	88db      	ldrh	r3, [r3, #6]
 80042a2:	b29c      	uxth	r4, r3
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	891b      	ldrh	r3, [r3, #8]
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	4623      	mov	r3, r4
 80042ae:	f000 f9af 	bl	8004610 <hci_le_data_length_change_event>
                                  rp0->MaxTxOctets,
                                  rp0->MaxTxTime,
                                  rp0->MaxRxOctets,
                                  rp0->MaxRxTime);

  return status;
 80042b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3714      	adds	r7, #20
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd90      	pop	{r4, r7, pc}

080042bc <hci_le_read_local_p256_public_key_complete_event_process>:
 * @param Local_P256_Public_Key Local P-256 public key.
 * @retval None
 */

tBleStatus hci_le_read_local_p256_public_key_complete_event_process(uint8_t *buffer_in)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80042c4:	2300      	movs	r3, #0
 80042c6:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_read_local_p256_public_key_complete_event_rp0 *rp0 = (hci_le_read_local_p256_public_key_complete_event_rp0 *)buffer_in;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	60bb      	str	r3, [r7, #8]
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	781a      	ldrb	r2, [r3, #0]
                                                   rp0->Local_P256_Public_Key);
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	3301      	adds	r3, #1
  hci_le_read_local_p256_public_key_complete_event(rp0->Status,
 80042d4:	4619      	mov	r1, r3
 80042d6:	4610      	mov	r0, r2
 80042d8:	f000 f9ae 	bl	8004638 <hci_le_read_local_p256_public_key_complete_event>

  return status;
 80042dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <hci_le_generate_dhkey_complete_event_process>:
 * @param DHKey Diffie Hellman Key
 * @retval None
 */

tBleStatus hci_le_generate_dhkey_complete_event_process(uint8_t *buffer_in)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b084      	sub	sp, #16
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 80042ee:	2300      	movs	r3, #0
 80042f0:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_generate_dhkey_complete_event_rp0 *rp0 = (hci_le_generate_dhkey_complete_event_rp0 *)buffer_in;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	60bb      	str	r3, [r7, #8]
  hci_le_generate_dhkey_complete_event(rp0->Status,
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	781a      	ldrb	r2, [r3, #0]
                                       rp0->DHKey);
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	3301      	adds	r3, #1
  hci_le_generate_dhkey_complete_event(rp0->Status,
 80042fe:	4619      	mov	r1, r3
 8004300:	4610      	mov	r0, r2
 8004302:	f000 f9a5 	bl	8004650 <hci_le_generate_dhkey_complete_event>

  return status;
 8004306:	7bfb      	ldrb	r3, [r7, #15]
}
 8004308:	4618      	mov	r0, r3
 800430a:	3710      	adds	r7, #16
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <hci_le_enhanced_connection_complete_event_process>:
 *        - 0x07: 20 ppm
 * @retval None
 */

tBleStatus hci_le_enhanced_connection_complete_event_process(uint8_t *buffer_in)
{
 8004310:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004314:	b08d      	sub	sp, #52	; 0x34
 8004316:	af08      	add	r7, sp, #32
 8004318:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 800431a:	2300      	movs	r3, #0
 800431c:	73fb      	strb	r3, [r7, #15]
  /* Input params */
  hci_le_enhanced_connection_complete_event_rp0 *rp0 = (hci_le_enhanced_connection_complete_event_rp0 *)buffer_in;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	60bb      	str	r3, [r7, #8]
  hci_le_enhanced_connection_complete_event(rp0->Status,
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	f893 c000 	ldrb.w	ip, [r3]
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800432e:	fa1f fe83 	uxth.w	lr, r3
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	f893 8003 	ldrb.w	r8, [r3, #3]
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	f893 9004 	ldrb.w	r9, [r3, #4]
                                            rp0->Connection_Handle,
                                            rp0->Role,
                                            rp0->Peer_Address_Type,
                                            rp0->Peer_Address,
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	3305      	adds	r3, #5
                                            rp0->Local_Resolvable_Private_Address,
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	320b      	adds	r2, #11
                                            rp0->Peer_Resolvable_Private_Address,
 8004346:	68b9      	ldr	r1, [r7, #8]
 8004348:	3111      	adds	r1, #17
  hci_le_enhanced_connection_complete_event(rp0->Status,
 800434a:	68b8      	ldr	r0, [r7, #8]
 800434c:	f8b0 0017 	ldrh.w	r0, [r0, #23]
 8004350:	b280      	uxth	r0, r0
 8004352:	68bc      	ldr	r4, [r7, #8]
 8004354:	f8b4 4019 	ldrh.w	r4, [r4, #25]
 8004358:	b2a4      	uxth	r4, r4
 800435a:	68bd      	ldr	r5, [r7, #8]
 800435c:	f8b5 501b 	ldrh.w	r5, [r5, #27]
 8004360:	b2ad      	uxth	r5, r5
 8004362:	68be      	ldr	r6, [r7, #8]
 8004364:	7f76      	ldrb	r6, [r6, #29]
 8004366:	9606      	str	r6, [sp, #24]
 8004368:	9505      	str	r5, [sp, #20]
 800436a:	9404      	str	r4, [sp, #16]
 800436c:	9003      	str	r0, [sp, #12]
 800436e:	9102      	str	r1, [sp, #8]
 8004370:	9201      	str	r2, [sp, #4]
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	464b      	mov	r3, r9
 8004376:	4642      	mov	r2, r8
 8004378:	4671      	mov	r1, lr
 800437a:	4660      	mov	r0, ip
 800437c:	f000 f974 	bl	8004668 <hci_le_enhanced_connection_complete_event>
                                            rp0->Conn_Interval,
                                            rp0->Conn_Latency,
                                            rp0->Supervision_Timeout,
                                            rp0->Master_Clock_Accuracy);

  return status;
 8004380:	7bfb      	ldrb	r3, [r7, #15]
}
 8004382:	4618      	mov	r0, r3
 8004384:	3714      	adds	r7, #20
 8004386:	46bd      	mov	sp, r7
 8004388:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800438c <hci_le_direct_advertising_report_event_process>:
 * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
 * @retval None
 */

tBleStatus hci_le_direct_advertising_report_event_process(uint8_t *buffer_in)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b0a6      	sub	sp, #152	; 0x98
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8004394:	2300      	movs	r3, #0
 8004396:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
  /* Input params */
  hci_le_direct_advertising_report_event_rp0 *rp0 = (hci_le_direct_advertising_report_event_rp0 *)buffer_in;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint8_t size = 1;
 80043a0:	2301      	movs	r3, #1
 80043a2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  int i;
  Direct_Advertising_Report_t Direct_Advertising_Report[HCI_MAX_PAYLOAD_SIZE/sizeof(Direct_Advertising_Report_t)];
  for (i = 0; i < rp0->Num_Reports; i++) {
 80043a6:	2300      	movs	r3, #0
 80043a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80043ac:	e089      	b.n	80044c2 <hci_le_direct_advertising_report_event_process+0x136>
    Direct_Advertising_Report[i].Event_Type = rp0->Direct_Advertising_Report[i].Event_Type;
 80043ae:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80043b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043b6:	011b      	lsls	r3, r3, #4
 80043b8:	4413      	add	r3, r2
 80043ba:	3301      	adds	r3, #1
 80043bc:	781a      	ldrb	r2, [r3, #0]
 80043be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043c2:	011b      	lsls	r3, r3, #4
 80043c4:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80043c8:	440b      	add	r3, r1
 80043ca:	3b90      	subs	r3, #144	; 0x90
 80043cc:	701a      	strb	r2, [r3, #0]
    size += 1;
 80043ce:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80043d2:	3301      	adds	r3, #1
 80043d4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].Address_Type = rp0->Direct_Advertising_Report[i].Address_Type;
 80043d8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80043dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043e0:	011b      	lsls	r3, r3, #4
 80043e2:	4413      	add	r3, r2
 80043e4:	3302      	adds	r3, #2
 80043e6:	781a      	ldrb	r2, [r3, #0]
 80043e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043ec:	011b      	lsls	r3, r3, #4
 80043ee:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80043f2:	440b      	add	r3, r1
 80043f4:	3b8f      	subs	r3, #143	; 0x8f
 80043f6:	701a      	strb	r2, [r3, #0]
    size += 1;
 80043f8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80043fc:	3301      	adds	r3, #1
 80043fe:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Address, (const void *) rp0->Direct_Advertising_Report[i].Address, 6);
 8004402:	f107 0208 	add.w	r2, r7, #8
 8004406:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800440a:	011b      	lsls	r3, r3, #4
 800440c:	4413      	add	r3, r2
 800440e:	1c98      	adds	r0, r3, #2
 8004410:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004414:	011b      	lsls	r3, r3, #4
 8004416:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800441a:	4413      	add	r3, r2
 800441c:	3303      	adds	r3, #3
 800441e:	2206      	movs	r2, #6
 8004420:	4619      	mov	r1, r3
 8004422:	f001 fba7 	bl	8005b74 <memcpy>
    size += 6;
 8004426:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800442a:	3306      	adds	r3, #6
 800442c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].Direct_Address_Type = rp0->Direct_Advertising_Report[i].Direct_Address_Type;
 8004430:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004434:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004438:	011b      	lsls	r3, r3, #4
 800443a:	4413      	add	r3, r2
 800443c:	3309      	adds	r3, #9
 800443e:	781a      	ldrb	r2, [r3, #0]
 8004440:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800444a:	440b      	add	r3, r1
 800444c:	3b88      	subs	r3, #136	; 0x88
 800444e:	701a      	strb	r2, [r3, #0]
    size += 1;
 8004450:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8004454:	3301      	adds	r3, #1
 8004456:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    BLUENRG_memcpy((void *) Direct_Advertising_Report[i].Direct_Address, (const void *) rp0->Direct_Advertising_Report[i].Direct_Address, 6);
 800445a:	f107 0208 	add.w	r2, r7, #8
 800445e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	3308      	adds	r3, #8
 8004466:	4413      	add	r3, r2
 8004468:	1c58      	adds	r0, r3, #1
 800446a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800446e:	011b      	lsls	r3, r3, #4
 8004470:	3308      	adds	r3, #8
 8004472:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004476:	4413      	add	r3, r2
 8004478:	3302      	adds	r3, #2
 800447a:	2206      	movs	r2, #6
 800447c:	4619      	mov	r1, r3
 800447e:	f001 fb79 	bl	8005b74 <memcpy>
    size += 6;
 8004482:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8004486:	3306      	adds	r3, #6
 8004488:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    Direct_Advertising_Report[i].RSSI = rp0->Direct_Advertising_Report[i].RSSI;
 800448c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004490:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004494:	011b      	lsls	r3, r3, #4
 8004496:	4413      	add	r3, r2
 8004498:	3310      	adds	r3, #16
 800449a:	f993 2000 	ldrsb.w	r2, [r3]
 800449e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044a2:	011b      	lsls	r3, r3, #4
 80044a4:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80044a8:	440b      	add	r3, r1
 80044aa:	3b81      	subs	r3, #129	; 0x81
 80044ac:	701a      	strb	r2, [r3, #0]
    size += 1;
 80044ae:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80044b2:	3301      	adds	r3, #1
 80044b4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  for (i = 0; i < rp0->Num_Reports; i++) {
 80044b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044bc:	3301      	adds	r3, #1
 80044be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	461a      	mov	r2, r3
 80044ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80044ce:	4293      	cmp	r3, r2
 80044d0:	f6ff af6d 	blt.w	80043ae <hci_le_direct_advertising_report_event_process+0x22>
  }
  hci_le_direct_advertising_report_event(rp0->Num_Reports,
 80044d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	f107 0208 	add.w	r2, r7, #8
 80044de:	4611      	mov	r1, r2
 80044e0:	4618      	mov	r0, r3
 80044e2:	f000 f8d5 	bl	8004690 <hci_le_direct_advertising_report_event>
                                         Direct_Advertising_Report);

  return status;
 80044e6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3798      	adds	r7, #152	; 0x98
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <hci_encryption_change_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_change_event(uint8_t Status,
                                 uint16_t Connection_Handle,
                                 uint8_t Encryption_Enabled))
{
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	4603      	mov	r3, r0
 80044fa:	71fb      	strb	r3, [r7, #7]
 80044fc:	460b      	mov	r3, r1
 80044fe:	80bb      	strh	r3, [r7, #4]
 8004500:	4613      	mov	r3, r2
 8004502:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_change_event\r\n");
}
 8004504:	bf00      	nop
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450e:	4770      	bx	lr

08004510 <hci_read_remote_version_information_complete_event>:
WEAK_FUNCTION(void hci_read_remote_version_information_complete_event(uint8_t Status,
                                                        uint16_t Connection_Handle,
                                                        uint8_t Version,
                                                        uint16_t Manufacturer_Name,
                                                        uint16_t Subversion))
{
 8004510:	b490      	push	{r4, r7}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	4604      	mov	r4, r0
 8004518:	4608      	mov	r0, r1
 800451a:	4611      	mov	r1, r2
 800451c:	461a      	mov	r2, r3
 800451e:	4623      	mov	r3, r4
 8004520:	71fb      	strb	r3, [r7, #7]
 8004522:	4603      	mov	r3, r0
 8004524:	80bb      	strh	r3, [r7, #4]
 8004526:	460b      	mov	r3, r1
 8004528:	71bb      	strb	r3, [r7, #6]
 800452a:	4613      	mov	r3, r2
 800452c:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_read_remote_version_information_complete_event\r\n");
}
 800452e:	bf00      	nop
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bc90      	pop	{r4, r7}
 8004536:	4770      	bx	lr

08004538 <hci_hardware_error_event>:
  - 0x02: Timer overrun error
  - 0x03: Internal queue overflow error
  * @retval None
*/
WEAK_FUNCTION(void hci_hardware_error_event(uint8_t Hardware_Code))
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	4603      	mov	r3, r0
 8004540:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_hardware_error_event\r\n");
}
 8004542:	bf00      	nop
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <hci_number_of_completed_packets_event>:
  * @param Handle_Packets_Pair_Entry See @ref Handle_Packets_Pair_Entry_t
  * @retval None
*/
WEAK_FUNCTION(void hci_number_of_completed_packets_event(uint8_t Number_of_Handles,
                                           Handle_Packets_Pair_Entry_t Handle_Packets_Pair_Entry[]))
{
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	4603      	mov	r3, r0
 8004556:	6039      	str	r1, [r7, #0]
 8004558:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_number_of_completed_packets_event\r\n");
}
 800455a:	bf00      	nop
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr

08004566 <hci_data_buffer_overflow_event>:
  * Values:
  - 0x01: ACL Buffer Overflow
  * @retval None
*/
WEAK_FUNCTION(void hci_data_buffer_overflow_event(uint8_t Link_Type))
{
 8004566:	b480      	push	{r7}
 8004568:	b083      	sub	sp, #12
 800456a:	af00      	add	r7, sp, #0
 800456c:	4603      	mov	r3, r0
 800456e:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_data_buffer_overflow_event\r\n");
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <hci_encryption_key_refresh_complete_event>:
  - 0x0000 ... 0x0EFF
  * @retval None
*/
WEAK_FUNCTION(void hci_encryption_key_refresh_complete_event(uint8_t Status,
                                               uint16_t Connection_Handle))
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	4603      	mov	r3, r0
 8004584:	460a      	mov	r2, r1
 8004586:	71fb      	strb	r3, [r7, #7]
 8004588:	4613      	mov	r3, r2
 800458a:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_encryption_key_refresh_complete_event\r\n");
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <hci_le_advertising_report_event>:
  * @param Advertising_Report See @ref Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_advertising_report_event(uint8_t Num_Reports,
                                     Advertising_Report_t Advertising_Report[]))
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	4603      	mov	r3, r0
 80045a0:	6039      	str	r1, [r7, #0]
 80045a2:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_advertising_report_event\r\n");
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <hci_le_connection_update_complete_event>:
WEAK_FUNCTION(void hci_le_connection_update_complete_event(uint8_t Status,
                                             uint16_t Connection_Handle,
                                             uint16_t Conn_Interval,
                                             uint16_t Conn_Latency,
                                             uint16_t Supervision_Timeout))
{
 80045b0:	b490      	push	{r4, r7}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	4604      	mov	r4, r0
 80045b8:	4608      	mov	r0, r1
 80045ba:	4611      	mov	r1, r2
 80045bc:	461a      	mov	r2, r3
 80045be:	4623      	mov	r3, r4
 80045c0:	71fb      	strb	r3, [r7, #7]
 80045c2:	4603      	mov	r3, r0
 80045c4:	80bb      	strh	r3, [r7, #4]
 80045c6:	460b      	mov	r3, r1
 80045c8:	807b      	strh	r3, [r7, #2]
 80045ca:	4613      	mov	r3, r2
 80045cc:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_connection_update_complete_event\r\n");
}
 80045ce:	bf00      	nop
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bc90      	pop	{r4, r7}
 80045d6:	4770      	bx	lr

080045d8 <hci_le_read_remote_used_features_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_remote_used_features_complete_event(uint8_t Status,
                                                     uint16_t Connection_Handle,
                                                     uint8_t LE_Features[8]))
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	4603      	mov	r3, r0
 80045e0:	603a      	str	r2, [r7, #0]
 80045e2:	71fb      	strb	r3, [r7, #7]
 80045e4:	460b      	mov	r3, r1
 80045e6:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_remote_used_features_complete_event\r\n");
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <hci_le_long_term_key_request_event>:
  * @retval None
*/
WEAK_FUNCTION(void hci_le_long_term_key_request_event(uint16_t Connection_Handle,
                                        uint8_t Random_Number[8],
                                        uint16_t Encrypted_Diversifier))
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	4603      	mov	r3, r0
 80045fc:	6039      	str	r1, [r7, #0]
 80045fe:	80fb      	strh	r3, [r7, #6]
 8004600:	4613      	mov	r3, r2
 8004602:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_long_term_key_request_event\r\n");
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <hci_le_data_length_change_event>:
WEAK_FUNCTION(void hci_le_data_length_change_event(uint16_t Connection_Handle,
                                     uint16_t MaxTxOctets,
                                     uint16_t MaxTxTime,
                                     uint16_t MaxRxOctets,
                                     uint16_t MaxRxTime))
{
 8004610:	b490      	push	{r4, r7}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	4604      	mov	r4, r0
 8004618:	4608      	mov	r0, r1
 800461a:	4611      	mov	r1, r2
 800461c:	461a      	mov	r2, r3
 800461e:	4623      	mov	r3, r4
 8004620:	80fb      	strh	r3, [r7, #6]
 8004622:	4603      	mov	r3, r0
 8004624:	80bb      	strh	r3, [r7, #4]
 8004626:	460b      	mov	r3, r1
 8004628:	807b      	strh	r3, [r7, #2]
 800462a:	4613      	mov	r3, r2
 800462c:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_data_length_change_event\r\n");
}
 800462e:	bf00      	nop
 8004630:	3708      	adds	r7, #8
 8004632:	46bd      	mov	sp, r7
 8004634:	bc90      	pop	{r4, r7}
 8004636:	4770      	bx	lr

08004638 <hci_le_read_local_p256_public_key_complete_event>:
  * @param Local_P256_Public_Key Local P-256 public key.
  * @retval None
*/
WEAK_FUNCTION(void hci_le_read_local_p256_public_key_complete_event(uint8_t Status,
                                                      uint8_t Local_P256_Public_Key[64]))
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	4603      	mov	r3, r0
 8004640:	6039      	str	r1, [r7, #0]
 8004642:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_read_local_p256_public_key_complete_event\r\n");
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <hci_le_generate_dhkey_complete_event>:
  * @param DHKey Diffie Hellman Key
  * @retval None
*/
WEAK_FUNCTION(void hci_le_generate_dhkey_complete_event(uint8_t Status,
                                          uint8_t DHKey[32]))
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	4603      	mov	r3, r0
 8004658:	6039      	str	r1, [r7, #0]
 800465a:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_generate_dhkey_complete_event\r\n");
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <hci_le_enhanced_connection_complete_event>:
                                               uint8_t Peer_Resolvable_Private_Address[6],
                                               uint16_t Conn_Interval,
                                               uint16_t Conn_Latency,
                                               uint16_t Supervision_Timeout,
                                               uint8_t Master_Clock_Accuracy))
{
 8004668:	b490      	push	{r4, r7}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	4604      	mov	r4, r0
 8004670:	4608      	mov	r0, r1
 8004672:	4611      	mov	r1, r2
 8004674:	461a      	mov	r2, r3
 8004676:	4623      	mov	r3, r4
 8004678:	71fb      	strb	r3, [r7, #7]
 800467a:	4603      	mov	r3, r0
 800467c:	80bb      	strh	r3, [r7, #4]
 800467e:	460b      	mov	r3, r1
 8004680:	71bb      	strb	r3, [r7, #6]
 8004682:	4613      	mov	r3, r2
 8004684:	70fb      	strb	r3, [r7, #3]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_enhanced_connection_complete_event\r\n");
}
 8004686:	bf00      	nop
 8004688:	3708      	adds	r7, #8
 800468a:	46bd      	mov	sp, r7
 800468c:	bc90      	pop	{r4, r7}
 800468e:	4770      	bx	lr

08004690 <hci_le_direct_advertising_report_event>:
  * @param Direct_Advertising_Report See @ref Direct_Advertising_Report_t
  * @retval None
*/
WEAK_FUNCTION(void hci_le_direct_advertising_report_event(uint8_t Num_Reports,
                                            Direct_Advertising_Report_t Direct_Advertising_Report[]))
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	4603      	mov	r3, r0
 8004698:	6039      	str	r1, [r7, #0]
 800469a:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("hci_le_direct_advertising_report_event\r\n");
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <aci_gap_limited_discoverable_event>:
  * @brief This event is generated by the controller when the limited discoverable mode ends due to
timeout. The timeout is 180 seconds.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_limited_discoverable_event(void))
{
 80046a8:	b480      	push	{r7}
 80046aa:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_limited_discoverable_event\r\n");
}
 80046ac:	bf00      	nop
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <aci_gap_pairing_complete_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pairing_complete_event(uint16_t Connection_Handle,
                                    uint8_t Status,
                                    uint8_t Reason))
{
 80046b6:	b480      	push	{r7}
 80046b8:	b083      	sub	sp, #12
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	4603      	mov	r3, r0
 80046be:	80fb      	strh	r3, [r7, #6]
 80046c0:	460b      	mov	r3, r1
 80046c2:	717b      	strb	r3, [r7, #5]
 80046c4:	4613      	mov	r3, r2
 80046c6:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pairing_complete_event\r\n");
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <aci_gap_pass_key_req_event>:
@ref aci_gap_pass_key_resp command.
  * @param Connection_Handle Connection handle for which the passkey has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_pass_key_req_event(uint16_t Connection_Handle))
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	4603      	mov	r3, r0
 80046dc:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_pass_key_req_event\r\n");
}
 80046de:	bf00      	nop
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr

080046ea <aci_gap_authorization_req_event>:
@ref aci_gap_authorization_resp command should be used to respond by the application.
  * @param Connection_Handle Connection handle for which authorization has been requested.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_authorization_req_event(uint16_t Connection_Handle))
{
 80046ea:	b480      	push	{r7}
 80046ec:	b083      	sub	sp, #12
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	4603      	mov	r3, r0
 80046f2:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_authorization_req_event\r\n");
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <aci_gap_slave_security_initiated_event>:
/**
  * @brief This event is generated when the slave security request is successfully sent to the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_slave_security_initiated_event(void))
{
 8004700:	b480      	push	{r7}
 8004702:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_slave_security_initiated_event\r\n");
}
 8004704:	bf00      	nop
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <aci_gap_bond_lost_event>:
received, the upper layer has to issue the command @ref aci_gap_allow_rebond in order to
allow the slave to continue the pairing process with the master.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_bond_lost_event(void))
{
 800470e:	b480      	push	{r7}
 8004710:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_bond_lost_event\r\n");
}
 8004712:	bf00      	nop
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <aci_gap_proc_complete_event>:
*/
WEAK_FUNCTION(void aci_gap_proc_complete_event(uint8_t Procedure_Code,
                                 uint8_t Status,
                                 uint8_t Data_Length,
                                 uint8_t Data[]))
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	603b      	str	r3, [r7, #0]
 8004724:	4603      	mov	r3, r0
 8004726:	71fb      	strb	r3, [r7, #7]
 8004728:	460b      	mov	r3, r1
 800472a:	71bb      	strb	r3, [r7, #6]
 800472c:	4613      	mov	r3, r2
 800472e:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_proc_complete_event\r\n");
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <aci_gap_addr_not_resolved_event>:
  * @param Connection_Handle Connection handle for which the private address could not be
resolved with any of the stored IRK's.
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_addr_not_resolved_event(uint16_t Connection_Handle))
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	4603      	mov	r3, r0
 8004744:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_addr_not_resolved_event\r\n");
}
 8004746:	bf00      	nop
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <aci_gap_numeric_comparison_value_event>:
  * @param Numeric_Value 
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_numeric_comparison_value_event(uint16_t Connection_Handle,
                                            uint32_t Numeric_Value))
{
 8004752:	b480      	push	{r7}
 8004754:	b083      	sub	sp, #12
 8004756:	af00      	add	r7, sp, #0
 8004758:	4603      	mov	r3, r0
 800475a:	6039      	str	r1, [r7, #0]
 800475c:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_numeric_comparison_value_event\r\n");
}
 800475e:	bf00      	nop
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <aci_gap_keypress_notification_event>:
  * @param Notification_Type Type of Keypress input notified/signaled by peer device (having Keyboard only I/O capabilities
  * @retval None
*/
WEAK_FUNCTION(void aci_gap_keypress_notification_event(uint16_t Connection_Handle,
                                         uint8_t Notification_Type))
{
 800476a:	b480      	push	{r7}
 800476c:	b083      	sub	sp, #12
 800476e:	af00      	add	r7, sp, #0
 8004770:	4603      	mov	r3, r0
 8004772:	460a      	mov	r2, r1
 8004774:	80fb      	strh	r3, [r7, #6]
 8004776:	4613      	mov	r3, r2
 8004778:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gap_keypress_notification_event\r\n");
}
 800477a:	bf00      	nop
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <aci_gatt_proc_timeout_event>:
seconds). This is a critical event that should not happen during normal operating conditions. It is an indication of either a major disruption in the communication link or a mistake in the application which does not provide a reply to GATT procedures. After this event, the GATT channel is closed and no more GATT communication can be performed. The applications is exptected to issue an @ref aci_gap_terminate to disconnect from the peer device. It is important to leave an 100 ms blank window before sending the @ref aci_gap_terminate, since immediately after this event, system could save important information in non volatile memory.
  * @param Connection_Handle Connection handle on which the GATT procedure has timed out
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_timeout_event(uint16_t Connection_Handle))
{
 8004786:	b480      	push	{r7}
 8004788:	b083      	sub	sp, #12
 800478a:	af00      	add	r7, sp, #0
 800478c:	4603      	mov	r3, r0
 800478e:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_timeout_event\r\n");
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <aci_att_exchange_mtu_resp_event>:
  * @param Server_RX_MTU ATT_MTU value agreed between server and client
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exchange_mtu_resp_event(uint16_t Connection_Handle,
                                     uint16_t Server_RX_MTU))
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	4603      	mov	r3, r0
 80047a4:	460a      	mov	r2, r1
 80047a6:	80fb      	strh	r3, [r7, #6]
 80047a8:	4613      	mov	r3, r2
 80047aa:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exchange_mtu_resp_event\r\n");
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <aci_att_find_info_resp_event>:
*/
WEAK_FUNCTION(void aci_att_find_info_resp_event(uint16_t Connection_Handle,
                                  uint8_t Format,
                                  uint8_t Event_Data_Length,
                                  uint8_t Handle_UUID_Pair[]))
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	603b      	str	r3, [r7, #0]
 80047c0:	4603      	mov	r3, r0
 80047c2:	80fb      	strh	r3, [r7, #6]
 80047c4:	460b      	mov	r3, r1
 80047c6:	717b      	strb	r3, [r7, #5]
 80047c8:	4613      	mov	r3, r2
 80047ca:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_info_resp_event\r\n");
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <aci_att_find_by_type_value_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_find_by_type_value_resp_event(uint16_t Connection_Handle,
                                           uint8_t Num_of_Handle_Pair,
                                           Attribute_Group_Handle_Pair_t Attribute_Group_Handle_Pair[]))
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	4603      	mov	r3, r0
 80047e0:	603a      	str	r2, [r7, #0]
 80047e2:	80fb      	strh	r3, [r7, #6]
 80047e4:	460b      	mov	r3, r1
 80047e6:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_find_by_type_value_resp_event\r\n");
}
 80047e8:	bf00      	nop
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <aci_att_read_by_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_type_resp_event(uint16_t Connection_Handle,
                                     uint8_t Handle_Value_Pair_Length,
                                     uint8_t Data_Length,
                                     uint8_t Handle_Value_Pair_Data[]))
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	603b      	str	r3, [r7, #0]
 80047fc:	4603      	mov	r3, r0
 80047fe:	80fb      	strh	r3, [r7, #6]
 8004800:	460b      	mov	r3, r1
 8004802:	717b      	strb	r3, [r7, #5]
 8004804:	4613      	mov	r3, r2
 8004806:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_type_resp_event\r\n");
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <aci_att_read_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_resp_event(uint16_t Connection_Handle,
                             uint8_t Event_Data_Length,
                             uint8_t Attribute_Value[]))
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	4603      	mov	r3, r0
 800481c:	603a      	str	r2, [r7, #0]
 800481e:	80fb      	strh	r3, [r7, #6]
 8004820:	460b      	mov	r3, r1
 8004822:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_resp_event\r\n");
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <aci_att_read_blob_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_blob_resp_event(uint16_t Connection_Handle,
                                  uint8_t Event_Data_Length,
                                  uint8_t Attribute_Value[]))
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	4603      	mov	r3, r0
 8004838:	603a      	str	r2, [r7, #0]
 800483a:	80fb      	strh	r3, [r7, #6]
 800483c:	460b      	mov	r3, r1
 800483e:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_blob_resp_event\r\n");
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <aci_att_read_multiple_resp_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_att_read_multiple_resp_event(uint16_t Connection_Handle,
                                      uint8_t Event_Data_Length,
                                      uint8_t Set_Of_Values[]))
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	4603      	mov	r3, r0
 8004854:	603a      	str	r2, [r7, #0]
 8004856:	80fb      	strh	r3, [r7, #6]
 8004858:	460b      	mov	r3, r1
 800485a:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_multiple_resp_event\r\n");
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <aci_att_read_by_group_type_resp_event>:
*/
WEAK_FUNCTION(void aci_att_read_by_group_type_resp_event(uint16_t Connection_Handle,
                                           uint8_t Attribute_Data_Length,
                                           uint8_t Data_Length,
                                           uint8_t Attribute_Data_List[]))
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	603b      	str	r3, [r7, #0]
 8004870:	4603      	mov	r3, r0
 8004872:	80fb      	strh	r3, [r7, #6]
 8004874:	460b      	mov	r3, r1
 8004876:	717b      	strb	r3, [r7, #5]
 8004878:	4613      	mov	r3, r2
 800487a:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_read_by_group_type_resp_event\r\n");
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <aci_att_prepare_write_resp_event>:
WEAK_FUNCTION(void aci_att_prepare_write_resp_event(uint16_t Connection_Handle,
                                      uint16_t Attribute_Handle,
                                      uint16_t Offset,
                                      uint8_t Part_Attribute_Value_Length,
                                      uint8_t Part_Attribute_Value[]))
{
 8004888:	b490      	push	{r4, r7}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	4604      	mov	r4, r0
 8004890:	4608      	mov	r0, r1
 8004892:	4611      	mov	r1, r2
 8004894:	461a      	mov	r2, r3
 8004896:	4623      	mov	r3, r4
 8004898:	80fb      	strh	r3, [r7, #6]
 800489a:	4603      	mov	r3, r0
 800489c:	80bb      	strh	r3, [r7, #4]
 800489e:	460b      	mov	r3, r1
 80048a0:	807b      	strh	r3, [r7, #2]
 80048a2:	4613      	mov	r3, r2
 80048a4:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_prepare_write_resp_event\r\n");
}
 80048a6:	bf00      	nop
 80048a8:	3708      	adds	r7, #8
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bc90      	pop	{r4, r7}
 80048ae:	4770      	bx	lr

080048b0 <aci_att_exec_write_resp_event>:
  * @brief This event is generated in response to an Execute Write Request.
  * @param Connection_Handle Connection handle related to the response
  * @retval None
*/
WEAK_FUNCTION(void aci_att_exec_write_resp_event(uint16_t Connection_Handle))
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	4603      	mov	r3, r0
 80048b8:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_att_exec_write_resp_event\r\n");
}
 80048ba:	bf00      	nop
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr

080048c6 <aci_gatt_indication_event>:
*/
WEAK_FUNCTION(void aci_gatt_indication_event(uint16_t Connection_Handle,
                               uint16_t Attribute_Handle,
                               uint8_t Attribute_Value_Length,
                               uint8_t Attribute_Value[]))
{
 80048c6:	b480      	push	{r7}
 80048c8:	b085      	sub	sp, #20
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	607b      	str	r3, [r7, #4]
 80048ce:	4603      	mov	r3, r0
 80048d0:	81fb      	strh	r3, [r7, #14]
 80048d2:	460b      	mov	r3, r1
 80048d4:	81bb      	strh	r3, [r7, #12]
 80048d6:	4613      	mov	r3, r2
 80048d8:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_indication_event\r\n");
}
 80048da:	bf00      	nop
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <aci_gatt_proc_complete_event>:
  - 0xFC: Flash erase failed
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_proc_complete_event(uint16_t Connection_Handle,
                                  uint8_t Error_Code))
{
 80048e6:	b480      	push	{r7}
 80048e8:	b083      	sub	sp, #12
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	4603      	mov	r3, r0
 80048ee:	460a      	mov	r2, r1
 80048f0:	80fb      	strh	r3, [r7, #6]
 80048f2:	4613      	mov	r3, r2
 80048f4:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_proc_complete_event\r\n");
}
 80048f6:	bf00      	nop
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <aci_gatt_error_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_error_resp_event(uint16_t Connection_Handle,
                               uint8_t Req_Opcode,
                               uint16_t Attribute_Handle,
                               uint8_t Error_Code))
{
 8004902:	b490      	push	{r4, r7}
 8004904:	b082      	sub	sp, #8
 8004906:	af00      	add	r7, sp, #0
 8004908:	4604      	mov	r4, r0
 800490a:	4608      	mov	r0, r1
 800490c:	4611      	mov	r1, r2
 800490e:	461a      	mov	r2, r3
 8004910:	4623      	mov	r3, r4
 8004912:	80fb      	strh	r3, [r7, #6]
 8004914:	4603      	mov	r3, r0
 8004916:	717b      	strb	r3, [r7, #5]
 8004918:	460b      	mov	r3, r1
 800491a:	807b      	strh	r3, [r7, #2]
 800491c:	4613      	mov	r3, r2
 800491e:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_error_resp_event\r\n");
}
 8004920:	bf00      	nop
 8004922:	3708      	adds	r7, #8
 8004924:	46bd      	mov	sp, r7
 8004926:	bc90      	pop	{r4, r7}
 8004928:	4770      	bx	lr

0800492a <aci_gatt_disc_read_char_by_uuid_resp_event>:
*/
WEAK_FUNCTION(void aci_gatt_disc_read_char_by_uuid_resp_event(uint16_t Connection_Handle,
                                                uint16_t Attribute_Handle,
                                                uint8_t Attribute_Value_Length,
                                                uint8_t Attribute_Value[]))
{
 800492a:	b480      	push	{r7}
 800492c:	b085      	sub	sp, #20
 800492e:	af00      	add	r7, sp, #0
 8004930:	607b      	str	r3, [r7, #4]
 8004932:	4603      	mov	r3, r0
 8004934:	81fb      	strh	r3, [r7, #14]
 8004936:	460b      	mov	r3, r1
 8004938:	81bb      	strh	r3, [r7, #12]
 800493a:	4613      	mov	r3, r2
 800493c:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_disc_read_char_by_uuid_resp_event\r\n");
}
 800493e:	bf00      	nop
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr

0800494a <aci_gatt_write_permit_req_event>:
*/
WEAK_FUNCTION(void aci_gatt_write_permit_req_event(uint16_t Connection_Handle,
                                     uint16_t Attribute_Handle,
                                     uint8_t Data_Length,
                                     uint8_t Data[]))
{
 800494a:	b480      	push	{r7}
 800494c:	b085      	sub	sp, #20
 800494e:	af00      	add	r7, sp, #0
 8004950:	607b      	str	r3, [r7, #4]
 8004952:	4603      	mov	r3, r0
 8004954:	81fb      	strh	r3, [r7, #14]
 8004956:	460b      	mov	r3, r1
 8004958:	81bb      	strh	r3, [r7, #12]
 800495a:	4613      	mov	r3, r2
 800495c:	72fb      	strb	r3, [r7, #11]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_write_permit_req_event\r\n");
}
 800495e:	bf00      	nop
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <aci_gatt_read_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_permit_req_event(uint16_t Connection_Handle,
                                    uint16_t Attribute_Handle,
                                    uint16_t Offset))
{
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
 8004970:	4603      	mov	r3, r0
 8004972:	80fb      	strh	r3, [r7, #6]
 8004974:	460b      	mov	r3, r1
 8004976:	80bb      	strh	r3, [r7, #4]
 8004978:	4613      	mov	r3, r2
 800497a:	807b      	strh	r3, [r7, #2]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_permit_req_event\r\n");
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <aci_gatt_read_multi_permit_req_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_read_multi_permit_req_event(uint16_t Connection_Handle,
                                          uint8_t Number_of_Handles,
                                          Handle_Item_t Handle_Item[]))
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	4603      	mov	r3, r0
 8004990:	603a      	str	r2, [r7, #0]
 8004992:	80fb      	strh	r3, [r7, #6]
 8004994:	460b      	mov	r3, r1
 8004996:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_read_multi_permit_req_event\r\n");
}
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <aci_gatt_tx_pool_available_event>:
  * @param Available_Buffers Not used.
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_tx_pool_available_event(uint16_t Connection_Handle,
                                      uint16_t Available_Buffers))
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	4603      	mov	r3, r0
 80049ac:	460a      	mov	r2, r1
 80049ae:	80fb      	strh	r3, [r7, #6]
 80049b0:	4613      	mov	r3, r2
 80049b2:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_tx_pool_available_event\r\n");
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <aci_gatt_server_confirmation_event>:
  * @brief This event is generated when the client has sent the confirmation to a previously sent indication
  * @param Connection_Handle Connection handle related to the event
  * @retval None
*/
WEAK_FUNCTION(void aci_gatt_server_confirmation_event(uint16_t Connection_Handle))
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	4603      	mov	r3, r0
 80049c8:	80fb      	strh	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_server_confirmation_event\r\n");
}
 80049ca:	bf00      	nop
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <aci_gatt_prepare_write_permit_req_event>:
WEAK_FUNCTION(void aci_gatt_prepare_write_permit_req_event(uint16_t Connection_Handle,
                                             uint16_t Attribute_Handle,
                                             uint16_t Offset,
                                             uint8_t Data_Length,
                                             uint8_t Data[]))
{
 80049d6:	b490      	push	{r4, r7}
 80049d8:	b082      	sub	sp, #8
 80049da:	af00      	add	r7, sp, #0
 80049dc:	4604      	mov	r4, r0
 80049de:	4608      	mov	r0, r1
 80049e0:	4611      	mov	r1, r2
 80049e2:	461a      	mov	r2, r3
 80049e4:	4623      	mov	r3, r4
 80049e6:	80fb      	strh	r3, [r7, #6]
 80049e8:	4603      	mov	r3, r0
 80049ea:	80bb      	strh	r3, [r7, #4]
 80049ec:	460b      	mov	r3, r1
 80049ee:	807b      	strh	r3, [r7, #2]
 80049f0:	4613      	mov	r3, r2
 80049f2:	707b      	strb	r3, [r7, #1]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_gatt_prepare_write_permit_req_event\r\n");
}
 80049f4:	bf00      	nop
 80049f6:	3708      	adds	r7, #8
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bc90      	pop	{r4, r7}
 80049fc:	4770      	bx	lr

080049fe <aci_l2cap_connection_update_resp_event>:
  * @param Result 
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_connection_update_resp_event(uint16_t Connection_Handle,
                                            uint16_t Result))
{
 80049fe:	b480      	push	{r7}
 8004a00:	b083      	sub	sp, #12
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	4603      	mov	r3, r0
 8004a06:	460a      	mov	r2, r1
 8004a08:	80fb      	strh	r3, [r7, #6]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	80bb      	strh	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_resp_event\r\n");
}
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <aci_l2cap_proc_timeout_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_l2cap_proc_timeout_event(uint16_t Connection_Handle,
                                  uint8_t Data_Length,
                                  uint8_t Data[]))
{
 8004a1a:	b480      	push	{r7}
 8004a1c:	b083      	sub	sp, #12
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	4603      	mov	r3, r0
 8004a22:	603a      	str	r2, [r7, #0]
 8004a24:	80fb      	strh	r3, [r7, #6]
 8004a26:	460b      	mov	r3, r1
 8004a28:	717b      	strb	r3, [r7, #5]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_proc_timeout_event\r\n");
}
 8004a2a:	bf00      	nop
 8004a2c:	370c      	adds	r7, #12
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr

08004a36 <aci_l2cap_connection_update_req_event>:
                                           uint16_t L2CAP_Length,
                                           uint16_t Interval_Min,
                                           uint16_t Interval_Max,
                                           uint16_t Slave_Latency,
                                           uint16_t Timeout_Multiplier))
{
 8004a36:	b490      	push	{r4, r7}
 8004a38:	b082      	sub	sp, #8
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	4604      	mov	r4, r0
 8004a3e:	4608      	mov	r0, r1
 8004a40:	4611      	mov	r1, r2
 8004a42:	461a      	mov	r2, r3
 8004a44:	4623      	mov	r3, r4
 8004a46:	80fb      	strh	r3, [r7, #6]
 8004a48:	4603      	mov	r3, r0
 8004a4a:	717b      	strb	r3, [r7, #5]
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	807b      	strh	r3, [r7, #2]
 8004a50:	4613      	mov	r3, r2
 8004a52:	803b      	strh	r3, [r7, #0]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_connection_update_req_event\r\n");
}
 8004a54:	bf00      	nop
 8004a56:	3708      	adds	r7, #8
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bc90      	pop	{r4, r7}
 8004a5c:	4770      	bx	lr

08004a5e <aci_l2cap_command_reject_event>:
WEAK_FUNCTION(void aci_l2cap_command_reject_event(uint16_t Connection_Handle,
                                    uint8_t Identifier,
                                    uint16_t Reason,
                                    uint8_t Data_Length,
                                    uint8_t Data[]))
{
 8004a5e:	b490      	push	{r4, r7}
 8004a60:	b082      	sub	sp, #8
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	4604      	mov	r4, r0
 8004a66:	4608      	mov	r0, r1
 8004a68:	4611      	mov	r1, r2
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	4623      	mov	r3, r4
 8004a6e:	80fb      	strh	r3, [r7, #6]
 8004a70:	4603      	mov	r3, r0
 8004a72:	717b      	strb	r3, [r7, #5]
 8004a74:	460b      	mov	r3, r1
 8004a76:	807b      	strh	r3, [r7, #2]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	713b      	strb	r3, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_l2cap_command_reject_event\r\n");
}
 8004a7c:	bf00      	nop
 8004a7e:	3708      	adds	r7, #8
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bc90      	pop	{r4, r7}
 8004a84:	4770      	bx	lr

08004a86 <aci_blue_initialized_event>:
  - 0x08: System reset due to crash
  - 0x09: System reset due to ECC error
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_initialized_event(uint8_t Reason_Code))
{
 8004a86:	b480      	push	{r7}
 8004a88:	b083      	sub	sp, #12
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	71fb      	strb	r3, [r7, #7]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_initialized_event Reason_Code=%x\r\n",Reason_Code);
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <aci_blue_events_lost_event>:
  - 0x0040000000000000: ACI_GAP_NUMERIC_COMPARISON_VALUE_EVENT
  - 0x0080000000000000: ACI_GAP_KEYPRESS_NOTIFICATION_EVENT
  * @retval None
*/
WEAK_FUNCTION(void aci_blue_events_lost_event(uint8_t Lost_Events[8]))
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_events_lost_event\r\n");
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <aci_blue_crash_info_event>:
                               uint32_t LR,
                               uint32_t PC,
                               uint32_t xPSR,
                               uint8_t Debug_Data_Length,
                               uint8_t Debug_Data[]))
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60b9      	str	r1, [r7, #8]
 8004ab8:	607a      	str	r2, [r7, #4]
 8004aba:	603b      	str	r3, [r7, #0]
 8004abc:	4603      	mov	r3, r0
 8004abe:	73fb      	strb	r3, [r7, #15]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_blue_crash_info_event\r\n");
}
 8004ac0:	bf00      	nop
 8004ac2:	3714      	adds	r7, #20
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <aci_hal_end_of_radio_activity_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_end_of_radio_activity_event(uint8_t Last_State,
                                         uint8_t Next_State,
                                         uint32_t Next_State_SysTime))
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	603a      	str	r2, [r7, #0]
 8004ad6:	71fb      	strb	r3, [r7, #7]
 8004ad8:	460b      	mov	r3, r1
 8004ada:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_end_of_radio_activity_event\r\n");
}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <aci_hal_scan_req_report_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_scan_req_report_event(int8_t RSSI,
                                   uint8_t Peer_Address_Type,
                                   uint8_t Peer_Address[6]))
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	4603      	mov	r3, r0
 8004af0:	603a      	str	r2, [r7, #0]
 8004af2:	71fb      	strb	r3, [r7, #7]
 8004af4:	460b      	mov	r3, r1
 8004af6:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_scan_req_report_event\r\n");
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <aci_hal_fw_error_event>:
  * @retval None
*/
WEAK_FUNCTION(void aci_hal_fw_error_event(uint8_t FW_Error_Type,
                            uint8_t Data_Length,
                            uint8_t Data[]))
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	603a      	str	r2, [r7, #0]
 8004b0e:	71fb      	strb	r3, [r7, #7]
 8004b10:	460b      	mov	r3, r1
 8004b12:	71bb      	strb	r3, [r7, #6]
  /* NOTE : This function Should not be modified, when needed,
            the callback could be implemented in the user file
   */
  BLUENRG_PRINTF("aci_hal_fw_error_event\r\n");
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <hci_reset>:
    return status;
  }
  return BLE_STATUS_SUCCESS;
}
tBleStatus hci_reset(void)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b088      	sub	sp, #32
 8004b24:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8004b26:	2300      	movs	r3, #0
 8004b28:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004b2a:	f107 0308 	add.w	r3, r7, #8
 8004b2e:	2218      	movs	r2, #24
 8004b30:	2100      	movs	r1, #0
 8004b32:	4618      	mov	r0, r3
 8004b34:	f001 f82c 	bl	8005b90 <memset>
  rq.ogf = 0x03;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004b40:	1dfb      	adds	r3, r7, #7
 8004b42:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004b44:	2301      	movs	r3, #1
 8004b46:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004b48:	f107 0308 	add.w	r3, r7, #8
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f000 fd3c 	bl	80055cc <hci_send_req>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	da01      	bge.n	8004b5e <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 8004b5a:	23ff      	movs	r3, #255	; 0xff
 8004b5c:	e005      	b.n	8004b6a <hci_reset+0x4a>
  if (status) {
 8004b5e:	79fb      	ldrb	r3, [r7, #7]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d001      	beq.n	8004b68 <hci_reset+0x48>
    return status;
 8004b64:	79fb      	ldrb	r3, [r7, #7]
 8004b66:	e000      	b.n	8004b6a <hci_reset+0x4a>
  }
  return BLE_STATUS_SUCCESS;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3720      	adds	r7, #32
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <aci_gap_set_discoverable>:
                                    uint8_t Local_Name[],
                                    uint8_t Service_Uuid_length,
                                    uint8_t Service_Uuid_List[],
                                    uint16_t Slave_Conn_Interval_Min,
                                    uint16_t Slave_Conn_Interval_Max)
{
 8004b72:	b5b0      	push	{r4, r5, r7, lr}
 8004b74:	b0ce      	sub	sp, #312	; 0x138
 8004b76:	af00      	add	r7, sp, #0
 8004b78:	4605      	mov	r5, r0
 8004b7a:	460c      	mov	r4, r1
 8004b7c:	4610      	mov	r0, r2
 8004b7e:	4619      	mov	r1, r3
 8004b80:	1dfb      	adds	r3, r7, #7
 8004b82:	462a      	mov	r2, r5
 8004b84:	701a      	strb	r2, [r3, #0]
 8004b86:	1d3b      	adds	r3, r7, #4
 8004b88:	4622      	mov	r2, r4
 8004b8a:	801a      	strh	r2, [r3, #0]
 8004b8c:	1cbb      	adds	r3, r7, #2
 8004b8e:	4602      	mov	r2, r0
 8004b90:	801a      	strh	r2, [r3, #0]
 8004b92:	1dbb      	adds	r3, r7, #6
 8004b94:	460a      	mov	r2, r1
 8004b96:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 8004b98:	f107 030c 	add.w	r3, r7, #12
 8004b9c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 8004ba0:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8004ba4:	3308      	adds	r3, #8
 8004ba6:	f107 020c 	add.w	r2, r7, #12
 8004baa:	4413      	add	r3, r2
 8004bac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 8004bb0:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8004bb4:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8004bb8:	4413      	add	r3, r2
 8004bba:	3309      	adds	r3, #9
 8004bbc:	f107 020c 	add.w	r2, r7, #12
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8004bc6:	f107 030b 	add.w	r3, r7, #11
 8004bca:	2200      	movs	r2, #0
 8004bcc:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Type = htob(Advertising_Type, 1);
 8004bd4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004bd8:	1dfa      	adds	r2, r7, #7
 8004bda:	7812      	ldrb	r2, [r2, #0]
 8004bdc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004bde:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004be2:	3301      	adds	r3, #1
 8004be4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Interval_Min = htob(Advertising_Interval_Min, 2);
 8004be8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004bec:	1d3a      	adds	r2, r7, #4
 8004bee:	8812      	ldrh	r2, [r2, #0]
 8004bf0:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8004bf4:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004bf8:	3302      	adds	r3, #2
 8004bfa:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Interval_Max = htob(Advertising_Interval_Max, 2);
 8004bfe:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004c02:	1cba      	adds	r2, r7, #2
 8004c04:	8812      	ldrh	r2, [r2, #0]
 8004c06:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8004c0a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004c0e:	3302      	adds	r3, #2
 8004c10:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Own_Address_Type = htob(Own_Address_Type, 1);
 8004c14:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004c18:	1dba      	adds	r2, r7, #6
 8004c1a:	7812      	ldrb	r2, [r2, #0]
 8004c1c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8004c1e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004c22:	3301      	adds	r3, #1
 8004c24:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Advertising_Filter_Policy = htob(Advertising_Filter_Policy, 1);
 8004c28:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004c2c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8004c30:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8004c32:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004c36:	3301      	adds	r3, #1
 8004c38:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Local_Name_Length = htob(Local_Name_Length, 1);
 8004c3c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004c40:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8004c44:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8004c46:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Local_Name, (const void *) Local_Name, Local_Name_Length*sizeof(uint8_t));
 8004c50:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004c54:	3308      	adds	r3, #8
 8004c56:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8004c5a:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 ff88 	bl	8005b74 <memcpy>
    index_input += Local_Name_Length*sizeof(uint8_t);
 8004c64:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8004c68:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Uuid_length = htob(Service_Uuid_length, 1);
 8004c72:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004c76:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8004c7a:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8004c7c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004c80:	3301      	adds	r3, #1
 8004c82:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    BLUENRG_memcpy((void *) &cp1->Service_Uuid_List, (const void *) Service_Uuid_List, Service_Uuid_length*sizeof(uint8_t));
 8004c86:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8004c90:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8004c94:	4618      	mov	r0, r3
 8004c96:	f000 ff6d 	bl	8005b74 <memcpy>
    index_input += Service_Uuid_length*sizeof(uint8_t);
 8004c9a:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8004c9e:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8004ca2:	4413      	add	r3, r2
 8004ca4:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp2->Slave_Conn_Interval_Min = htob(Slave_Conn_Interval_Min, 2);
 8004ca8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cac:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8004cb0:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8004cb2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004cb6:	3302      	adds	r3, #2
 8004cb8:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp2->Slave_Conn_Interval_Max = htob(Slave_Conn_Interval_Max, 2);
 8004cbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cc0:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8004cc4:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8004cc6:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004cca:	3302      	adds	r3, #2
 8004ccc:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004cd0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004cd4:	2218      	movs	r2, #24
 8004cd6:	2100      	movs	r1, #0
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 ff59 	bl	8005b90 <memset>
  rq.ogf = 0x3f;
 8004cde:	233f      	movs	r3, #63	; 0x3f
 8004ce0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8004ce4:	2383      	movs	r3, #131	; 0x83
 8004ce6:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004cea:	f107 030c 	add.w	r3, r7, #12
 8004cee:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004cf2:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004cf6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8004cfa:	f107 030b 	add.w	r3, r7, #11
 8004cfe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8004d02:	2301      	movs	r3, #1
 8004d04:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8004d08:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004d0c:	2100      	movs	r1, #0
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 fc5c 	bl	80055cc <hci_send_req>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	da01      	bge.n	8004d1e <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8004d1a:	23ff      	movs	r3, #255	; 0xff
 8004d1c:	e009      	b.n	8004d32 <aci_gap_set_discoverable+0x1c0>
  if (status) {
 8004d1e:	f107 030b 	add.w	r3, r7, #11
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d003      	beq.n	8004d30 <aci_gap_set_discoverable+0x1be>
    return status;
 8004d28:	f107 030b 	add.w	r3, r7, #11
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	e000      	b.n	8004d32 <aci_gap_set_discoverable+0x1c0>
  }
  return BLE_STATUS_SUCCESS;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bdb0      	pop	{r4, r5, r7, pc}

08004d3c <aci_gap_init>:
                        uint8_t privacy_enabled,
                        uint8_t device_name_char_len,
                        uint16_t *Service_Handle,
                        uint16_t *Dev_Name_Char_Handle,
                        uint16_t *Appearance_Char_Handle)
{
 8004d3c:	b590      	push	{r4, r7, lr}
 8004d3e:	b0cf      	sub	sp, #316	; 0x13c
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	4604      	mov	r4, r0
 8004d44:	4608      	mov	r0, r1
 8004d46:	4611      	mov	r1, r2
 8004d48:	463a      	mov	r2, r7
 8004d4a:	6013      	str	r3, [r2, #0]
 8004d4c:	1dfb      	adds	r3, r7, #7
 8004d4e:	4622      	mov	r2, r4
 8004d50:	701a      	strb	r2, [r3, #0]
 8004d52:	1dbb      	adds	r3, r7, #6
 8004d54:	4602      	mov	r2, r0
 8004d56:	701a      	strb	r2, [r3, #0]
 8004d58:	1d7b      	adds	r3, r7, #5
 8004d5a:	460a      	mov	r2, r1
 8004d5c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 8004d5e:	f107 0314 	add.w	r3, r7, #20
 8004d62:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_init_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8004d66:	f107 030c 	add.w	r3, r7, #12
 8004d6a:	2207      	movs	r2, #7
 8004d6c:	2100      	movs	r1, #0
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 ff0e 	bl	8005b90 <memset>
  uint8_t index_input = 0;
 8004d74:	2300      	movs	r3, #0
 8004d76:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Role = htob(Role, 1);
 8004d7a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d7e:	1dfa      	adds	r2, r7, #7
 8004d80:	7812      	ldrb	r2, [r2, #0]
 8004d82:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004d84:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8004d88:	3301      	adds	r3, #1
 8004d8a:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->privacy_enabled = htob(privacy_enabled, 1);
 8004d8e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004d92:	1dba      	adds	r2, r7, #6
 8004d94:	7812      	ldrb	r2, [r2, #0]
 8004d96:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8004d98:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->device_name_char_len = htob(device_name_char_len, 1);
 8004da2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004da6:	1d7a      	adds	r2, r7, #5
 8004da8:	7812      	ldrb	r2, [r2, #0]
 8004daa:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8004dac:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8004db0:	3301      	adds	r3, #1
 8004db2:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004db6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004dba:	2218      	movs	r2, #24
 8004dbc:	2100      	movs	r1, #0
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 fee6 	bl	8005b90 <memset>
  rq.ogf = 0x3f;
 8004dc4:	233f      	movs	r3, #63	; 0x3f
 8004dc6:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x08a;
 8004dca:	238a      	movs	r3, #138	; 0x8a
 8004dcc:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8004dd0:	f107 0314 	add.w	r3, r7, #20
 8004dd4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8004dd8:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8004ddc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8004de0:	f107 030c 	add.w	r3, r7, #12
 8004de4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8004de8:	2307      	movs	r3, #7
 8004dea:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8004dee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004df2:	2100      	movs	r1, #0
 8004df4:	4618      	mov	r0, r3
 8004df6:	f000 fbe9 	bl	80055cc <hci_send_req>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	da01      	bge.n	8004e04 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 8004e00:	23ff      	movs	r3, #255	; 0xff
 8004e02:	e021      	b.n	8004e48 <aci_gap_init+0x10c>
  if (resp.Status) {
 8004e04:	f107 030c 	add.w	r3, r7, #12
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d003      	beq.n	8004e16 <aci_gap_init+0xda>
    return resp.Status;
 8004e0e:	f107 030c 	add.w	r3, r7, #12
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	e018      	b.n	8004e48 <aci_gap_init+0x10c>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8004e16:	f107 030c 	add.w	r3, r7, #12
 8004e1a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	463b      	mov	r3, r7
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = btoh(resp.Dev_Name_Char_Handle, 2);
 8004e26:	f107 030c 	add.w	r3, r7, #12
 8004e2a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004e34:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = btoh(resp.Appearance_Char_Handle, 2);
 8004e36:	f107 030c 	add.w	r3, r7, #12
 8004e3a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8004e44:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd90      	pop	{r4, r7, pc}

08004e52 <aci_gatt_init>:
  ******************************************************************************
  */
#include "ble_types.h"
#include "bluenrg1_gatt_aci.h"
tBleStatus aci_gatt_init(void)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b088      	sub	sp, #32
 8004e56:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	71fb      	strb	r3, [r7, #7]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004e5c:	f107 0308 	add.w	r3, r7, #8
 8004e60:	2218      	movs	r2, #24
 8004e62:	2100      	movs	r1, #0
 8004e64:	4618      	mov	r0, r3
 8004e66:	f000 fe93 	bl	8005b90 <memset>
  rq.ogf = 0x3f;
 8004e6a:	233f      	movs	r3, #63	; 0x3f
 8004e6c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8004e6e:	f240 1301 	movw	r3, #257	; 0x101
 8004e72:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8004e74:	1dfb      	adds	r3, r7, #7
 8004e76:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	61fb      	str	r3, [r7, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004e7c:	f107 0308 	add.w	r3, r7, #8
 8004e80:	2100      	movs	r1, #0
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 fba2 	bl	80055cc <hci_send_req>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	da01      	bge.n	8004e92 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8004e8e:	23ff      	movs	r3, #255	; 0xff
 8004e90:	e005      	b.n	8004e9e <aci_gatt_init+0x4c>
  if (status) {
 8004e92:	79fb      	ldrb	r3, [r7, #7]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d001      	beq.n	8004e9c <aci_gatt_init+0x4a>
    return status;
 8004e98:	79fb      	ldrb	r3, [r7, #7]
 8004e9a:	e000      	b.n	8004e9e <aci_gatt_init+0x4c>
  }
  return BLE_STATUS_SUCCESS;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3720      	adds	r7, #32
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service(uint8_t Service_UUID_Type,
                                Service_UUID_t *Service_UUID,
                                uint8_t Service_Type,
                                uint8_t Max_Attribute_Records,
                                uint16_t *Service_Handle)
{
 8004ea6:	b590      	push	{r4, r7, lr}
 8004ea8:	b0cf      	sub	sp, #316	; 0x13c
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	4604      	mov	r4, r0
 8004eae:	4638      	mov	r0, r7
 8004eb0:	6001      	str	r1, [r0, #0]
 8004eb2:	4610      	mov	r0, r2
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	1dfb      	adds	r3, r7, #7
 8004eb8:	4622      	mov	r2, r4
 8004eba:	701a      	strb	r2, [r3, #0]
 8004ebc:	1dbb      	adds	r3, r7, #6
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	701a      	strb	r2, [r3, #0]
 8004ec2:	1d7b      	adds	r3, r7, #5
 8004ec4:	460a      	mov	r2, r1
 8004ec6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8004ec8:	f107 030c 	add.w	r3, r7, #12
 8004ecc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8004ed0:	1dfb      	adds	r3, r7, #7
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d007      	beq.n	8004ee8 <aci_gatt_add_service+0x42>
 8004ed8:	1dfb      	adds	r3, r7, #7
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d101      	bne.n	8004ee4 <aci_gatt_add_service+0x3e>
 8004ee0:	2311      	movs	r3, #17
 8004ee2:	e002      	b.n	8004eea <aci_gatt_add_service+0x44>
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e000      	b.n	8004eea <aci_gatt_add_service+0x44>
 8004ee8:	2303      	movs	r3, #3
 8004eea:	f107 020c 	add.w	r2, r7, #12
 8004eee:	4413      	add	r3, r2
 8004ef0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8004ef4:	f107 0308 	add.w	r3, r7, #8
 8004ef8:	2203      	movs	r2, #3
 8004efa:	2100      	movs	r1, #0
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 fe47 	bl	8005b90 <memset>
  uint8_t index_input = 0;
 8004f02:	2300      	movs	r3, #0
 8004f04:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_UUID_Type = htob(Service_UUID_Type, 1);
 8004f08:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004f0c:	1dfa      	adds	r2, r7, #7
 8004f0e:	7812      	ldrb	r2, [r2, #0]
 8004f10:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8004f12:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004f16:	3301      	adds	r3, #1
 8004f18:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    uint8_t size;
    switch (Service_UUID_Type) {
 8004f1c:	1dfb      	adds	r3, r7, #7
 8004f1e:	781b      	ldrb	r3, [r3, #0]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d002      	beq.n	8004f2a <aci_gatt_add_service+0x84>
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d004      	beq.n	8004f32 <aci_gatt_add_service+0x8c>
 8004f28:	e007      	b.n	8004f3a <aci_gatt_add_service+0x94>
      case 1: size = 2; break;
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8004f30:	e005      	b.n	8004f3e <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 8004f32:	2310      	movs	r3, #16
 8004f34:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8004f38:	e001      	b.n	8004f3e <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 8004f3a:	2347      	movs	r3, #71	; 0x47
 8004f3c:	e05d      	b.n	8004ffa <aci_gatt_add_service+0x154>
    }
    BLUENRG_memcpy((void *) &cp0->Service_UUID, (const void *) Service_UUID, size);
 8004f3e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8004f42:	1c58      	adds	r0, r3, #1
 8004f44:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8004f48:	463b      	mov	r3, r7
 8004f4a:	6819      	ldr	r1, [r3, #0]
 8004f4c:	f000 fe12 	bl	8005b74 <memcpy>
    index_input += size;
 8004f50:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8004f54:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8004f58:	4413      	add	r3, r2
 8004f5a:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Service_Type = htob(Service_Type, 1);
 8004f5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f62:	1dba      	adds	r2, r7, #6
 8004f64:	7812      	ldrb	r2, [r2, #0]
 8004f66:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8004f68:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
    {
      cp1->Max_Attribute_Records = htob(Max_Attribute_Records, 1);
 8004f72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f76:	1d7a      	adds	r2, r7, #5
 8004f78:	7812      	ldrb	r2, [r2, #0]
 8004f7a:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8004f7c:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004f80:	3301      	adds	r3, #1
 8004f82:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004f86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f8a:	2218      	movs	r2, #24
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 fdfe 	bl	8005b90 <memset>
  rq.ogf = 0x3f;
 8004f94:	233f      	movs	r3, #63	; 0x3f
 8004f96:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8004f9a:	f44f 7381 	mov.w	r3, #258	; 0x102
 8004f9e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8004fa2:	f107 030c 	add.w	r3, r7, #12
 8004fa6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8004faa:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8004fae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8004fb2:	f107 0308 	add.w	r3, r7, #8
 8004fb6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8004fba:	2303      	movs	r3, #3
 8004fbc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 8004fc0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 fb00 	bl	80055cc <hci_send_req>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	da01      	bge.n	8004fd6 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 8004fd2:	23ff      	movs	r3, #255	; 0xff
 8004fd4:	e011      	b.n	8004ffa <aci_gatt_add_service+0x154>
  if (resp.Status) {
 8004fd6:	f107 0308 	add.w	r3, r7, #8
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d003      	beq.n	8004fe8 <aci_gatt_add_service+0x142>
    return resp.Status;
 8004fe0:	f107 0308 	add.w	r3, r7, #8
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	e008      	b.n	8004ffa <aci_gatt_add_service+0x154>
  }
  *Service_Handle = btoh(resp.Service_Handle, 2);
 8004fe8:	f107 0308 	add.w	r3, r7, #8
 8004fec:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004ff0:	b29a      	uxth	r2, r3
 8004ff2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8004ff6:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8004ff8:	2300      	movs	r3, #0
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8005000:	46bd      	mov	sp, r7
 8005002:	bd90      	pop	{r4, r7, pc}

08005004 <aci_gatt_add_char>:
                             uint8_t Security_Permissions,
                             uint8_t GATT_Evt_Mask,
                             uint8_t Enc_Key_Size,
                             uint8_t Is_Variable,
                             uint16_t *Char_Handle)
{
 8005004:	b590      	push	{r4, r7, lr}
 8005006:	b0d1      	sub	sp, #324	; 0x144
 8005008:	af00      	add	r7, sp, #0
 800500a:	4604      	mov	r4, r0
 800500c:	4608      	mov	r0, r1
 800500e:	f107 0108 	add.w	r1, r7, #8
 8005012:	600a      	str	r2, [r1, #0]
 8005014:	4619      	mov	r1, r3
 8005016:	f107 030e 	add.w	r3, r7, #14
 800501a:	4622      	mov	r2, r4
 800501c:	801a      	strh	r2, [r3, #0]
 800501e:	f107 030d 	add.w	r3, r7, #13
 8005022:	4602      	mov	r2, r0
 8005024:	701a      	strb	r2, [r3, #0]
 8005026:	1dbb      	adds	r3, r7, #6
 8005028:	460a      	mov	r2, r1
 800502a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800502c:	f107 0314 	add.w	r3, r7, #20
 8005030:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8005034:	f107 030d 	add.w	r3, r7, #13
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d008      	beq.n	8005050 <aci_gatt_add_char+0x4c>
 800503e:	f107 030d 	add.w	r3, r7, #13
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	2b02      	cmp	r3, #2
 8005046:	d101      	bne.n	800504c <aci_gatt_add_char+0x48>
 8005048:	2313      	movs	r3, #19
 800504a:	e002      	b.n	8005052 <aci_gatt_add_char+0x4e>
 800504c:	2303      	movs	r3, #3
 800504e:	e000      	b.n	8005052 <aci_gatt_add_char+0x4e>
 8005050:	2305      	movs	r3, #5
 8005052:	f107 0214 	add.w	r2, r7, #20
 8005056:	4413      	add	r3, r2
 8005058:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800505c:	f107 0310 	add.w	r3, r7, #16
 8005060:	2203      	movs	r2, #3
 8005062:	2100      	movs	r1, #0
 8005064:	4618      	mov	r0, r3
 8005066:	f000 fd93 	bl	8005b90 <memset>
  uint8_t index_input = 0;
 800506a:	2300      	movs	r3, #0
 800506c:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Service_Handle = htob(Service_Handle, 2);
 8005070:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8005074:	f107 020e 	add.w	r2, r7, #14
 8005078:	8812      	ldrh	r2, [r2, #0]
 800507a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800507c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005080:	3302      	adds	r3, #2
 8005082:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  cp0->Char_UUID_Type = htob(Char_UUID_Type, 1);
 8005086:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800508a:	f107 020d 	add.w	r2, r7, #13
 800508e:	7812      	ldrb	r2, [r2, #0]
 8005090:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8005092:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005096:	3301      	adds	r3, #1
 8005098:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  /* var_len_data input */
  {
    uint8_t size;
    switch (Char_UUID_Type) {
 800509c:	f107 030d 	add.w	r3, r7, #13
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d002      	beq.n	80050ac <aci_gatt_add_char+0xa8>
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d004      	beq.n	80050b4 <aci_gatt_add_char+0xb0>
 80050aa:	e007      	b.n	80050bc <aci_gatt_add_char+0xb8>
      case 1: size = 2; break;
 80050ac:	2302      	movs	r3, #2
 80050ae:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80050b2:	e005      	b.n	80050c0 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 80050b4:	2310      	movs	r3, #16
 80050b6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 80050ba:	e001      	b.n	80050c0 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 80050bc:	2347      	movs	r3, #71	; 0x47
 80050be:	e086      	b.n	80051ce <aci_gatt_add_char+0x1ca>
    }
    BLUENRG_memcpy((void *) &cp0->Char_UUID, (const void *) Char_UUID, size);
 80050c0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80050c4:	1cd8      	adds	r0, r3, #3
 80050c6:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 80050ca:	f107 0308 	add.w	r3, r7, #8
 80050ce:	6819      	ldr	r1, [r3, #0]
 80050d0:	f000 fd50 	bl	8005b74 <memcpy>
    index_input += size;
 80050d4:	f897 2133 	ldrb.w	r2, [r7, #307]	; 0x133
 80050d8:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 80050dc:	4413      	add	r3, r2
 80050de:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Char_Value_Length = htob(Char_Value_Length, 2);
 80050e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80050e6:	1dba      	adds	r2, r7, #6
 80050e8:	8812      	ldrh	r2, [r2, #0]
 80050ea:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 80050ec:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 80050f0:	3302      	adds	r3, #2
 80050f2:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Char_Properties = htob(Char_Properties, 1);
 80050f6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80050fa:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 80050fe:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8005100:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005104:	3301      	adds	r3, #1
 8005106:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Security_Permissions = htob(Security_Permissions, 1);
 800510a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800510e:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8005112:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8005114:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005118:	3301      	adds	r3, #1
 800511a:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->GATT_Evt_Mask = htob(GATT_Evt_Mask, 1);
 800511e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005122:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8005126:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8005128:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 800512c:	3301      	adds	r3, #1
 800512e:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Enc_Key_Size = htob(Enc_Key_Size, 1);
 8005132:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005136:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800513a:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800513c:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005140:	3301      	adds	r3, #1
 8005142:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
    {
      cp1->Is_Variable = htob(Is_Variable, 1);
 8005146:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800514a:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800514e:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8005150:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005154:	3301      	adds	r3, #1
 8005156:	f887 3133 	strb.w	r3, [r7, #307]	; 0x133
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800515a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800515e:	2218      	movs	r2, #24
 8005160:	2100      	movs	r1, #0
 8005162:	4618      	mov	r0, r3
 8005164:	f000 fd14 	bl	8005b90 <memset>
  rq.ogf = 0x3f;
 8005168:	233f      	movs	r3, #63	; 0x3f
 800516a:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800516e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005172:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8005176:	f107 0314 	add.w	r3, r7, #20
 800517a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800517e:	f897 3133 	ldrb.w	r3, [r7, #307]	; 0x133
 8005182:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8005186:	f107 0310 	add.w	r3, r7, #16
 800518a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800518e:	2303      	movs	r3, #3
 8005190:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (hci_send_req(&rq, FALSE) < 0)
 8005194:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8005198:	2100      	movs	r1, #0
 800519a:	4618      	mov	r0, r3
 800519c:	f000 fa16 	bl	80055cc <hci_send_req>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	da01      	bge.n	80051aa <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 80051a6:	23ff      	movs	r3, #255	; 0xff
 80051a8:	e011      	b.n	80051ce <aci_gatt_add_char+0x1ca>
  if (resp.Status) {
 80051aa:	f107 0310 	add.w	r3, r7, #16
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d003      	beq.n	80051bc <aci_gatt_add_char+0x1b8>
    return resp.Status;
 80051b4:	f107 0310 	add.w	r3, r7, #16
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	e008      	b.n	80051ce <aci_gatt_add_char+0x1ca>
  }
  *Char_Handle = btoh(resp.Char_Handle, 2);
 80051bc:	f107 0310 	add.w	r3, r7, #16
 80051c0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80051ca:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd90      	pop	{r4, r7, pc}

080051d8 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t Service_Handle,
                                      uint16_t Char_Handle,
                                      uint8_t Val_Offset,
                                      uint8_t Char_Value_Length,
                                      uint8_t Char_Value[])
{
 80051d8:	b5b0      	push	{r4, r5, r7, lr}
 80051da:	b0cc      	sub	sp, #304	; 0x130
 80051dc:	af00      	add	r7, sp, #0
 80051de:	4605      	mov	r5, r0
 80051e0:	460c      	mov	r4, r1
 80051e2:	4610      	mov	r0, r2
 80051e4:	4619      	mov	r1, r3
 80051e6:	1dbb      	adds	r3, r7, #6
 80051e8:	462a      	mov	r2, r5
 80051ea:	801a      	strh	r2, [r3, #0]
 80051ec:	1d3b      	adds	r3, r7, #4
 80051ee:	4622      	mov	r2, r4
 80051f0:	801a      	strh	r2, [r3, #0]
 80051f2:	1cfb      	adds	r3, r7, #3
 80051f4:	4602      	mov	r2, r0
 80051f6:	701a      	strb	r2, [r3, #0]
 80051f8:	1cbb      	adds	r3, r7, #2
 80051fa:	460a      	mov	r2, r1
 80051fc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 80051fe:	f107 030c 	add.w	r3, r7, #12
 8005202:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005206:	f107 030b 	add.w	r3, r7, #11
 800520a:	2200      	movs	r2, #0
 800520c:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800520e:	2300      	movs	r3, #0
 8005210:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Service_Handle = htob(Service_Handle, 2);
 8005214:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005218:	1dba      	adds	r2, r7, #6
 800521a:	8812      	ldrh	r2, [r2, #0]
 800521c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800521e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005222:	3302      	adds	r3, #2
 8005224:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Handle = htob(Char_Handle, 2);
 8005228:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800522c:	1d3a      	adds	r2, r7, #4
 800522e:	8812      	ldrh	r2, [r2, #0]
 8005230:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8005232:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005236:	3302      	adds	r3, #2
 8005238:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Val_Offset = htob(Val_Offset, 1);
 800523c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005240:	1cfa      	adds	r2, r7, #3
 8005242:	7812      	ldrb	r2, [r2, #0]
 8005244:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8005246:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800524a:	3301      	adds	r3, #1
 800524c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Char_Value_Length = htob(Char_Value_Length, 1);
 8005250:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005254:	1cba      	adds	r2, r7, #2
 8005256:	7812      	ldrb	r2, [r2, #0]
 8005258:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800525a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800525e:	3301      	adds	r3, #1
 8005260:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Char_Value, (const void *) Char_Value, Char_Value_Length*sizeof(uint8_t));
 8005264:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005268:	1d98      	adds	r0, r3, #6
 800526a:	1cbb      	adds	r3, r7, #2
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	461a      	mov	r2, r3
 8005270:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005274:	f000 fc7e 	bl	8005b74 <memcpy>
    index_input += Char_Value_Length*sizeof(uint8_t);
 8005278:	1cbb      	adds	r3, r7, #2
 800527a:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	4413      	add	r3, r2
 8005282:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005286:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800528a:	2218      	movs	r2, #24
 800528c:	2100      	movs	r1, #0
 800528e:	4618      	mov	r0, r3
 8005290:	f000 fc7e 	bl	8005b90 <memset>
  rq.ogf = 0x3f;
 8005294:	233f      	movs	r3, #63	; 0x3f
 8005296:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800529a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800529e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80052a2:	f107 030c 	add.w	r3, r7, #12
 80052a6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80052aa:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 80052ae:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80052b2:	f107 030b 	add.w	r3, r7, #11
 80052b6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80052ba:	2301      	movs	r3, #1
 80052bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80052c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80052c4:	2100      	movs	r1, #0
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 f980 	bl	80055cc <hci_send_req>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	da01      	bge.n	80052d6 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 80052d2:	23ff      	movs	r3, #255	; 0xff
 80052d4:	e009      	b.n	80052ea <aci_gatt_update_char_value+0x112>
  if (status) {
 80052d6:	f107 030b 	add.w	r3, r7, #11
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d003      	beq.n	80052e8 <aci_gatt_update_char_value+0x110>
    return status;
 80052e0:	f107 030b 	add.w	r3, r7, #11
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	e000      	b.n	80052ea <aci_gatt_update_char_value+0x112>
  }
  return BLE_STATUS_SUCCESS;
 80052e8:	2300      	movs	r3, #0
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bdb0      	pop	{r4, r5, r7, pc}

080052f4 <aci_hal_write_config_data>:
  return BLE_STATUS_SUCCESS;
}
tBleStatus aci_hal_write_config_data(uint8_t Offset,
                                     uint8_t Length,
                                     uint8_t Value[])
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b0cc      	sub	sp, #304	; 0x130
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	463b      	mov	r3, r7
 80052fc:	601a      	str	r2, [r3, #0]
 80052fe:	1dfb      	adds	r3, r7, #7
 8005300:	4602      	mov	r2, r0
 8005302:	701a      	strb	r2, [r3, #0]
 8005304:	1dbb      	adds	r3, r7, #6
 8005306:	460a      	mov	r2, r1
 8005308:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[258];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800530a:	f107 030c 	add.w	r3, r7, #12
 800530e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8005312:	f107 030b 	add.w	r3, r7, #11
 8005316:	2200      	movs	r2, #0
 8005318:	701a      	strb	r2, [r3, #0]
  uint8_t index_input = 0;
 800531a:	2300      	movs	r3, #0
 800531c:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Offset = htob(Offset, 1);
 8005320:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005324:	1dfa      	adds	r2, r7, #7
 8005326:	7812      	ldrb	r2, [r2, #0]
 8005328:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800532a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800532e:	3301      	adds	r3, #1
 8005330:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  cp0->Length = htob(Length, 1);
 8005334:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005338:	1dba      	adds	r2, r7, #6
 800533a:	7812      	ldrb	r2, [r2, #0]
 800533c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800533e:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 8005342:	3301      	adds	r3, #1
 8005344:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  /* var_len_data input */
  {
    BLUENRG_memcpy((void *) &cp0->Value, (const void *) Value, Length*sizeof(uint8_t));
 8005348:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800534c:	1c98      	adds	r0, r3, #2
 800534e:	1dbb      	adds	r3, r7, #6
 8005350:	781a      	ldrb	r2, [r3, #0]
 8005352:	463b      	mov	r3, r7
 8005354:	6819      	ldr	r1, [r3, #0]
 8005356:	f000 fc0d 	bl	8005b74 <memcpy>
    index_input += Length*sizeof(uint8_t);
 800535a:	1dbb      	adds	r3, r7, #6
 800535c:	f897 212b 	ldrb.w	r2, [r7, #299]	; 0x12b
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	4413      	add	r3, r2
 8005364:	f887 312b 	strb.w	r3, [r7, #299]	; 0x12b
  }
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8005368:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800536c:	2218      	movs	r2, #24
 800536e:	2100      	movs	r1, #0
 8005370:	4618      	mov	r0, r3
 8005372:	f000 fc0d 	bl	8005b90 <memset>
  rq.ogf = 0x3f;
 8005376:	233f      	movs	r3, #63	; 0x3f
 8005378:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800537c:	230c      	movs	r3, #12
 800537e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8005382:	f107 030c 	add.w	r3, r7, #12
 8005386:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800538a:	f897 312b 	ldrb.w	r3, [r7, #299]	; 0x12b
 800538e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8005392:	f107 030b 	add.w	r3, r7, #11
 8005396:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800539a:	2301      	movs	r3, #1
 800539c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if (hci_send_req(&rq, FALSE) < 0)
 80053a0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80053a4:	2100      	movs	r1, #0
 80053a6:	4618      	mov	r0, r3
 80053a8:	f000 f910 	bl	80055cc <hci_send_req>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	da01      	bge.n	80053b6 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 80053b2:	23ff      	movs	r3, #255	; 0xff
 80053b4:	e009      	b.n	80053ca <aci_hal_write_config_data+0xd6>
  if (status) {
 80053b6:	f107 030b 	add.w	r3, r7, #11
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d003      	beq.n	80053c8 <aci_hal_write_config_data+0xd4>
    return status;
 80053c0:	f107 030b 	add.w	r3, r7, #11
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	e000      	b.n	80053ca <aci_hal_write_config_data+0xd6>
  }
  return BLE_STATUS_SUCCESS;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <verify_packet>:
  *
  * @param  hciReadPacket The HCI data packet
  * @retval 0: valid packet, 1: incorrect packet, 2: wrong length (packet truncated or too long)
  */
static int verify_packet(const tHciDataPacket * hciReadPacket)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  const uint8_t *hci_pckt = hciReadPacket->dataBuff;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	3308      	adds	r3, #8
 80053e0:	60fb      	str	r3, [r7, #12]
  
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	2b04      	cmp	r3, #4
 80053e8:	d001      	beq.n	80053ee <verify_packet+0x1a>
    return 1; /* Incorrect type */
 80053ea:	2301      	movs	r3, #1
 80053ec:	e00c      	b.n	8005408 <verify_packet+0x34>
  
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	3302      	adds	r3, #2
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	461a      	mov	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80053fc:	3b03      	subs	r3, #3
 80053fe:	429a      	cmp	r2, r3
 8005400:	d001      	beq.n	8005406 <verify_packet+0x32>
    return 2; /* Wrong length (packet truncated or too long) */
 8005402:	2302      	movs	r3, #2
 8005404:	e000      	b.n	8005408 <verify_packet+0x34>
  
  return 0;      
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3714      	adds	r7, #20
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr

08005414 <send_cmd>:
  * @param  plen The HCI command length
  * @param  param The HCI command parameters
  * @retval None
  */
static void send_cmd(uint16_t ogf, uint16_t ocf, uint8_t plen, void *param)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b0a6      	sub	sp, #152	; 0x98
 8005418:	af00      	add	r7, sp, #0
 800541a:	607b      	str	r3, [r7, #4]
 800541c:	4603      	mov	r3, r0
 800541e:	81fb      	strh	r3, [r7, #14]
 8005420:	460b      	mov	r3, r1
 8005422:	81bb      	strh	r3, [r7, #12]
 8005424:	4613      	mov	r3, r2
 8005426:	72fb      	strb	r3, [r7, #11]
  uint8_t payload[HCI_MAX_PAYLOAD_SIZE];  
  hci_command_hdr hc;
  
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8005428:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800542c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005430:	b21a      	sxth	r2, r3
 8005432:	89fb      	ldrh	r3, [r7, #14]
 8005434:	029b      	lsls	r3, r3, #10
 8005436:	b21b      	sxth	r3, r3
 8005438:	4313      	orrs	r3, r2
 800543a:	b21b      	sxth	r3, r3
 800543c:	b29b      	uxth	r3, r3
 800543e:	82bb      	strh	r3, [r7, #20]
  hc.plen = plen;
 8005440:	7afb      	ldrb	r3, [r7, #11]
 8005442:	75bb      	strb	r3, [r7, #22]

  payload[0] = HCI_COMMAND_PKT;
 8005444:	2301      	movs	r3, #1
 8005446:	763b      	strb	r3, [r7, #24]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8005448:	f107 0318 	add.w	r3, r7, #24
 800544c:	3301      	adds	r3, #1
 800544e:	461a      	mov	r2, r3
 8005450:	f107 0314 	add.w	r3, r7, #20
 8005454:	8819      	ldrh	r1, [r3, #0]
 8005456:	789b      	ldrb	r3, [r3, #2]
 8005458:	8011      	strh	r1, [r2, #0]
 800545a:	7093      	strb	r3, [r2, #2]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800545c:	f107 0318 	add.w	r3, r7, #24
 8005460:	3304      	adds	r3, #4
 8005462:	7afa      	ldrb	r2, [r7, #11]
 8005464:	6879      	ldr	r1, [r7, #4]
 8005466:	4618      	mov	r0, r3
 8005468:	f000 fb84 	bl	8005b74 <memcpy>
  
  if (hciContext.io.Send)
 800546c:	4b08      	ldr	r3, [pc, #32]	; (8005490 <send_cmd+0x7c>)
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d009      	beq.n	8005488 <send_cmd+0x74>
  {
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8005474:	4b06      	ldr	r3, [pc, #24]	; (8005490 <send_cmd+0x7c>)
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	7afa      	ldrb	r2, [r7, #11]
 800547a:	b292      	uxth	r2, r2
 800547c:	3204      	adds	r2, #4
 800547e:	b291      	uxth	r1, r2
 8005480:	f107 0218 	add.w	r2, r7, #24
 8005484:	4610      	mov	r0, r2
 8005486:	4798      	blx	r3
  }
}
 8005488:	bf00      	nop
 800548a:	3798      	adds	r7, #152	; 0x98
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	20000750 	.word	0x20000750

08005494 <move_list>:
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
 800549e:	e00a      	b.n	80054b6 <move_list+0x22>
  {
    list_remove_tail(src_list, &tmp_node);
 80054a0:	f107 030c 	add.w	r3, r7, #12
 80054a4:	4619      	mov	r1, r3
 80054a6:	6838      	ldr	r0, [r7, #0]
 80054a8:	f000 faea 	bl	8005a80 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	4619      	mov	r1, r3
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 fa51 	bl	8005958 <list_insert_head>
  while (!list_is_empty(src_list))
 80054b6:	6838      	ldr	r0, [r7, #0]
 80054b8:	f000 fa2c 	bl	8005914 <list_is_empty>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d0ee      	beq.n	80054a0 <move_list+0xc>
  }
}
 80054c2:	bf00      	nop
 80054c4:	bf00      	nop
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <free_event_list>:
  *
  * @param  None
  * @retval None
  */
static void free_event_list(void)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b082      	sub	sp, #8
 80054d0:	af00      	add	r7, sp, #0
  tHciDataPacket * pckt;

  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 80054d2:	e009      	b.n	80054e8 <free_event_list+0x1c>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 80054d4:	1d3b      	adds	r3, r7, #4
 80054d6:	4619      	mov	r1, r3
 80054d8:	4809      	ldr	r0, [pc, #36]	; (8005500 <free_event_list+0x34>)
 80054da:	f000 faaa 	bl	8005a32 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4619      	mov	r1, r3
 80054e2:	4808      	ldr	r0, [pc, #32]	; (8005504 <free_event_list+0x38>)
 80054e4:	f000 fa5e 	bl	80059a4 <list_insert_tail>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 80054e8:	4806      	ldr	r0, [pc, #24]	; (8005504 <free_event_list+0x38>)
 80054ea:	f000 faf0 	bl	8005ace <list_get_size>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b04      	cmp	r3, #4
 80054f2:	ddef      	ble.n	80054d4 <free_event_list+0x8>
  }
}
 80054f4:	bf00      	nop
 80054f6:	bf00      	nop
 80054f8:	3708      	adds	r7, #8
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	2000085c 	.word	0x2000085c
 8005504:	20000854 	.word	0x20000854

08005508 <hci_init>:

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  uint8_t index;

  if(UserEvtRx != NULL)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d002      	beq.n	800551e <hci_init+0x16>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8005518:	4a18      	ldr	r2, [pc, #96]	; (800557c <hci_init+0x74>)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	61d3      	str	r3, [r2, #28]
  }
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800551e:	4818      	ldr	r0, [pc, #96]	; (8005580 <hci_init+0x78>)
 8005520:	f000 f9e8 	bl	80058f4 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8005524:	4817      	ldr	r0, [pc, #92]	; (8005584 <hci_init+0x7c>)
 8005526:	f000 f9e5 	bl	80058f4 <list_init_head>

  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 800552a:	f7fb f9c5 	bl	80008b8 <hci_tl_lowlevel_init>

  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800552e:	2300      	movs	r3, #0
 8005530:	73fb      	strb	r3, [r7, #15]
 8005532:	e00c      	b.n	800554e <hci_init+0x46>
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8005534:	7bfb      	ldrb	r3, [r7, #15]
 8005536:	228c      	movs	r2, #140	; 0x8c
 8005538:	fb02 f303 	mul.w	r3, r2, r3
 800553c:	4a12      	ldr	r2, [pc, #72]	; (8005588 <hci_init+0x80>)
 800553e:	4413      	add	r3, r2
 8005540:	4619      	mov	r1, r3
 8005542:	480f      	ldr	r0, [pc, #60]	; (8005580 <hci_init+0x78>)
 8005544:	f000 fa2e 	bl	80059a4 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8005548:	7bfb      	ldrb	r3, [r7, #15]
 800554a:	3301      	adds	r3, #1
 800554c:	73fb      	strb	r3, [r7, #15]
 800554e:	7bfb      	ldrb	r3, [r7, #15]
 8005550:	2b09      	cmp	r3, #9
 8005552:	d9ef      	bls.n	8005534 <hci_init+0x2c>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8005554:	4b09      	ldr	r3, [pc, #36]	; (800557c <hci_init+0x74>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d003      	beq.n	8005564 <hci_init+0x5c>
 800555c:	4b07      	ldr	r3, [pc, #28]	; (800557c <hci_init+0x74>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2000      	movs	r0, #0
 8005562:	4798      	blx	r3
  if (hciContext.io.Reset) hciContext.io.Reset();
 8005564:	4b05      	ldr	r3, [pc, #20]	; (800557c <hci_init+0x74>)
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d002      	beq.n	8005572 <hci_init+0x6a>
 800556c:	4b03      	ldr	r3, [pc, #12]	; (800557c <hci_init+0x74>)
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	4798      	blx	r3
}
 8005572:	bf00      	nop
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	20000750 	.word	0x20000750
 8005580:	20000854 	.word	0x20000854
 8005584:	2000085c 	.word	0x2000085c
 8005588:	200001d8 	.word	0x200001d8

0800558c <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a0b      	ldr	r2, [pc, #44]	; (80055c8 <hci_register_io_bus+0x3c>)
 800559a:	6013      	str	r3, [r2, #0]
  hciContext.io.Receive = fops->Receive;  
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	4a09      	ldr	r2, [pc, #36]	; (80055c8 <hci_register_io_bus+0x3c>)
 80055a2:	60d3      	str	r3, [r2, #12]
  hciContext.io.Send    = fops->Send;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	4a07      	ldr	r2, [pc, #28]	; (80055c8 <hci_register_io_bus+0x3c>)
 80055aa:	6113      	str	r3, [r2, #16]
  hciContext.io.GetTick = fops->GetTick;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	4a05      	ldr	r2, [pc, #20]	; (80055c8 <hci_register_io_bus+0x3c>)
 80055b2:	6193      	str	r3, [r2, #24]
  hciContext.io.Reset   = fops->Reset;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	689b      	ldr	r3, [r3, #8]
 80055b8:	4a03      	ldr	r2, [pc, #12]	; (80055c8 <hci_register_io_bus+0x3c>)
 80055ba:	6093      	str	r3, [r2, #8]
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	20000750 	.word	0x20000750

080055cc <hci_send_req>:

int hci_send_req(struct hci_request* r, BOOL async)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b08e      	sub	sp, #56	; 0x38
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	460b      	mov	r3, r1
 80055d6:	70fb      	strb	r3, [r7, #3]
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	885b      	ldrh	r3, [r3, #2]
 80055dc:	b21b      	sxth	r3, r3
 80055de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055e2:	b21a      	sxth	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	881b      	ldrh	r3, [r3, #0]
 80055e8:	029b      	lsls	r3, r3, #10
 80055ea:	b21b      	sxth	r3, r3
 80055ec:	4313      	orrs	r3, r2
 80055ee:	b21b      	sxth	r3, r3
 80055f0:	86fb      	strh	r3, [r7, #54]	; 0x36
  hci_event_pckt *event_pckt;
  hci_spi_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 80055f2:	2300      	movs	r3, #0
 80055f4:	613b      	str	r3, [r7, #16]
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 80055f6:	f107 0308 	add.w	r3, r7, #8
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 f97a 	bl	80058f4 <list_init_head>

  free_event_list();
 8005600:	f7ff ff64 	bl	80054cc <free_event_list>
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	8818      	ldrh	r0, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	8859      	ldrh	r1, [r3, #2]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	b2da      	uxtb	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	f7ff fefd 	bl	8005414 <send_cmd>
  
  if (async)
 800561a:	78fb      	ldrb	r3, [r7, #3]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d001      	beq.n	8005624 <hci_send_req+0x58>
  {
    return 0;
 8005620:	2300      	movs	r3, #0
 8005622:	e0e5      	b.n	80057f0 <hci_send_req+0x224>
    evt_cmd_complete  *cc;
    evt_cmd_status    *cs;
    evt_le_meta_event *me;
    uint32_t len;
    
    uint32_t tickstart = HAL_GetTick();
 8005624:	f7fc f850 	bl	80016c8 <HAL_GetTick>
 8005628:	6338      	str	r0, [r7, #48]	; 0x30
      
    while (1)
    {
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 800562a:	f7fc f84d 	bl	80016c8 <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005638:	f200 80b6 	bhi.w	80057a8 <hci_send_req+0x1dc>
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800563c:	486e      	ldr	r0, [pc, #440]	; (80057f8 <hci_send_req+0x22c>)
 800563e:	f000 f969 	bl	8005914 <list_is_empty>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d000      	beq.n	800564a <hci_send_req+0x7e>
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8005648:	e7ef      	b.n	800562a <hci_send_req+0x5e>
      {
        break;
 800564a:	bf00      	nop
      }
    }
    
    /* Extract packet from HCI event queue. */
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800564c:	f107 0310 	add.w	r3, r7, #16
 8005650:	4619      	mov	r1, r3
 8005652:	4869      	ldr	r0, [pc, #420]	; (80057f8 <hci_send_req+0x22c>)
 8005654:	f000 f9ed 	bl	8005a32 <list_remove_head>
    
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	3308      	adds	r3, #8
 800565c:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (hci_hdr->type == HCI_EVENT_PKT)
 800565e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	2b04      	cmp	r3, #4
 8005664:	d17b      	bne.n	800575e <hci_send_req+0x192>
    {
      event_pckt = (void *)(hci_hdr->data);
 8005666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005668:	3301      	adds	r3, #1
 800566a:	62bb      	str	r3, [r7, #40]	; 0x28
    
      ptr = hciReadPacket->dataBuff + (1 + HCI_EVENT_HDR_SIZE);
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	3308      	adds	r3, #8
 8005670:	3303      	adds	r3, #3
 8005672:	627b      	str	r3, [r7, #36]	; 0x24
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800567a:	3b03      	subs	r3, #3
 800567c:	623b      	str	r3, [r7, #32]
    
      switch (event_pckt->evt) 
 800567e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	2b3e      	cmp	r3, #62	; 0x3e
 8005684:	d04d      	beq.n	8005722 <hci_send_req+0x156>
 8005686:	2b3e      	cmp	r3, #62	; 0x3e
 8005688:	dc6b      	bgt.n	8005762 <hci_send_req+0x196>
 800568a:	2b10      	cmp	r3, #16
 800568c:	f000 808e 	beq.w	80057ac <hci_send_req+0x1e0>
 8005690:	2b10      	cmp	r3, #16
 8005692:	dc66      	bgt.n	8005762 <hci_send_req+0x196>
 8005694:	2b0e      	cmp	r3, #14
 8005696:	d024      	beq.n	80056e2 <hci_send_req+0x116>
 8005698:	2b0f      	cmp	r3, #15
 800569a:	d162      	bne.n	8005762 <hci_send_req+0x196>
      {      
      case EVT_CMD_STATUS:
        cs = (void *) ptr;
 800569c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569e:	61bb      	str	r3, [r7, #24]
        
        if (cs->opcode != opcode)
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	885b      	ldrh	r3, [r3, #2]
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80056a8:	429a      	cmp	r2, r3
 80056aa:	f040 8081 	bne.w	80057b0 <hci_send_req+0x1e4>
          goto failed;
        
        if (r->event != EVT_CMD_STATUS) {
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	2b0f      	cmp	r3, #15
 80056b4:	d004      	beq.n	80056c0 <hci_send_req+0xf4>
          if (cs->status) {
 80056b6:	69bb      	ldr	r3, [r7, #24]
 80056b8:	781b      	ldrb	r3, [r3, #0]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d053      	beq.n	8005766 <hci_send_req+0x19a>
            goto failed;
 80056be:	e07a      	b.n	80057b6 <hci_send_req+0x1ea>
          }
          break;
        }

        r->rlen = MIN(len, r->rlen);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	695a      	ldr	r2, [r3, #20]
 80056c4:	6a3b      	ldr	r3, [r7, #32]
 80056c6:	429a      	cmp	r2, r3
 80056c8:	bf28      	it	cs
 80056ca:	461a      	movcs	r2, r3
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6918      	ldr	r0, [r3, #16]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	461a      	mov	r2, r3
 80056da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056dc:	f000 fa4a 	bl	8005b74 <memcpy>
        goto done;
 80056e0:	e07a      	b.n	80057d8 <hci_send_req+0x20c>
      
      case EVT_CMD_COMPLETE:
        cc = (void *) ptr;
 80056e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e4:	617b      	str	r3, [r7, #20]
      
        if (cc->opcode != opcode)
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d15f      	bne.n	80057b4 <hci_send_req+0x1e8>
          goto failed;
      
        ptr += EVT_CMD_COMPLETE_SIZE;
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	3303      	adds	r3, #3
 80056f8:	627b      	str	r3, [r7, #36]	; 0x24
        len -= EVT_CMD_COMPLETE_SIZE;
 80056fa:	6a3b      	ldr	r3, [r7, #32]
 80056fc:	3b03      	subs	r3, #3
 80056fe:	623b      	str	r3, [r7, #32]
      
        r->rlen = MIN(len, r->rlen);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	695a      	ldr	r2, [r3, #20]
 8005704:	6a3b      	ldr	r3, [r7, #32]
 8005706:	429a      	cmp	r2, r3
 8005708:	bf28      	it	cs
 800570a:	461a      	movcs	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6918      	ldr	r0, [r3, #16]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	461a      	mov	r2, r3
 800571a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800571c:	f000 fa2a 	bl	8005b74 <memcpy>
        goto done;
 8005720:	e05a      	b.n	80057d8 <hci_send_req+0x20c>
      
      case EVT_LE_META_EVENT:
        me = (void *) ptr;
 8005722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005724:	61fb      	str	r3, [r7, #28]
      
        if (me->subevent != r->event)
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	461a      	mov	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	429a      	cmp	r2, r3
 8005732:	d11a      	bne.n	800576a <hci_send_req+0x19e>
          break;
      
        len -= 1;
 8005734:	6a3b      	ldr	r3, [r7, #32]
 8005736:	3b01      	subs	r3, #1
 8005738:	623b      	str	r3, [r7, #32]
        r->rlen = MIN(len, r->rlen);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	695a      	ldr	r2, [r3, #20]
 800573e:	6a3b      	ldr	r3, [r7, #32]
 8005740:	429a      	cmp	r2, r3
 8005742:	bf28      	it	cs
 8005744:	461a      	movcs	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	615a      	str	r2, [r3, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6918      	ldr	r0, [r3, #16]
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	1c59      	adds	r1, r3, #1
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	461a      	mov	r2, r3
 8005758:	f000 fa0c 	bl	8005b74 <memcpy>
        goto done;
 800575c:	e03c      	b.n	80057d8 <hci_send_req+0x20c>
        goto failed;
      
      default:      
        break;
      }
    }
 800575e:	bf00      	nop
 8005760:	e004      	b.n	800576c <hci_send_req+0x1a0>
        break;
 8005762:	bf00      	nop
 8005764:	e002      	b.n	800576c <hci_send_req+0x1a0>
          break;
 8005766:	bf00      	nop
 8005768:	e000      	b.n	800576c <hci_send_req+0x1a0>
          break;
 800576a:	bf00      	nop
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800576c:	4823      	ldr	r0, [pc, #140]	; (80057fc <hci_send_req+0x230>)
 800576e:	f000 f8d1 	bl	8005914 <list_is_empty>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00d      	beq.n	8005794 <hci_send_req+0x1c8>
 8005778:	481f      	ldr	r0, [pc, #124]	; (80057f8 <hci_send_req+0x22c>)
 800577a:	f000 f8cb 	bl	8005914 <list_is_empty>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d007      	beq.n	8005794 <hci_send_req+0x1c8>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	4619      	mov	r1, r3
 8005788:	481c      	ldr	r0, [pc, #112]	; (80057fc <hci_send_req+0x230>)
 800578a:	f000 f90b 	bl	80059a4 <list_insert_tail>
      hciReadPacket=NULL;
 800578e:	2300      	movs	r3, #0
 8005790:	613b      	str	r3, [r7, #16]
 8005792:	e008      	b.n	80057a6 <hci_send_req+0x1da>
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	f107 0308 	add.w	r3, r7, #8
 800579a:	4611      	mov	r1, r2
 800579c:	4618      	mov	r0, r3
 800579e:	f000 f901 	bl	80059a4 <list_insert_tail>
      hciReadPacket=NULL;
 80057a2:	2300      	movs	r3, #0
 80057a4:	613b      	str	r3, [r7, #16]
  {
 80057a6:	e73d      	b.n	8005624 <hci_send_req+0x58>
        goto failed;
 80057a8:	bf00      	nop
 80057aa:	e004      	b.n	80057b6 <hci_send_req+0x1ea>
        goto failed;
 80057ac:	bf00      	nop
 80057ae:	e002      	b.n	80057b6 <hci_send_req+0x1ea>
          goto failed;
 80057b0:	bf00      	nop
 80057b2:	e000      	b.n	80057b6 <hci_send_req+0x1ea>
          goto failed;
 80057b4:	bf00      	nop
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d004      	beq.n	80057c6 <hci_send_req+0x1fa>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	4619      	mov	r1, r3
 80057c0:	480e      	ldr	r0, [pc, #56]	; (80057fc <hci_send_req+0x230>)
 80057c2:	f000 f8c9 	bl	8005958 <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80057c6:	f107 0308 	add.w	r3, r7, #8
 80057ca:	4619      	mov	r1, r3
 80057cc:	480a      	ldr	r0, [pc, #40]	; (80057f8 <hci_send_req+0x22c>)
 80057ce:	f7ff fe61 	bl	8005494 <move_list>

  return -1;
 80057d2:	f04f 33ff 	mov.w	r3, #4294967295
 80057d6:	e00b      	b.n	80057f0 <hci_send_req+0x224>
  
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	4619      	mov	r1, r3
 80057dc:	4807      	ldr	r0, [pc, #28]	; (80057fc <hci_send_req+0x230>)
 80057de:	f000 f8bb 	bl	8005958 <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 80057e2:	f107 0308 	add.w	r3, r7, #8
 80057e6:	4619      	mov	r1, r3
 80057e8:	4803      	ldr	r0, [pc, #12]	; (80057f8 <hci_send_req+0x22c>)
 80057ea:	f7ff fe53 	bl	8005494 <move_list>

  return 0;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3738      	adds	r7, #56	; 0x38
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	2000085c 	.word	0x2000085c
 80057fc:	20000854 	.word	0x20000854

08005800 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
  tHciDataPacket * hciReadPacket = NULL;
 8005806:	2300      	movs	r3, #0
 8005808:	607b      	str	r3, [r7, #4]
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800580a:	e013      	b.n	8005834 <hci_user_evt_proc+0x34>
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 800580c:	1d3b      	adds	r3, r7, #4
 800580e:	4619      	mov	r1, r3
 8005810:	480e      	ldr	r0, [pc, #56]	; (800584c <hci_user_evt_proc+0x4c>)
 8005812:	f000 f90e 	bl	8005a32 <list_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8005816:	4b0e      	ldr	r3, [pc, #56]	; (8005850 <hci_user_evt_proc+0x50>)
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d005      	beq.n	800582a <hci_user_evt_proc+0x2a>
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 800581e:	4b0c      	ldr	r3, [pc, #48]	; (8005850 <hci_user_evt_proc+0x50>)
 8005820:	69db      	ldr	r3, [r3, #28]
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	3208      	adds	r2, #8
 8005826:	4610      	mov	r0, r2
 8005828:	4798      	blx	r3
    }

    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4619      	mov	r1, r3
 800582e:	4809      	ldr	r0, [pc, #36]	; (8005854 <hci_user_evt_proc+0x54>)
 8005830:	f000 f8b8 	bl	80059a4 <list_insert_tail>
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8005834:	4805      	ldr	r0, [pc, #20]	; (800584c <hci_user_evt_proc+0x4c>)
 8005836:	f000 f86d 	bl	8005914 <list_is_empty>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d0e5      	beq.n	800580c <hci_user_evt_proc+0xc>
  }
}
 8005840:	bf00      	nop
 8005842:	bf00      	nop
 8005844:	3708      	adds	r7, #8
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
 800584a:	bf00      	nop
 800584c:	2000085c 	.word	0x2000085c
 8005850:	20000750 	.word	0x20000750
 8005854:	20000854 	.word	0x20000854

08005858 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b086      	sub	sp, #24
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  tHciDataPacket * hciReadPacket = NULL;
 8005860:	2300      	movs	r3, #0
 8005862:	60fb      	str	r3, [r7, #12]
  uint8_t data_len;
  
  int32_t ret = 0;
 8005864:	2300      	movs	r3, #0
 8005866:	617b      	str	r3, [r7, #20]
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8005868:	481f      	ldr	r0, [pc, #124]	; (80058e8 <hci_notify_asynch_evt+0x90>)
 800586a:	f000 f853 	bl	8005914 <list_is_empty>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d132      	bne.n	80058da <hci_notify_asynch_evt+0x82>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 8005874:	f107 030c 	add.w	r3, r7, #12
 8005878:	4619      	mov	r1, r3
 800587a:	481b      	ldr	r0, [pc, #108]	; (80058e8 <hci_notify_asynch_evt+0x90>)
 800587c:	f000 f8d9 	bl	8005a32 <list_remove_head>
    
    if (hciContext.io.Receive)
 8005880:	4b1a      	ldr	r3, [pc, #104]	; (80058ec <hci_notify_asynch_evt+0x94>)
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d02a      	beq.n	80058de <hci_notify_asynch_evt+0x86>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 8005888:	4b18      	ldr	r3, [pc, #96]	; (80058ec <hci_notify_asynch_evt+0x94>)
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	3208      	adds	r2, #8
 8005890:	2180      	movs	r1, #128	; 0x80
 8005892:	4610      	mov	r0, r2
 8005894:	4798      	blx	r3
 8005896:	4603      	mov	r3, r0
 8005898:	74fb      	strb	r3, [r7, #19]
      if (data_len > 0)
 800589a:	7cfb      	ldrb	r3, [r7, #19]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d016      	beq.n	80058ce <hci_notify_asynch_evt+0x76>
      {                    
        hciReadPacket->data_len = data_len;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	7cfa      	ldrb	r2, [r7, #19]
 80058a4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        if (verify_packet(hciReadPacket) == 0)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	4618      	mov	r0, r3
 80058ac:	f7ff fd92 	bl	80053d4 <verify_packet>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d105      	bne.n	80058c2 <hci_notify_asynch_evt+0x6a>
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	4619      	mov	r1, r3
 80058ba:	480d      	ldr	r0, [pc, #52]	; (80058f0 <hci_notify_asynch_evt+0x98>)
 80058bc:	f000 f872 	bl	80059a4 <list_insert_tail>
 80058c0:	e00d      	b.n	80058de <hci_notify_asynch_evt+0x86>
        else
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	4619      	mov	r1, r3
 80058c6:	4808      	ldr	r0, [pc, #32]	; (80058e8 <hci_notify_asynch_evt+0x90>)
 80058c8:	f000 f846 	bl	8005958 <list_insert_head>
 80058cc:	e007      	b.n	80058de <hci_notify_asynch_evt+0x86>
      }
      else 
      {
        /* Insert the packet back into the pool*/
        list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	4619      	mov	r1, r3
 80058d2:	4805      	ldr	r0, [pc, #20]	; (80058e8 <hci_notify_asynch_evt+0x90>)
 80058d4:	f000 f840 	bl	8005958 <list_insert_head>
 80058d8:	e001      	b.n	80058de <hci_notify_asynch_evt+0x86>
      }
    }
  }
  else 
  {
    ret = 1;
 80058da:	2301      	movs	r3, #1
 80058dc:	617b      	str	r3, [r7, #20]
  }
  return ret;
 80058de:	697b      	ldr	r3, [r7, #20]
  
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3718      	adds	r7, #24
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	20000854 	.word	0x20000854
 80058ec:	20000750 	.word	0x20000750
 80058f0:	2000085c 	.word	0x2000085c

080058f4 <list_init_head>:

/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	687a      	ldr	r2, [r7, #4]
 8005900:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;	
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	605a      	str	r2, [r3, #4]
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <list_is_empty>:

uint8_t list_is_empty (tListNode * listHead)
{
 8005914:	b480      	push	{r7}
 8005916:	b087      	sub	sp, #28
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800591c:	f3ef 8310 	mrs	r3, PRIMASK
 8005920:	60fb      	str	r3, [r7, #12]
  return(result);
 8005922:	68fb      	ldr	r3, [r7, #12]
  uint8_t return_value;
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005924:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005926:	b672      	cpsid	i
}
 8005928:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	429a      	cmp	r2, r3
 8005932:	d102      	bne.n	800593a <list_is_empty+0x26>
  {
    return_value = 1;
 8005934:	2301      	movs	r3, #1
 8005936:	75fb      	strb	r3, [r7, #23]
 8005938:	e001      	b.n	800593e <list_is_empty+0x2a>
  }
  else
  {
    return_value = 0;
 800593a:	2300      	movs	r3, #0
 800593c:	75fb      	strb	r3, [r7, #23]
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	f383 8810 	msr	PRIMASK, r3
}
 8005948:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
 800594a:	7dfb      	ldrb	r3, [r7, #23]
}
 800594c:	4618      	mov	r0, r3
 800594e:	371c      	adds	r7, #28
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <list_insert_head>:

void list_insert_head (tListNode * listHead, tListNode * node)
{
 8005958:	b480      	push	{r7}
 800595a:	b087      	sub	sp, #28
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005962:	f3ef 8310 	mrs	r3, PRIMASK
 8005966:	60fb      	str	r3, [r7, #12]
  return(result);
 8005968:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800596a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800596c:	b672      	cpsid	i
}
 800596e:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	683a      	ldr	r2, [r7, #0]
 8005982:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	683a      	ldr	r2, [r7, #0]
 800598a:	605a      	str	r2, [r3, #4]
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	f383 8810 	msr	PRIMASK, r3
}
 8005996:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005998:	bf00      	nop
 800599a:	371c      	adds	r7, #28
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <list_insert_tail>:

void list_insert_tail (tListNode * listHead, tListNode * node)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b087      	sub	sp, #28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059ae:	f3ef 8310 	mrs	r3, PRIMASK
 80059b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80059b4:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80059b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80059b8:	b672      	cpsid	i
}
 80059ba:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685a      	ldr	r2, [r3, #4]
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	683a      	ldr	r2, [r7, #0]
 80059ce:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	601a      	str	r2, [r3, #0]
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	f383 8810 	msr	PRIMASK, r3
}
 80059e2:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 80059e4:	bf00      	nop
 80059e6:	371c      	adds	r7, #28
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <list_remove_node>:

void list_remove_node (tListNode * node)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b087      	sub	sp, #28
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059f8:	f3ef 8310 	mrs	r3, PRIMASK
 80059fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80059fe:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005a00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005a02:	b672      	cpsid	i
}
 8005a04:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	6812      	ldr	r2, [r2, #0]
 8005a0e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	6852      	ldr	r2, [r2, #4]
 8005a18:	605a      	str	r2, [r3, #4]
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	f383 8810 	msr	PRIMASK, r3
}
 8005a24:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005a26:	bf00      	nop
 8005a28:	371c      	adds	r7, #28
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr

08005a32 <list_remove_head>:

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b086      	sub	sp, #24
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
 8005a3a:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a3c:	f3ef 8310 	mrs	r3, PRIMASK
 8005a40:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a42:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005a44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005a46:	b672      	cpsid	i
}
 8005a48:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->next);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7ff ffca 	bl	80059f0 <list_remove_node>
  (*node)->next = NULL;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2200      	movs	r2, #0
 8005a62:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	605a      	str	r2, [r3, #4]
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	f383 8810 	msr	PRIMASK, r3
}
 8005a76:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005a78:	bf00      	nop
 8005a7a:	3718      	adds	r7, #24
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <list_remove_tail>:

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b086      	sub	sp, #24
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a8a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a8e:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a90:	68fb      	ldr	r3, [r7, #12]
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005a92:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005a94:	b672      	cpsid	i
}
 8005a96:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685a      	ldr	r2, [r3, #4]
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	601a      	str	r2, [r3, #0]
  list_remove_node (listHead->prev);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f7ff ffa3 	bl	80059f0 <list_remove_node>
  (*node)->next = NULL;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	601a      	str	r2, [r3, #0]
  (*node)->prev = NULL;
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	605a      	str	r2, [r3, #4]
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	f383 8810 	msr	PRIMASK, r3
}
 8005ac4:	bf00      	nop
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}
 8005ac6:	bf00      	nop
 8005ac8:	3718      	adds	r7, #24
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <list_get_size>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

int list_get_size (tListNode * listHead)
{
 8005ace:	b480      	push	{r7}
 8005ad0:	b089      	sub	sp, #36	; 0x24
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
  int size = 0;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ada:	f3ef 8310 	mrs	r3, PRIMASK
 8005ade:	613b      	str	r3, [r7, #16]
  return(result);
 8005ae0:	693b      	ldr	r3, [r7, #16]
  tListNode * temp;

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8005ae2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8005ae4:	b672      	cpsid	i
}
 8005ae6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8005aee:	e005      	b.n	8005afc <list_get_size+0x2e>
  {
    size++;
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	3301      	adds	r3, #1
 8005af4:	61fb      	str	r3, [r7, #28]
    temp = temp->next;		
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	61bb      	str	r3, [r7, #24]
  while (temp != listHead)
 8005afc:	69ba      	ldr	r2, [r7, #24]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d1f5      	bne.n	8005af0 <list_get_size+0x22>
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f383 8810 	msr	PRIMASK, r3
}
 8005b0e:	bf00      	nop
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
 8005b10:	69fb      	ldr	r3, [r7, #28]
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3724      	adds	r7, #36	; 0x24
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
	...

08005b20 <__errno>:
 8005b20:	4b01      	ldr	r3, [pc, #4]	; (8005b28 <__errno+0x8>)
 8005b22:	6818      	ldr	r0, [r3, #0]
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	2000004c 	.word	0x2000004c

08005b2c <__libc_init_array>:
 8005b2c:	b570      	push	{r4, r5, r6, lr}
 8005b2e:	4d0d      	ldr	r5, [pc, #52]	; (8005b64 <__libc_init_array+0x38>)
 8005b30:	4c0d      	ldr	r4, [pc, #52]	; (8005b68 <__libc_init_array+0x3c>)
 8005b32:	1b64      	subs	r4, r4, r5
 8005b34:	10a4      	asrs	r4, r4, #2
 8005b36:	2600      	movs	r6, #0
 8005b38:	42a6      	cmp	r6, r4
 8005b3a:	d109      	bne.n	8005b50 <__libc_init_array+0x24>
 8005b3c:	4d0b      	ldr	r5, [pc, #44]	; (8005b6c <__libc_init_array+0x40>)
 8005b3e:	4c0c      	ldr	r4, [pc, #48]	; (8005b70 <__libc_init_array+0x44>)
 8005b40:	f000 fffa 	bl	8006b38 <_init>
 8005b44:	1b64      	subs	r4, r4, r5
 8005b46:	10a4      	asrs	r4, r4, #2
 8005b48:	2600      	movs	r6, #0
 8005b4a:	42a6      	cmp	r6, r4
 8005b4c:	d105      	bne.n	8005b5a <__libc_init_array+0x2e>
 8005b4e:	bd70      	pop	{r4, r5, r6, pc}
 8005b50:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b54:	4798      	blx	r3
 8005b56:	3601      	adds	r6, #1
 8005b58:	e7ee      	b.n	8005b38 <__libc_init_array+0xc>
 8005b5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b5e:	4798      	blx	r3
 8005b60:	3601      	adds	r6, #1
 8005b62:	e7f2      	b.n	8005b4a <__libc_init_array+0x1e>
 8005b64:	08006f18 	.word	0x08006f18
 8005b68:	08006f18 	.word	0x08006f18
 8005b6c:	08006f18 	.word	0x08006f18
 8005b70:	08006f1c 	.word	0x08006f1c

08005b74 <memcpy>:
 8005b74:	440a      	add	r2, r1
 8005b76:	4291      	cmp	r1, r2
 8005b78:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b7c:	d100      	bne.n	8005b80 <memcpy+0xc>
 8005b7e:	4770      	bx	lr
 8005b80:	b510      	push	{r4, lr}
 8005b82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b8a:	4291      	cmp	r1, r2
 8005b8c:	d1f9      	bne.n	8005b82 <memcpy+0xe>
 8005b8e:	bd10      	pop	{r4, pc}

08005b90 <memset>:
 8005b90:	4402      	add	r2, r0
 8005b92:	4603      	mov	r3, r0
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d100      	bne.n	8005b9a <memset+0xa>
 8005b98:	4770      	bx	lr
 8005b9a:	f803 1b01 	strb.w	r1, [r3], #1
 8005b9e:	e7f9      	b.n	8005b94 <memset+0x4>

08005ba0 <iprintf>:
 8005ba0:	b40f      	push	{r0, r1, r2, r3}
 8005ba2:	4b0a      	ldr	r3, [pc, #40]	; (8005bcc <iprintf+0x2c>)
 8005ba4:	b513      	push	{r0, r1, r4, lr}
 8005ba6:	681c      	ldr	r4, [r3, #0]
 8005ba8:	b124      	cbz	r4, 8005bb4 <iprintf+0x14>
 8005baa:	69a3      	ldr	r3, [r4, #24]
 8005bac:	b913      	cbnz	r3, 8005bb4 <iprintf+0x14>
 8005bae:	4620      	mov	r0, r4
 8005bb0:	f000 fa5e 	bl	8006070 <__sinit>
 8005bb4:	ab05      	add	r3, sp, #20
 8005bb6:	9a04      	ldr	r2, [sp, #16]
 8005bb8:	68a1      	ldr	r1, [r4, #8]
 8005bba:	9301      	str	r3, [sp, #4]
 8005bbc:	4620      	mov	r0, r4
 8005bbe:	f000 fc2f 	bl	8006420 <_vfiprintf_r>
 8005bc2:	b002      	add	sp, #8
 8005bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bc8:	b004      	add	sp, #16
 8005bca:	4770      	bx	lr
 8005bcc:	2000004c 	.word	0x2000004c

08005bd0 <_puts_r>:
 8005bd0:	b570      	push	{r4, r5, r6, lr}
 8005bd2:	460e      	mov	r6, r1
 8005bd4:	4605      	mov	r5, r0
 8005bd6:	b118      	cbz	r0, 8005be0 <_puts_r+0x10>
 8005bd8:	6983      	ldr	r3, [r0, #24]
 8005bda:	b90b      	cbnz	r3, 8005be0 <_puts_r+0x10>
 8005bdc:	f000 fa48 	bl	8006070 <__sinit>
 8005be0:	69ab      	ldr	r3, [r5, #24]
 8005be2:	68ac      	ldr	r4, [r5, #8]
 8005be4:	b913      	cbnz	r3, 8005bec <_puts_r+0x1c>
 8005be6:	4628      	mov	r0, r5
 8005be8:	f000 fa42 	bl	8006070 <__sinit>
 8005bec:	4b2c      	ldr	r3, [pc, #176]	; (8005ca0 <_puts_r+0xd0>)
 8005bee:	429c      	cmp	r4, r3
 8005bf0:	d120      	bne.n	8005c34 <_puts_r+0x64>
 8005bf2:	686c      	ldr	r4, [r5, #4]
 8005bf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bf6:	07db      	lsls	r3, r3, #31
 8005bf8:	d405      	bmi.n	8005c06 <_puts_r+0x36>
 8005bfa:	89a3      	ldrh	r3, [r4, #12]
 8005bfc:	0598      	lsls	r0, r3, #22
 8005bfe:	d402      	bmi.n	8005c06 <_puts_r+0x36>
 8005c00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c02:	f000 fad3 	bl	80061ac <__retarget_lock_acquire_recursive>
 8005c06:	89a3      	ldrh	r3, [r4, #12]
 8005c08:	0719      	lsls	r1, r3, #28
 8005c0a:	d51d      	bpl.n	8005c48 <_puts_r+0x78>
 8005c0c:	6923      	ldr	r3, [r4, #16]
 8005c0e:	b1db      	cbz	r3, 8005c48 <_puts_r+0x78>
 8005c10:	3e01      	subs	r6, #1
 8005c12:	68a3      	ldr	r3, [r4, #8]
 8005c14:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	60a3      	str	r3, [r4, #8]
 8005c1c:	bb39      	cbnz	r1, 8005c6e <_puts_r+0x9e>
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	da38      	bge.n	8005c94 <_puts_r+0xc4>
 8005c22:	4622      	mov	r2, r4
 8005c24:	210a      	movs	r1, #10
 8005c26:	4628      	mov	r0, r5
 8005c28:	f000 f848 	bl	8005cbc <__swbuf_r>
 8005c2c:	3001      	adds	r0, #1
 8005c2e:	d011      	beq.n	8005c54 <_puts_r+0x84>
 8005c30:	250a      	movs	r5, #10
 8005c32:	e011      	b.n	8005c58 <_puts_r+0x88>
 8005c34:	4b1b      	ldr	r3, [pc, #108]	; (8005ca4 <_puts_r+0xd4>)
 8005c36:	429c      	cmp	r4, r3
 8005c38:	d101      	bne.n	8005c3e <_puts_r+0x6e>
 8005c3a:	68ac      	ldr	r4, [r5, #8]
 8005c3c:	e7da      	b.n	8005bf4 <_puts_r+0x24>
 8005c3e:	4b1a      	ldr	r3, [pc, #104]	; (8005ca8 <_puts_r+0xd8>)
 8005c40:	429c      	cmp	r4, r3
 8005c42:	bf08      	it	eq
 8005c44:	68ec      	ldreq	r4, [r5, #12]
 8005c46:	e7d5      	b.n	8005bf4 <_puts_r+0x24>
 8005c48:	4621      	mov	r1, r4
 8005c4a:	4628      	mov	r0, r5
 8005c4c:	f000 f888 	bl	8005d60 <__swsetup_r>
 8005c50:	2800      	cmp	r0, #0
 8005c52:	d0dd      	beq.n	8005c10 <_puts_r+0x40>
 8005c54:	f04f 35ff 	mov.w	r5, #4294967295
 8005c58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c5a:	07da      	lsls	r2, r3, #31
 8005c5c:	d405      	bmi.n	8005c6a <_puts_r+0x9a>
 8005c5e:	89a3      	ldrh	r3, [r4, #12]
 8005c60:	059b      	lsls	r3, r3, #22
 8005c62:	d402      	bmi.n	8005c6a <_puts_r+0x9a>
 8005c64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c66:	f000 faa2 	bl	80061ae <__retarget_lock_release_recursive>
 8005c6a:	4628      	mov	r0, r5
 8005c6c:	bd70      	pop	{r4, r5, r6, pc}
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	da04      	bge.n	8005c7c <_puts_r+0xac>
 8005c72:	69a2      	ldr	r2, [r4, #24]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	dc06      	bgt.n	8005c86 <_puts_r+0xb6>
 8005c78:	290a      	cmp	r1, #10
 8005c7a:	d004      	beq.n	8005c86 <_puts_r+0xb6>
 8005c7c:	6823      	ldr	r3, [r4, #0]
 8005c7e:	1c5a      	adds	r2, r3, #1
 8005c80:	6022      	str	r2, [r4, #0]
 8005c82:	7019      	strb	r1, [r3, #0]
 8005c84:	e7c5      	b.n	8005c12 <_puts_r+0x42>
 8005c86:	4622      	mov	r2, r4
 8005c88:	4628      	mov	r0, r5
 8005c8a:	f000 f817 	bl	8005cbc <__swbuf_r>
 8005c8e:	3001      	adds	r0, #1
 8005c90:	d1bf      	bne.n	8005c12 <_puts_r+0x42>
 8005c92:	e7df      	b.n	8005c54 <_puts_r+0x84>
 8005c94:	6823      	ldr	r3, [r4, #0]
 8005c96:	250a      	movs	r5, #10
 8005c98:	1c5a      	adds	r2, r3, #1
 8005c9a:	6022      	str	r2, [r4, #0]
 8005c9c:	701d      	strb	r5, [r3, #0]
 8005c9e:	e7db      	b.n	8005c58 <_puts_r+0x88>
 8005ca0:	08006e9c 	.word	0x08006e9c
 8005ca4:	08006ebc 	.word	0x08006ebc
 8005ca8:	08006e7c 	.word	0x08006e7c

08005cac <puts>:
 8005cac:	4b02      	ldr	r3, [pc, #8]	; (8005cb8 <puts+0xc>)
 8005cae:	4601      	mov	r1, r0
 8005cb0:	6818      	ldr	r0, [r3, #0]
 8005cb2:	f7ff bf8d 	b.w	8005bd0 <_puts_r>
 8005cb6:	bf00      	nop
 8005cb8:	2000004c 	.word	0x2000004c

08005cbc <__swbuf_r>:
 8005cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cbe:	460e      	mov	r6, r1
 8005cc0:	4614      	mov	r4, r2
 8005cc2:	4605      	mov	r5, r0
 8005cc4:	b118      	cbz	r0, 8005cce <__swbuf_r+0x12>
 8005cc6:	6983      	ldr	r3, [r0, #24]
 8005cc8:	b90b      	cbnz	r3, 8005cce <__swbuf_r+0x12>
 8005cca:	f000 f9d1 	bl	8006070 <__sinit>
 8005cce:	4b21      	ldr	r3, [pc, #132]	; (8005d54 <__swbuf_r+0x98>)
 8005cd0:	429c      	cmp	r4, r3
 8005cd2:	d12b      	bne.n	8005d2c <__swbuf_r+0x70>
 8005cd4:	686c      	ldr	r4, [r5, #4]
 8005cd6:	69a3      	ldr	r3, [r4, #24]
 8005cd8:	60a3      	str	r3, [r4, #8]
 8005cda:	89a3      	ldrh	r3, [r4, #12]
 8005cdc:	071a      	lsls	r2, r3, #28
 8005cde:	d52f      	bpl.n	8005d40 <__swbuf_r+0x84>
 8005ce0:	6923      	ldr	r3, [r4, #16]
 8005ce2:	b36b      	cbz	r3, 8005d40 <__swbuf_r+0x84>
 8005ce4:	6923      	ldr	r3, [r4, #16]
 8005ce6:	6820      	ldr	r0, [r4, #0]
 8005ce8:	1ac0      	subs	r0, r0, r3
 8005cea:	6963      	ldr	r3, [r4, #20]
 8005cec:	b2f6      	uxtb	r6, r6
 8005cee:	4283      	cmp	r3, r0
 8005cf0:	4637      	mov	r7, r6
 8005cf2:	dc04      	bgt.n	8005cfe <__swbuf_r+0x42>
 8005cf4:	4621      	mov	r1, r4
 8005cf6:	4628      	mov	r0, r5
 8005cf8:	f000 f926 	bl	8005f48 <_fflush_r>
 8005cfc:	bb30      	cbnz	r0, 8005d4c <__swbuf_r+0x90>
 8005cfe:	68a3      	ldr	r3, [r4, #8]
 8005d00:	3b01      	subs	r3, #1
 8005d02:	60a3      	str	r3, [r4, #8]
 8005d04:	6823      	ldr	r3, [r4, #0]
 8005d06:	1c5a      	adds	r2, r3, #1
 8005d08:	6022      	str	r2, [r4, #0]
 8005d0a:	701e      	strb	r6, [r3, #0]
 8005d0c:	6963      	ldr	r3, [r4, #20]
 8005d0e:	3001      	adds	r0, #1
 8005d10:	4283      	cmp	r3, r0
 8005d12:	d004      	beq.n	8005d1e <__swbuf_r+0x62>
 8005d14:	89a3      	ldrh	r3, [r4, #12]
 8005d16:	07db      	lsls	r3, r3, #31
 8005d18:	d506      	bpl.n	8005d28 <__swbuf_r+0x6c>
 8005d1a:	2e0a      	cmp	r6, #10
 8005d1c:	d104      	bne.n	8005d28 <__swbuf_r+0x6c>
 8005d1e:	4621      	mov	r1, r4
 8005d20:	4628      	mov	r0, r5
 8005d22:	f000 f911 	bl	8005f48 <_fflush_r>
 8005d26:	b988      	cbnz	r0, 8005d4c <__swbuf_r+0x90>
 8005d28:	4638      	mov	r0, r7
 8005d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d2c:	4b0a      	ldr	r3, [pc, #40]	; (8005d58 <__swbuf_r+0x9c>)
 8005d2e:	429c      	cmp	r4, r3
 8005d30:	d101      	bne.n	8005d36 <__swbuf_r+0x7a>
 8005d32:	68ac      	ldr	r4, [r5, #8]
 8005d34:	e7cf      	b.n	8005cd6 <__swbuf_r+0x1a>
 8005d36:	4b09      	ldr	r3, [pc, #36]	; (8005d5c <__swbuf_r+0xa0>)
 8005d38:	429c      	cmp	r4, r3
 8005d3a:	bf08      	it	eq
 8005d3c:	68ec      	ldreq	r4, [r5, #12]
 8005d3e:	e7ca      	b.n	8005cd6 <__swbuf_r+0x1a>
 8005d40:	4621      	mov	r1, r4
 8005d42:	4628      	mov	r0, r5
 8005d44:	f000 f80c 	bl	8005d60 <__swsetup_r>
 8005d48:	2800      	cmp	r0, #0
 8005d4a:	d0cb      	beq.n	8005ce4 <__swbuf_r+0x28>
 8005d4c:	f04f 37ff 	mov.w	r7, #4294967295
 8005d50:	e7ea      	b.n	8005d28 <__swbuf_r+0x6c>
 8005d52:	bf00      	nop
 8005d54:	08006e9c 	.word	0x08006e9c
 8005d58:	08006ebc 	.word	0x08006ebc
 8005d5c:	08006e7c 	.word	0x08006e7c

08005d60 <__swsetup_r>:
 8005d60:	4b32      	ldr	r3, [pc, #200]	; (8005e2c <__swsetup_r+0xcc>)
 8005d62:	b570      	push	{r4, r5, r6, lr}
 8005d64:	681d      	ldr	r5, [r3, #0]
 8005d66:	4606      	mov	r6, r0
 8005d68:	460c      	mov	r4, r1
 8005d6a:	b125      	cbz	r5, 8005d76 <__swsetup_r+0x16>
 8005d6c:	69ab      	ldr	r3, [r5, #24]
 8005d6e:	b913      	cbnz	r3, 8005d76 <__swsetup_r+0x16>
 8005d70:	4628      	mov	r0, r5
 8005d72:	f000 f97d 	bl	8006070 <__sinit>
 8005d76:	4b2e      	ldr	r3, [pc, #184]	; (8005e30 <__swsetup_r+0xd0>)
 8005d78:	429c      	cmp	r4, r3
 8005d7a:	d10f      	bne.n	8005d9c <__swsetup_r+0x3c>
 8005d7c:	686c      	ldr	r4, [r5, #4]
 8005d7e:	89a3      	ldrh	r3, [r4, #12]
 8005d80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d84:	0719      	lsls	r1, r3, #28
 8005d86:	d42c      	bmi.n	8005de2 <__swsetup_r+0x82>
 8005d88:	06dd      	lsls	r5, r3, #27
 8005d8a:	d411      	bmi.n	8005db0 <__swsetup_r+0x50>
 8005d8c:	2309      	movs	r3, #9
 8005d8e:	6033      	str	r3, [r6, #0]
 8005d90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005d94:	81a3      	strh	r3, [r4, #12]
 8005d96:	f04f 30ff 	mov.w	r0, #4294967295
 8005d9a:	e03e      	b.n	8005e1a <__swsetup_r+0xba>
 8005d9c:	4b25      	ldr	r3, [pc, #148]	; (8005e34 <__swsetup_r+0xd4>)
 8005d9e:	429c      	cmp	r4, r3
 8005da0:	d101      	bne.n	8005da6 <__swsetup_r+0x46>
 8005da2:	68ac      	ldr	r4, [r5, #8]
 8005da4:	e7eb      	b.n	8005d7e <__swsetup_r+0x1e>
 8005da6:	4b24      	ldr	r3, [pc, #144]	; (8005e38 <__swsetup_r+0xd8>)
 8005da8:	429c      	cmp	r4, r3
 8005daa:	bf08      	it	eq
 8005dac:	68ec      	ldreq	r4, [r5, #12]
 8005dae:	e7e6      	b.n	8005d7e <__swsetup_r+0x1e>
 8005db0:	0758      	lsls	r0, r3, #29
 8005db2:	d512      	bpl.n	8005dda <__swsetup_r+0x7a>
 8005db4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005db6:	b141      	cbz	r1, 8005dca <__swsetup_r+0x6a>
 8005db8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005dbc:	4299      	cmp	r1, r3
 8005dbe:	d002      	beq.n	8005dc6 <__swsetup_r+0x66>
 8005dc0:	4630      	mov	r0, r6
 8005dc2:	f000 fa59 	bl	8006278 <_free_r>
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	6363      	str	r3, [r4, #52]	; 0x34
 8005dca:	89a3      	ldrh	r3, [r4, #12]
 8005dcc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005dd0:	81a3      	strh	r3, [r4, #12]
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	6063      	str	r3, [r4, #4]
 8005dd6:	6923      	ldr	r3, [r4, #16]
 8005dd8:	6023      	str	r3, [r4, #0]
 8005dda:	89a3      	ldrh	r3, [r4, #12]
 8005ddc:	f043 0308 	orr.w	r3, r3, #8
 8005de0:	81a3      	strh	r3, [r4, #12]
 8005de2:	6923      	ldr	r3, [r4, #16]
 8005de4:	b94b      	cbnz	r3, 8005dfa <__swsetup_r+0x9a>
 8005de6:	89a3      	ldrh	r3, [r4, #12]
 8005de8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005df0:	d003      	beq.n	8005dfa <__swsetup_r+0x9a>
 8005df2:	4621      	mov	r1, r4
 8005df4:	4630      	mov	r0, r6
 8005df6:	f000 f9ff 	bl	80061f8 <__smakebuf_r>
 8005dfa:	89a0      	ldrh	r0, [r4, #12]
 8005dfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e00:	f010 0301 	ands.w	r3, r0, #1
 8005e04:	d00a      	beq.n	8005e1c <__swsetup_r+0xbc>
 8005e06:	2300      	movs	r3, #0
 8005e08:	60a3      	str	r3, [r4, #8]
 8005e0a:	6963      	ldr	r3, [r4, #20]
 8005e0c:	425b      	negs	r3, r3
 8005e0e:	61a3      	str	r3, [r4, #24]
 8005e10:	6923      	ldr	r3, [r4, #16]
 8005e12:	b943      	cbnz	r3, 8005e26 <__swsetup_r+0xc6>
 8005e14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005e18:	d1ba      	bne.n	8005d90 <__swsetup_r+0x30>
 8005e1a:	bd70      	pop	{r4, r5, r6, pc}
 8005e1c:	0781      	lsls	r1, r0, #30
 8005e1e:	bf58      	it	pl
 8005e20:	6963      	ldrpl	r3, [r4, #20]
 8005e22:	60a3      	str	r3, [r4, #8]
 8005e24:	e7f4      	b.n	8005e10 <__swsetup_r+0xb0>
 8005e26:	2000      	movs	r0, #0
 8005e28:	e7f7      	b.n	8005e1a <__swsetup_r+0xba>
 8005e2a:	bf00      	nop
 8005e2c:	2000004c 	.word	0x2000004c
 8005e30:	08006e9c 	.word	0x08006e9c
 8005e34:	08006ebc 	.word	0x08006ebc
 8005e38:	08006e7c 	.word	0x08006e7c

08005e3c <__sflush_r>:
 8005e3c:	898a      	ldrh	r2, [r1, #12]
 8005e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e42:	4605      	mov	r5, r0
 8005e44:	0710      	lsls	r0, r2, #28
 8005e46:	460c      	mov	r4, r1
 8005e48:	d458      	bmi.n	8005efc <__sflush_r+0xc0>
 8005e4a:	684b      	ldr	r3, [r1, #4]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	dc05      	bgt.n	8005e5c <__sflush_r+0x20>
 8005e50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	dc02      	bgt.n	8005e5c <__sflush_r+0x20>
 8005e56:	2000      	movs	r0, #0
 8005e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e5e:	2e00      	cmp	r6, #0
 8005e60:	d0f9      	beq.n	8005e56 <__sflush_r+0x1a>
 8005e62:	2300      	movs	r3, #0
 8005e64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005e68:	682f      	ldr	r7, [r5, #0]
 8005e6a:	602b      	str	r3, [r5, #0]
 8005e6c:	d032      	beq.n	8005ed4 <__sflush_r+0x98>
 8005e6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005e70:	89a3      	ldrh	r3, [r4, #12]
 8005e72:	075a      	lsls	r2, r3, #29
 8005e74:	d505      	bpl.n	8005e82 <__sflush_r+0x46>
 8005e76:	6863      	ldr	r3, [r4, #4]
 8005e78:	1ac0      	subs	r0, r0, r3
 8005e7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e7c:	b10b      	cbz	r3, 8005e82 <__sflush_r+0x46>
 8005e7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e80:	1ac0      	subs	r0, r0, r3
 8005e82:	2300      	movs	r3, #0
 8005e84:	4602      	mov	r2, r0
 8005e86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e88:	6a21      	ldr	r1, [r4, #32]
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	47b0      	blx	r6
 8005e8e:	1c43      	adds	r3, r0, #1
 8005e90:	89a3      	ldrh	r3, [r4, #12]
 8005e92:	d106      	bne.n	8005ea2 <__sflush_r+0x66>
 8005e94:	6829      	ldr	r1, [r5, #0]
 8005e96:	291d      	cmp	r1, #29
 8005e98:	d82c      	bhi.n	8005ef4 <__sflush_r+0xb8>
 8005e9a:	4a2a      	ldr	r2, [pc, #168]	; (8005f44 <__sflush_r+0x108>)
 8005e9c:	40ca      	lsrs	r2, r1
 8005e9e:	07d6      	lsls	r6, r2, #31
 8005ea0:	d528      	bpl.n	8005ef4 <__sflush_r+0xb8>
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	6062      	str	r2, [r4, #4]
 8005ea6:	04d9      	lsls	r1, r3, #19
 8005ea8:	6922      	ldr	r2, [r4, #16]
 8005eaa:	6022      	str	r2, [r4, #0]
 8005eac:	d504      	bpl.n	8005eb8 <__sflush_r+0x7c>
 8005eae:	1c42      	adds	r2, r0, #1
 8005eb0:	d101      	bne.n	8005eb6 <__sflush_r+0x7a>
 8005eb2:	682b      	ldr	r3, [r5, #0]
 8005eb4:	b903      	cbnz	r3, 8005eb8 <__sflush_r+0x7c>
 8005eb6:	6560      	str	r0, [r4, #84]	; 0x54
 8005eb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005eba:	602f      	str	r7, [r5, #0]
 8005ebc:	2900      	cmp	r1, #0
 8005ebe:	d0ca      	beq.n	8005e56 <__sflush_r+0x1a>
 8005ec0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ec4:	4299      	cmp	r1, r3
 8005ec6:	d002      	beq.n	8005ece <__sflush_r+0x92>
 8005ec8:	4628      	mov	r0, r5
 8005eca:	f000 f9d5 	bl	8006278 <_free_r>
 8005ece:	2000      	movs	r0, #0
 8005ed0:	6360      	str	r0, [r4, #52]	; 0x34
 8005ed2:	e7c1      	b.n	8005e58 <__sflush_r+0x1c>
 8005ed4:	6a21      	ldr	r1, [r4, #32]
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	4628      	mov	r0, r5
 8005eda:	47b0      	blx	r6
 8005edc:	1c41      	adds	r1, r0, #1
 8005ede:	d1c7      	bne.n	8005e70 <__sflush_r+0x34>
 8005ee0:	682b      	ldr	r3, [r5, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d0c4      	beq.n	8005e70 <__sflush_r+0x34>
 8005ee6:	2b1d      	cmp	r3, #29
 8005ee8:	d001      	beq.n	8005eee <__sflush_r+0xb2>
 8005eea:	2b16      	cmp	r3, #22
 8005eec:	d101      	bne.n	8005ef2 <__sflush_r+0xb6>
 8005eee:	602f      	str	r7, [r5, #0]
 8005ef0:	e7b1      	b.n	8005e56 <__sflush_r+0x1a>
 8005ef2:	89a3      	ldrh	r3, [r4, #12]
 8005ef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ef8:	81a3      	strh	r3, [r4, #12]
 8005efa:	e7ad      	b.n	8005e58 <__sflush_r+0x1c>
 8005efc:	690f      	ldr	r7, [r1, #16]
 8005efe:	2f00      	cmp	r7, #0
 8005f00:	d0a9      	beq.n	8005e56 <__sflush_r+0x1a>
 8005f02:	0793      	lsls	r3, r2, #30
 8005f04:	680e      	ldr	r6, [r1, #0]
 8005f06:	bf08      	it	eq
 8005f08:	694b      	ldreq	r3, [r1, #20]
 8005f0a:	600f      	str	r7, [r1, #0]
 8005f0c:	bf18      	it	ne
 8005f0e:	2300      	movne	r3, #0
 8005f10:	eba6 0807 	sub.w	r8, r6, r7
 8005f14:	608b      	str	r3, [r1, #8]
 8005f16:	f1b8 0f00 	cmp.w	r8, #0
 8005f1a:	dd9c      	ble.n	8005e56 <__sflush_r+0x1a>
 8005f1c:	6a21      	ldr	r1, [r4, #32]
 8005f1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005f20:	4643      	mov	r3, r8
 8005f22:	463a      	mov	r2, r7
 8005f24:	4628      	mov	r0, r5
 8005f26:	47b0      	blx	r6
 8005f28:	2800      	cmp	r0, #0
 8005f2a:	dc06      	bgt.n	8005f3a <__sflush_r+0xfe>
 8005f2c:	89a3      	ldrh	r3, [r4, #12]
 8005f2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f32:	81a3      	strh	r3, [r4, #12]
 8005f34:	f04f 30ff 	mov.w	r0, #4294967295
 8005f38:	e78e      	b.n	8005e58 <__sflush_r+0x1c>
 8005f3a:	4407      	add	r7, r0
 8005f3c:	eba8 0800 	sub.w	r8, r8, r0
 8005f40:	e7e9      	b.n	8005f16 <__sflush_r+0xda>
 8005f42:	bf00      	nop
 8005f44:	20400001 	.word	0x20400001

08005f48 <_fflush_r>:
 8005f48:	b538      	push	{r3, r4, r5, lr}
 8005f4a:	690b      	ldr	r3, [r1, #16]
 8005f4c:	4605      	mov	r5, r0
 8005f4e:	460c      	mov	r4, r1
 8005f50:	b913      	cbnz	r3, 8005f58 <_fflush_r+0x10>
 8005f52:	2500      	movs	r5, #0
 8005f54:	4628      	mov	r0, r5
 8005f56:	bd38      	pop	{r3, r4, r5, pc}
 8005f58:	b118      	cbz	r0, 8005f62 <_fflush_r+0x1a>
 8005f5a:	6983      	ldr	r3, [r0, #24]
 8005f5c:	b90b      	cbnz	r3, 8005f62 <_fflush_r+0x1a>
 8005f5e:	f000 f887 	bl	8006070 <__sinit>
 8005f62:	4b14      	ldr	r3, [pc, #80]	; (8005fb4 <_fflush_r+0x6c>)
 8005f64:	429c      	cmp	r4, r3
 8005f66:	d11b      	bne.n	8005fa0 <_fflush_r+0x58>
 8005f68:	686c      	ldr	r4, [r5, #4]
 8005f6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d0ef      	beq.n	8005f52 <_fflush_r+0xa>
 8005f72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005f74:	07d0      	lsls	r0, r2, #31
 8005f76:	d404      	bmi.n	8005f82 <_fflush_r+0x3a>
 8005f78:	0599      	lsls	r1, r3, #22
 8005f7a:	d402      	bmi.n	8005f82 <_fflush_r+0x3a>
 8005f7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f7e:	f000 f915 	bl	80061ac <__retarget_lock_acquire_recursive>
 8005f82:	4628      	mov	r0, r5
 8005f84:	4621      	mov	r1, r4
 8005f86:	f7ff ff59 	bl	8005e3c <__sflush_r>
 8005f8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f8c:	07da      	lsls	r2, r3, #31
 8005f8e:	4605      	mov	r5, r0
 8005f90:	d4e0      	bmi.n	8005f54 <_fflush_r+0xc>
 8005f92:	89a3      	ldrh	r3, [r4, #12]
 8005f94:	059b      	lsls	r3, r3, #22
 8005f96:	d4dd      	bmi.n	8005f54 <_fflush_r+0xc>
 8005f98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f9a:	f000 f908 	bl	80061ae <__retarget_lock_release_recursive>
 8005f9e:	e7d9      	b.n	8005f54 <_fflush_r+0xc>
 8005fa0:	4b05      	ldr	r3, [pc, #20]	; (8005fb8 <_fflush_r+0x70>)
 8005fa2:	429c      	cmp	r4, r3
 8005fa4:	d101      	bne.n	8005faa <_fflush_r+0x62>
 8005fa6:	68ac      	ldr	r4, [r5, #8]
 8005fa8:	e7df      	b.n	8005f6a <_fflush_r+0x22>
 8005faa:	4b04      	ldr	r3, [pc, #16]	; (8005fbc <_fflush_r+0x74>)
 8005fac:	429c      	cmp	r4, r3
 8005fae:	bf08      	it	eq
 8005fb0:	68ec      	ldreq	r4, [r5, #12]
 8005fb2:	e7da      	b.n	8005f6a <_fflush_r+0x22>
 8005fb4:	08006e9c 	.word	0x08006e9c
 8005fb8:	08006ebc 	.word	0x08006ebc
 8005fbc:	08006e7c 	.word	0x08006e7c

08005fc0 <std>:
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	b510      	push	{r4, lr}
 8005fc4:	4604      	mov	r4, r0
 8005fc6:	e9c0 3300 	strd	r3, r3, [r0]
 8005fca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005fce:	6083      	str	r3, [r0, #8]
 8005fd0:	8181      	strh	r1, [r0, #12]
 8005fd2:	6643      	str	r3, [r0, #100]	; 0x64
 8005fd4:	81c2      	strh	r2, [r0, #14]
 8005fd6:	6183      	str	r3, [r0, #24]
 8005fd8:	4619      	mov	r1, r3
 8005fda:	2208      	movs	r2, #8
 8005fdc:	305c      	adds	r0, #92	; 0x5c
 8005fde:	f7ff fdd7 	bl	8005b90 <memset>
 8005fe2:	4b05      	ldr	r3, [pc, #20]	; (8005ff8 <std+0x38>)
 8005fe4:	6263      	str	r3, [r4, #36]	; 0x24
 8005fe6:	4b05      	ldr	r3, [pc, #20]	; (8005ffc <std+0x3c>)
 8005fe8:	62a3      	str	r3, [r4, #40]	; 0x28
 8005fea:	4b05      	ldr	r3, [pc, #20]	; (8006000 <std+0x40>)
 8005fec:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005fee:	4b05      	ldr	r3, [pc, #20]	; (8006004 <std+0x44>)
 8005ff0:	6224      	str	r4, [r4, #32]
 8005ff2:	6323      	str	r3, [r4, #48]	; 0x30
 8005ff4:	bd10      	pop	{r4, pc}
 8005ff6:	bf00      	nop
 8005ff8:	080069c9 	.word	0x080069c9
 8005ffc:	080069eb 	.word	0x080069eb
 8006000:	08006a23 	.word	0x08006a23
 8006004:	08006a47 	.word	0x08006a47

08006008 <_cleanup_r>:
 8006008:	4901      	ldr	r1, [pc, #4]	; (8006010 <_cleanup_r+0x8>)
 800600a:	f000 b8af 	b.w	800616c <_fwalk_reent>
 800600e:	bf00      	nop
 8006010:	08005f49 	.word	0x08005f49

08006014 <__sfmoreglue>:
 8006014:	b570      	push	{r4, r5, r6, lr}
 8006016:	1e4a      	subs	r2, r1, #1
 8006018:	2568      	movs	r5, #104	; 0x68
 800601a:	4355      	muls	r5, r2
 800601c:	460e      	mov	r6, r1
 800601e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006022:	f000 f979 	bl	8006318 <_malloc_r>
 8006026:	4604      	mov	r4, r0
 8006028:	b140      	cbz	r0, 800603c <__sfmoreglue+0x28>
 800602a:	2100      	movs	r1, #0
 800602c:	e9c0 1600 	strd	r1, r6, [r0]
 8006030:	300c      	adds	r0, #12
 8006032:	60a0      	str	r0, [r4, #8]
 8006034:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006038:	f7ff fdaa 	bl	8005b90 <memset>
 800603c:	4620      	mov	r0, r4
 800603e:	bd70      	pop	{r4, r5, r6, pc}

08006040 <__sfp_lock_acquire>:
 8006040:	4801      	ldr	r0, [pc, #4]	; (8006048 <__sfp_lock_acquire+0x8>)
 8006042:	f000 b8b3 	b.w	80061ac <__retarget_lock_acquire_recursive>
 8006046:	bf00      	nop
 8006048:	2000086c 	.word	0x2000086c

0800604c <__sfp_lock_release>:
 800604c:	4801      	ldr	r0, [pc, #4]	; (8006054 <__sfp_lock_release+0x8>)
 800604e:	f000 b8ae 	b.w	80061ae <__retarget_lock_release_recursive>
 8006052:	bf00      	nop
 8006054:	2000086c 	.word	0x2000086c

08006058 <__sinit_lock_acquire>:
 8006058:	4801      	ldr	r0, [pc, #4]	; (8006060 <__sinit_lock_acquire+0x8>)
 800605a:	f000 b8a7 	b.w	80061ac <__retarget_lock_acquire_recursive>
 800605e:	bf00      	nop
 8006060:	20000867 	.word	0x20000867

08006064 <__sinit_lock_release>:
 8006064:	4801      	ldr	r0, [pc, #4]	; (800606c <__sinit_lock_release+0x8>)
 8006066:	f000 b8a2 	b.w	80061ae <__retarget_lock_release_recursive>
 800606a:	bf00      	nop
 800606c:	20000867 	.word	0x20000867

08006070 <__sinit>:
 8006070:	b510      	push	{r4, lr}
 8006072:	4604      	mov	r4, r0
 8006074:	f7ff fff0 	bl	8006058 <__sinit_lock_acquire>
 8006078:	69a3      	ldr	r3, [r4, #24]
 800607a:	b11b      	cbz	r3, 8006084 <__sinit+0x14>
 800607c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006080:	f7ff bff0 	b.w	8006064 <__sinit_lock_release>
 8006084:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006088:	6523      	str	r3, [r4, #80]	; 0x50
 800608a:	4b13      	ldr	r3, [pc, #76]	; (80060d8 <__sinit+0x68>)
 800608c:	4a13      	ldr	r2, [pc, #76]	; (80060dc <__sinit+0x6c>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	62a2      	str	r2, [r4, #40]	; 0x28
 8006092:	42a3      	cmp	r3, r4
 8006094:	bf04      	itt	eq
 8006096:	2301      	moveq	r3, #1
 8006098:	61a3      	streq	r3, [r4, #24]
 800609a:	4620      	mov	r0, r4
 800609c:	f000 f820 	bl	80060e0 <__sfp>
 80060a0:	6060      	str	r0, [r4, #4]
 80060a2:	4620      	mov	r0, r4
 80060a4:	f000 f81c 	bl	80060e0 <__sfp>
 80060a8:	60a0      	str	r0, [r4, #8]
 80060aa:	4620      	mov	r0, r4
 80060ac:	f000 f818 	bl	80060e0 <__sfp>
 80060b0:	2200      	movs	r2, #0
 80060b2:	60e0      	str	r0, [r4, #12]
 80060b4:	2104      	movs	r1, #4
 80060b6:	6860      	ldr	r0, [r4, #4]
 80060b8:	f7ff ff82 	bl	8005fc0 <std>
 80060bc:	68a0      	ldr	r0, [r4, #8]
 80060be:	2201      	movs	r2, #1
 80060c0:	2109      	movs	r1, #9
 80060c2:	f7ff ff7d 	bl	8005fc0 <std>
 80060c6:	68e0      	ldr	r0, [r4, #12]
 80060c8:	2202      	movs	r2, #2
 80060ca:	2112      	movs	r1, #18
 80060cc:	f7ff ff78 	bl	8005fc0 <std>
 80060d0:	2301      	movs	r3, #1
 80060d2:	61a3      	str	r3, [r4, #24]
 80060d4:	e7d2      	b.n	800607c <__sinit+0xc>
 80060d6:	bf00      	nop
 80060d8:	08006e78 	.word	0x08006e78
 80060dc:	08006009 	.word	0x08006009

080060e0 <__sfp>:
 80060e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060e2:	4607      	mov	r7, r0
 80060e4:	f7ff ffac 	bl	8006040 <__sfp_lock_acquire>
 80060e8:	4b1e      	ldr	r3, [pc, #120]	; (8006164 <__sfp+0x84>)
 80060ea:	681e      	ldr	r6, [r3, #0]
 80060ec:	69b3      	ldr	r3, [r6, #24]
 80060ee:	b913      	cbnz	r3, 80060f6 <__sfp+0x16>
 80060f0:	4630      	mov	r0, r6
 80060f2:	f7ff ffbd 	bl	8006070 <__sinit>
 80060f6:	3648      	adds	r6, #72	; 0x48
 80060f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80060fc:	3b01      	subs	r3, #1
 80060fe:	d503      	bpl.n	8006108 <__sfp+0x28>
 8006100:	6833      	ldr	r3, [r6, #0]
 8006102:	b30b      	cbz	r3, 8006148 <__sfp+0x68>
 8006104:	6836      	ldr	r6, [r6, #0]
 8006106:	e7f7      	b.n	80060f8 <__sfp+0x18>
 8006108:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800610c:	b9d5      	cbnz	r5, 8006144 <__sfp+0x64>
 800610e:	4b16      	ldr	r3, [pc, #88]	; (8006168 <__sfp+0x88>)
 8006110:	60e3      	str	r3, [r4, #12]
 8006112:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006116:	6665      	str	r5, [r4, #100]	; 0x64
 8006118:	f000 f847 	bl	80061aa <__retarget_lock_init_recursive>
 800611c:	f7ff ff96 	bl	800604c <__sfp_lock_release>
 8006120:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006124:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006128:	6025      	str	r5, [r4, #0]
 800612a:	61a5      	str	r5, [r4, #24]
 800612c:	2208      	movs	r2, #8
 800612e:	4629      	mov	r1, r5
 8006130:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006134:	f7ff fd2c 	bl	8005b90 <memset>
 8006138:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800613c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006140:	4620      	mov	r0, r4
 8006142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006144:	3468      	adds	r4, #104	; 0x68
 8006146:	e7d9      	b.n	80060fc <__sfp+0x1c>
 8006148:	2104      	movs	r1, #4
 800614a:	4638      	mov	r0, r7
 800614c:	f7ff ff62 	bl	8006014 <__sfmoreglue>
 8006150:	4604      	mov	r4, r0
 8006152:	6030      	str	r0, [r6, #0]
 8006154:	2800      	cmp	r0, #0
 8006156:	d1d5      	bne.n	8006104 <__sfp+0x24>
 8006158:	f7ff ff78 	bl	800604c <__sfp_lock_release>
 800615c:	230c      	movs	r3, #12
 800615e:	603b      	str	r3, [r7, #0]
 8006160:	e7ee      	b.n	8006140 <__sfp+0x60>
 8006162:	bf00      	nop
 8006164:	08006e78 	.word	0x08006e78
 8006168:	ffff0001 	.word	0xffff0001

0800616c <_fwalk_reent>:
 800616c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006170:	4606      	mov	r6, r0
 8006172:	4688      	mov	r8, r1
 8006174:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006178:	2700      	movs	r7, #0
 800617a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800617e:	f1b9 0901 	subs.w	r9, r9, #1
 8006182:	d505      	bpl.n	8006190 <_fwalk_reent+0x24>
 8006184:	6824      	ldr	r4, [r4, #0]
 8006186:	2c00      	cmp	r4, #0
 8006188:	d1f7      	bne.n	800617a <_fwalk_reent+0xe>
 800618a:	4638      	mov	r0, r7
 800618c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006190:	89ab      	ldrh	r3, [r5, #12]
 8006192:	2b01      	cmp	r3, #1
 8006194:	d907      	bls.n	80061a6 <_fwalk_reent+0x3a>
 8006196:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800619a:	3301      	adds	r3, #1
 800619c:	d003      	beq.n	80061a6 <_fwalk_reent+0x3a>
 800619e:	4629      	mov	r1, r5
 80061a0:	4630      	mov	r0, r6
 80061a2:	47c0      	blx	r8
 80061a4:	4307      	orrs	r7, r0
 80061a6:	3568      	adds	r5, #104	; 0x68
 80061a8:	e7e9      	b.n	800617e <_fwalk_reent+0x12>

080061aa <__retarget_lock_init_recursive>:
 80061aa:	4770      	bx	lr

080061ac <__retarget_lock_acquire_recursive>:
 80061ac:	4770      	bx	lr

080061ae <__retarget_lock_release_recursive>:
 80061ae:	4770      	bx	lr

080061b0 <__swhatbuf_r>:
 80061b0:	b570      	push	{r4, r5, r6, lr}
 80061b2:	460e      	mov	r6, r1
 80061b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061b8:	2900      	cmp	r1, #0
 80061ba:	b096      	sub	sp, #88	; 0x58
 80061bc:	4614      	mov	r4, r2
 80061be:	461d      	mov	r5, r3
 80061c0:	da07      	bge.n	80061d2 <__swhatbuf_r+0x22>
 80061c2:	2300      	movs	r3, #0
 80061c4:	602b      	str	r3, [r5, #0]
 80061c6:	89b3      	ldrh	r3, [r6, #12]
 80061c8:	061a      	lsls	r2, r3, #24
 80061ca:	d410      	bmi.n	80061ee <__swhatbuf_r+0x3e>
 80061cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061d0:	e00e      	b.n	80061f0 <__swhatbuf_r+0x40>
 80061d2:	466a      	mov	r2, sp
 80061d4:	f000 fc5e 	bl	8006a94 <_fstat_r>
 80061d8:	2800      	cmp	r0, #0
 80061da:	dbf2      	blt.n	80061c2 <__swhatbuf_r+0x12>
 80061dc:	9a01      	ldr	r2, [sp, #4]
 80061de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80061e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80061e6:	425a      	negs	r2, r3
 80061e8:	415a      	adcs	r2, r3
 80061ea:	602a      	str	r2, [r5, #0]
 80061ec:	e7ee      	b.n	80061cc <__swhatbuf_r+0x1c>
 80061ee:	2340      	movs	r3, #64	; 0x40
 80061f0:	2000      	movs	r0, #0
 80061f2:	6023      	str	r3, [r4, #0]
 80061f4:	b016      	add	sp, #88	; 0x58
 80061f6:	bd70      	pop	{r4, r5, r6, pc}

080061f8 <__smakebuf_r>:
 80061f8:	898b      	ldrh	r3, [r1, #12]
 80061fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80061fc:	079d      	lsls	r5, r3, #30
 80061fe:	4606      	mov	r6, r0
 8006200:	460c      	mov	r4, r1
 8006202:	d507      	bpl.n	8006214 <__smakebuf_r+0x1c>
 8006204:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006208:	6023      	str	r3, [r4, #0]
 800620a:	6123      	str	r3, [r4, #16]
 800620c:	2301      	movs	r3, #1
 800620e:	6163      	str	r3, [r4, #20]
 8006210:	b002      	add	sp, #8
 8006212:	bd70      	pop	{r4, r5, r6, pc}
 8006214:	ab01      	add	r3, sp, #4
 8006216:	466a      	mov	r2, sp
 8006218:	f7ff ffca 	bl	80061b0 <__swhatbuf_r>
 800621c:	9900      	ldr	r1, [sp, #0]
 800621e:	4605      	mov	r5, r0
 8006220:	4630      	mov	r0, r6
 8006222:	f000 f879 	bl	8006318 <_malloc_r>
 8006226:	b948      	cbnz	r0, 800623c <__smakebuf_r+0x44>
 8006228:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800622c:	059a      	lsls	r2, r3, #22
 800622e:	d4ef      	bmi.n	8006210 <__smakebuf_r+0x18>
 8006230:	f023 0303 	bic.w	r3, r3, #3
 8006234:	f043 0302 	orr.w	r3, r3, #2
 8006238:	81a3      	strh	r3, [r4, #12]
 800623a:	e7e3      	b.n	8006204 <__smakebuf_r+0xc>
 800623c:	4b0d      	ldr	r3, [pc, #52]	; (8006274 <__smakebuf_r+0x7c>)
 800623e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006240:	89a3      	ldrh	r3, [r4, #12]
 8006242:	6020      	str	r0, [r4, #0]
 8006244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006248:	81a3      	strh	r3, [r4, #12]
 800624a:	9b00      	ldr	r3, [sp, #0]
 800624c:	6163      	str	r3, [r4, #20]
 800624e:	9b01      	ldr	r3, [sp, #4]
 8006250:	6120      	str	r0, [r4, #16]
 8006252:	b15b      	cbz	r3, 800626c <__smakebuf_r+0x74>
 8006254:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006258:	4630      	mov	r0, r6
 800625a:	f000 fc2d 	bl	8006ab8 <_isatty_r>
 800625e:	b128      	cbz	r0, 800626c <__smakebuf_r+0x74>
 8006260:	89a3      	ldrh	r3, [r4, #12]
 8006262:	f023 0303 	bic.w	r3, r3, #3
 8006266:	f043 0301 	orr.w	r3, r3, #1
 800626a:	81a3      	strh	r3, [r4, #12]
 800626c:	89a0      	ldrh	r0, [r4, #12]
 800626e:	4305      	orrs	r5, r0
 8006270:	81a5      	strh	r5, [r4, #12]
 8006272:	e7cd      	b.n	8006210 <__smakebuf_r+0x18>
 8006274:	08006009 	.word	0x08006009

08006278 <_free_r>:
 8006278:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800627a:	2900      	cmp	r1, #0
 800627c:	d048      	beq.n	8006310 <_free_r+0x98>
 800627e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006282:	9001      	str	r0, [sp, #4]
 8006284:	2b00      	cmp	r3, #0
 8006286:	f1a1 0404 	sub.w	r4, r1, #4
 800628a:	bfb8      	it	lt
 800628c:	18e4      	addlt	r4, r4, r3
 800628e:	f000 fc35 	bl	8006afc <__malloc_lock>
 8006292:	4a20      	ldr	r2, [pc, #128]	; (8006314 <_free_r+0x9c>)
 8006294:	9801      	ldr	r0, [sp, #4]
 8006296:	6813      	ldr	r3, [r2, #0]
 8006298:	4615      	mov	r5, r2
 800629a:	b933      	cbnz	r3, 80062aa <_free_r+0x32>
 800629c:	6063      	str	r3, [r4, #4]
 800629e:	6014      	str	r4, [r2, #0]
 80062a0:	b003      	add	sp, #12
 80062a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062a6:	f000 bc2f 	b.w	8006b08 <__malloc_unlock>
 80062aa:	42a3      	cmp	r3, r4
 80062ac:	d90b      	bls.n	80062c6 <_free_r+0x4e>
 80062ae:	6821      	ldr	r1, [r4, #0]
 80062b0:	1862      	adds	r2, r4, r1
 80062b2:	4293      	cmp	r3, r2
 80062b4:	bf04      	itt	eq
 80062b6:	681a      	ldreq	r2, [r3, #0]
 80062b8:	685b      	ldreq	r3, [r3, #4]
 80062ba:	6063      	str	r3, [r4, #4]
 80062bc:	bf04      	itt	eq
 80062be:	1852      	addeq	r2, r2, r1
 80062c0:	6022      	streq	r2, [r4, #0]
 80062c2:	602c      	str	r4, [r5, #0]
 80062c4:	e7ec      	b.n	80062a0 <_free_r+0x28>
 80062c6:	461a      	mov	r2, r3
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	b10b      	cbz	r3, 80062d0 <_free_r+0x58>
 80062cc:	42a3      	cmp	r3, r4
 80062ce:	d9fa      	bls.n	80062c6 <_free_r+0x4e>
 80062d0:	6811      	ldr	r1, [r2, #0]
 80062d2:	1855      	adds	r5, r2, r1
 80062d4:	42a5      	cmp	r5, r4
 80062d6:	d10b      	bne.n	80062f0 <_free_r+0x78>
 80062d8:	6824      	ldr	r4, [r4, #0]
 80062da:	4421      	add	r1, r4
 80062dc:	1854      	adds	r4, r2, r1
 80062de:	42a3      	cmp	r3, r4
 80062e0:	6011      	str	r1, [r2, #0]
 80062e2:	d1dd      	bne.n	80062a0 <_free_r+0x28>
 80062e4:	681c      	ldr	r4, [r3, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	6053      	str	r3, [r2, #4]
 80062ea:	4421      	add	r1, r4
 80062ec:	6011      	str	r1, [r2, #0]
 80062ee:	e7d7      	b.n	80062a0 <_free_r+0x28>
 80062f0:	d902      	bls.n	80062f8 <_free_r+0x80>
 80062f2:	230c      	movs	r3, #12
 80062f4:	6003      	str	r3, [r0, #0]
 80062f6:	e7d3      	b.n	80062a0 <_free_r+0x28>
 80062f8:	6825      	ldr	r5, [r4, #0]
 80062fa:	1961      	adds	r1, r4, r5
 80062fc:	428b      	cmp	r3, r1
 80062fe:	bf04      	itt	eq
 8006300:	6819      	ldreq	r1, [r3, #0]
 8006302:	685b      	ldreq	r3, [r3, #4]
 8006304:	6063      	str	r3, [r4, #4]
 8006306:	bf04      	itt	eq
 8006308:	1949      	addeq	r1, r1, r5
 800630a:	6021      	streq	r1, [r4, #0]
 800630c:	6054      	str	r4, [r2, #4]
 800630e:	e7c7      	b.n	80062a0 <_free_r+0x28>
 8006310:	b003      	add	sp, #12
 8006312:	bd30      	pop	{r4, r5, pc}
 8006314:	20000770 	.word	0x20000770

08006318 <_malloc_r>:
 8006318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800631a:	1ccd      	adds	r5, r1, #3
 800631c:	f025 0503 	bic.w	r5, r5, #3
 8006320:	3508      	adds	r5, #8
 8006322:	2d0c      	cmp	r5, #12
 8006324:	bf38      	it	cc
 8006326:	250c      	movcc	r5, #12
 8006328:	2d00      	cmp	r5, #0
 800632a:	4606      	mov	r6, r0
 800632c:	db01      	blt.n	8006332 <_malloc_r+0x1a>
 800632e:	42a9      	cmp	r1, r5
 8006330:	d903      	bls.n	800633a <_malloc_r+0x22>
 8006332:	230c      	movs	r3, #12
 8006334:	6033      	str	r3, [r6, #0]
 8006336:	2000      	movs	r0, #0
 8006338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800633a:	f000 fbdf 	bl	8006afc <__malloc_lock>
 800633e:	4921      	ldr	r1, [pc, #132]	; (80063c4 <_malloc_r+0xac>)
 8006340:	680a      	ldr	r2, [r1, #0]
 8006342:	4614      	mov	r4, r2
 8006344:	b99c      	cbnz	r4, 800636e <_malloc_r+0x56>
 8006346:	4f20      	ldr	r7, [pc, #128]	; (80063c8 <_malloc_r+0xb0>)
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	b923      	cbnz	r3, 8006356 <_malloc_r+0x3e>
 800634c:	4621      	mov	r1, r4
 800634e:	4630      	mov	r0, r6
 8006350:	f000 fb2a 	bl	80069a8 <_sbrk_r>
 8006354:	6038      	str	r0, [r7, #0]
 8006356:	4629      	mov	r1, r5
 8006358:	4630      	mov	r0, r6
 800635a:	f000 fb25 	bl	80069a8 <_sbrk_r>
 800635e:	1c43      	adds	r3, r0, #1
 8006360:	d123      	bne.n	80063aa <_malloc_r+0x92>
 8006362:	230c      	movs	r3, #12
 8006364:	6033      	str	r3, [r6, #0]
 8006366:	4630      	mov	r0, r6
 8006368:	f000 fbce 	bl	8006b08 <__malloc_unlock>
 800636c:	e7e3      	b.n	8006336 <_malloc_r+0x1e>
 800636e:	6823      	ldr	r3, [r4, #0]
 8006370:	1b5b      	subs	r3, r3, r5
 8006372:	d417      	bmi.n	80063a4 <_malloc_r+0x8c>
 8006374:	2b0b      	cmp	r3, #11
 8006376:	d903      	bls.n	8006380 <_malloc_r+0x68>
 8006378:	6023      	str	r3, [r4, #0]
 800637a:	441c      	add	r4, r3
 800637c:	6025      	str	r5, [r4, #0]
 800637e:	e004      	b.n	800638a <_malloc_r+0x72>
 8006380:	6863      	ldr	r3, [r4, #4]
 8006382:	42a2      	cmp	r2, r4
 8006384:	bf0c      	ite	eq
 8006386:	600b      	streq	r3, [r1, #0]
 8006388:	6053      	strne	r3, [r2, #4]
 800638a:	4630      	mov	r0, r6
 800638c:	f000 fbbc 	bl	8006b08 <__malloc_unlock>
 8006390:	f104 000b 	add.w	r0, r4, #11
 8006394:	1d23      	adds	r3, r4, #4
 8006396:	f020 0007 	bic.w	r0, r0, #7
 800639a:	1ac2      	subs	r2, r0, r3
 800639c:	d0cc      	beq.n	8006338 <_malloc_r+0x20>
 800639e:	1a1b      	subs	r3, r3, r0
 80063a0:	50a3      	str	r3, [r4, r2]
 80063a2:	e7c9      	b.n	8006338 <_malloc_r+0x20>
 80063a4:	4622      	mov	r2, r4
 80063a6:	6864      	ldr	r4, [r4, #4]
 80063a8:	e7cc      	b.n	8006344 <_malloc_r+0x2c>
 80063aa:	1cc4      	adds	r4, r0, #3
 80063ac:	f024 0403 	bic.w	r4, r4, #3
 80063b0:	42a0      	cmp	r0, r4
 80063b2:	d0e3      	beq.n	800637c <_malloc_r+0x64>
 80063b4:	1a21      	subs	r1, r4, r0
 80063b6:	4630      	mov	r0, r6
 80063b8:	f000 faf6 	bl	80069a8 <_sbrk_r>
 80063bc:	3001      	adds	r0, #1
 80063be:	d1dd      	bne.n	800637c <_malloc_r+0x64>
 80063c0:	e7cf      	b.n	8006362 <_malloc_r+0x4a>
 80063c2:	bf00      	nop
 80063c4:	20000770 	.word	0x20000770
 80063c8:	20000774 	.word	0x20000774

080063cc <__sfputc_r>:
 80063cc:	6893      	ldr	r3, [r2, #8]
 80063ce:	3b01      	subs	r3, #1
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	b410      	push	{r4}
 80063d4:	6093      	str	r3, [r2, #8]
 80063d6:	da08      	bge.n	80063ea <__sfputc_r+0x1e>
 80063d8:	6994      	ldr	r4, [r2, #24]
 80063da:	42a3      	cmp	r3, r4
 80063dc:	db01      	blt.n	80063e2 <__sfputc_r+0x16>
 80063de:	290a      	cmp	r1, #10
 80063e0:	d103      	bne.n	80063ea <__sfputc_r+0x1e>
 80063e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063e6:	f7ff bc69 	b.w	8005cbc <__swbuf_r>
 80063ea:	6813      	ldr	r3, [r2, #0]
 80063ec:	1c58      	adds	r0, r3, #1
 80063ee:	6010      	str	r0, [r2, #0]
 80063f0:	7019      	strb	r1, [r3, #0]
 80063f2:	4608      	mov	r0, r1
 80063f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063f8:	4770      	bx	lr

080063fa <__sfputs_r>:
 80063fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063fc:	4606      	mov	r6, r0
 80063fe:	460f      	mov	r7, r1
 8006400:	4614      	mov	r4, r2
 8006402:	18d5      	adds	r5, r2, r3
 8006404:	42ac      	cmp	r4, r5
 8006406:	d101      	bne.n	800640c <__sfputs_r+0x12>
 8006408:	2000      	movs	r0, #0
 800640a:	e007      	b.n	800641c <__sfputs_r+0x22>
 800640c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006410:	463a      	mov	r2, r7
 8006412:	4630      	mov	r0, r6
 8006414:	f7ff ffda 	bl	80063cc <__sfputc_r>
 8006418:	1c43      	adds	r3, r0, #1
 800641a:	d1f3      	bne.n	8006404 <__sfputs_r+0xa>
 800641c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006420 <_vfiprintf_r>:
 8006420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006424:	460d      	mov	r5, r1
 8006426:	b09d      	sub	sp, #116	; 0x74
 8006428:	4614      	mov	r4, r2
 800642a:	4698      	mov	r8, r3
 800642c:	4606      	mov	r6, r0
 800642e:	b118      	cbz	r0, 8006438 <_vfiprintf_r+0x18>
 8006430:	6983      	ldr	r3, [r0, #24]
 8006432:	b90b      	cbnz	r3, 8006438 <_vfiprintf_r+0x18>
 8006434:	f7ff fe1c 	bl	8006070 <__sinit>
 8006438:	4b89      	ldr	r3, [pc, #548]	; (8006660 <_vfiprintf_r+0x240>)
 800643a:	429d      	cmp	r5, r3
 800643c:	d11b      	bne.n	8006476 <_vfiprintf_r+0x56>
 800643e:	6875      	ldr	r5, [r6, #4]
 8006440:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006442:	07d9      	lsls	r1, r3, #31
 8006444:	d405      	bmi.n	8006452 <_vfiprintf_r+0x32>
 8006446:	89ab      	ldrh	r3, [r5, #12]
 8006448:	059a      	lsls	r2, r3, #22
 800644a:	d402      	bmi.n	8006452 <_vfiprintf_r+0x32>
 800644c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800644e:	f7ff fead 	bl	80061ac <__retarget_lock_acquire_recursive>
 8006452:	89ab      	ldrh	r3, [r5, #12]
 8006454:	071b      	lsls	r3, r3, #28
 8006456:	d501      	bpl.n	800645c <_vfiprintf_r+0x3c>
 8006458:	692b      	ldr	r3, [r5, #16]
 800645a:	b9eb      	cbnz	r3, 8006498 <_vfiprintf_r+0x78>
 800645c:	4629      	mov	r1, r5
 800645e:	4630      	mov	r0, r6
 8006460:	f7ff fc7e 	bl	8005d60 <__swsetup_r>
 8006464:	b1c0      	cbz	r0, 8006498 <_vfiprintf_r+0x78>
 8006466:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006468:	07dc      	lsls	r4, r3, #31
 800646a:	d50e      	bpl.n	800648a <_vfiprintf_r+0x6a>
 800646c:	f04f 30ff 	mov.w	r0, #4294967295
 8006470:	b01d      	add	sp, #116	; 0x74
 8006472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006476:	4b7b      	ldr	r3, [pc, #492]	; (8006664 <_vfiprintf_r+0x244>)
 8006478:	429d      	cmp	r5, r3
 800647a:	d101      	bne.n	8006480 <_vfiprintf_r+0x60>
 800647c:	68b5      	ldr	r5, [r6, #8]
 800647e:	e7df      	b.n	8006440 <_vfiprintf_r+0x20>
 8006480:	4b79      	ldr	r3, [pc, #484]	; (8006668 <_vfiprintf_r+0x248>)
 8006482:	429d      	cmp	r5, r3
 8006484:	bf08      	it	eq
 8006486:	68f5      	ldreq	r5, [r6, #12]
 8006488:	e7da      	b.n	8006440 <_vfiprintf_r+0x20>
 800648a:	89ab      	ldrh	r3, [r5, #12]
 800648c:	0598      	lsls	r0, r3, #22
 800648e:	d4ed      	bmi.n	800646c <_vfiprintf_r+0x4c>
 8006490:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006492:	f7ff fe8c 	bl	80061ae <__retarget_lock_release_recursive>
 8006496:	e7e9      	b.n	800646c <_vfiprintf_r+0x4c>
 8006498:	2300      	movs	r3, #0
 800649a:	9309      	str	r3, [sp, #36]	; 0x24
 800649c:	2320      	movs	r3, #32
 800649e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80064a6:	2330      	movs	r3, #48	; 0x30
 80064a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800666c <_vfiprintf_r+0x24c>
 80064ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064b0:	f04f 0901 	mov.w	r9, #1
 80064b4:	4623      	mov	r3, r4
 80064b6:	469a      	mov	sl, r3
 80064b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064bc:	b10a      	cbz	r2, 80064c2 <_vfiprintf_r+0xa2>
 80064be:	2a25      	cmp	r2, #37	; 0x25
 80064c0:	d1f9      	bne.n	80064b6 <_vfiprintf_r+0x96>
 80064c2:	ebba 0b04 	subs.w	fp, sl, r4
 80064c6:	d00b      	beq.n	80064e0 <_vfiprintf_r+0xc0>
 80064c8:	465b      	mov	r3, fp
 80064ca:	4622      	mov	r2, r4
 80064cc:	4629      	mov	r1, r5
 80064ce:	4630      	mov	r0, r6
 80064d0:	f7ff ff93 	bl	80063fa <__sfputs_r>
 80064d4:	3001      	adds	r0, #1
 80064d6:	f000 80aa 	beq.w	800662e <_vfiprintf_r+0x20e>
 80064da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064dc:	445a      	add	r2, fp
 80064de:	9209      	str	r2, [sp, #36]	; 0x24
 80064e0:	f89a 3000 	ldrb.w	r3, [sl]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	f000 80a2 	beq.w	800662e <_vfiprintf_r+0x20e>
 80064ea:	2300      	movs	r3, #0
 80064ec:	f04f 32ff 	mov.w	r2, #4294967295
 80064f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064f4:	f10a 0a01 	add.w	sl, sl, #1
 80064f8:	9304      	str	r3, [sp, #16]
 80064fa:	9307      	str	r3, [sp, #28]
 80064fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006500:	931a      	str	r3, [sp, #104]	; 0x68
 8006502:	4654      	mov	r4, sl
 8006504:	2205      	movs	r2, #5
 8006506:	f814 1b01 	ldrb.w	r1, [r4], #1
 800650a:	4858      	ldr	r0, [pc, #352]	; (800666c <_vfiprintf_r+0x24c>)
 800650c:	f7f9 fe70 	bl	80001f0 <memchr>
 8006510:	9a04      	ldr	r2, [sp, #16]
 8006512:	b9d8      	cbnz	r0, 800654c <_vfiprintf_r+0x12c>
 8006514:	06d1      	lsls	r1, r2, #27
 8006516:	bf44      	itt	mi
 8006518:	2320      	movmi	r3, #32
 800651a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800651e:	0713      	lsls	r3, r2, #28
 8006520:	bf44      	itt	mi
 8006522:	232b      	movmi	r3, #43	; 0x2b
 8006524:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006528:	f89a 3000 	ldrb.w	r3, [sl]
 800652c:	2b2a      	cmp	r3, #42	; 0x2a
 800652e:	d015      	beq.n	800655c <_vfiprintf_r+0x13c>
 8006530:	9a07      	ldr	r2, [sp, #28]
 8006532:	4654      	mov	r4, sl
 8006534:	2000      	movs	r0, #0
 8006536:	f04f 0c0a 	mov.w	ip, #10
 800653a:	4621      	mov	r1, r4
 800653c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006540:	3b30      	subs	r3, #48	; 0x30
 8006542:	2b09      	cmp	r3, #9
 8006544:	d94e      	bls.n	80065e4 <_vfiprintf_r+0x1c4>
 8006546:	b1b0      	cbz	r0, 8006576 <_vfiprintf_r+0x156>
 8006548:	9207      	str	r2, [sp, #28]
 800654a:	e014      	b.n	8006576 <_vfiprintf_r+0x156>
 800654c:	eba0 0308 	sub.w	r3, r0, r8
 8006550:	fa09 f303 	lsl.w	r3, r9, r3
 8006554:	4313      	orrs	r3, r2
 8006556:	9304      	str	r3, [sp, #16]
 8006558:	46a2      	mov	sl, r4
 800655a:	e7d2      	b.n	8006502 <_vfiprintf_r+0xe2>
 800655c:	9b03      	ldr	r3, [sp, #12]
 800655e:	1d19      	adds	r1, r3, #4
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	9103      	str	r1, [sp, #12]
 8006564:	2b00      	cmp	r3, #0
 8006566:	bfbb      	ittet	lt
 8006568:	425b      	neglt	r3, r3
 800656a:	f042 0202 	orrlt.w	r2, r2, #2
 800656e:	9307      	strge	r3, [sp, #28]
 8006570:	9307      	strlt	r3, [sp, #28]
 8006572:	bfb8      	it	lt
 8006574:	9204      	strlt	r2, [sp, #16]
 8006576:	7823      	ldrb	r3, [r4, #0]
 8006578:	2b2e      	cmp	r3, #46	; 0x2e
 800657a:	d10c      	bne.n	8006596 <_vfiprintf_r+0x176>
 800657c:	7863      	ldrb	r3, [r4, #1]
 800657e:	2b2a      	cmp	r3, #42	; 0x2a
 8006580:	d135      	bne.n	80065ee <_vfiprintf_r+0x1ce>
 8006582:	9b03      	ldr	r3, [sp, #12]
 8006584:	1d1a      	adds	r2, r3, #4
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	9203      	str	r2, [sp, #12]
 800658a:	2b00      	cmp	r3, #0
 800658c:	bfb8      	it	lt
 800658e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006592:	3402      	adds	r4, #2
 8006594:	9305      	str	r3, [sp, #20]
 8006596:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800667c <_vfiprintf_r+0x25c>
 800659a:	7821      	ldrb	r1, [r4, #0]
 800659c:	2203      	movs	r2, #3
 800659e:	4650      	mov	r0, sl
 80065a0:	f7f9 fe26 	bl	80001f0 <memchr>
 80065a4:	b140      	cbz	r0, 80065b8 <_vfiprintf_r+0x198>
 80065a6:	2340      	movs	r3, #64	; 0x40
 80065a8:	eba0 000a 	sub.w	r0, r0, sl
 80065ac:	fa03 f000 	lsl.w	r0, r3, r0
 80065b0:	9b04      	ldr	r3, [sp, #16]
 80065b2:	4303      	orrs	r3, r0
 80065b4:	3401      	adds	r4, #1
 80065b6:	9304      	str	r3, [sp, #16]
 80065b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065bc:	482c      	ldr	r0, [pc, #176]	; (8006670 <_vfiprintf_r+0x250>)
 80065be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065c2:	2206      	movs	r2, #6
 80065c4:	f7f9 fe14 	bl	80001f0 <memchr>
 80065c8:	2800      	cmp	r0, #0
 80065ca:	d03f      	beq.n	800664c <_vfiprintf_r+0x22c>
 80065cc:	4b29      	ldr	r3, [pc, #164]	; (8006674 <_vfiprintf_r+0x254>)
 80065ce:	bb1b      	cbnz	r3, 8006618 <_vfiprintf_r+0x1f8>
 80065d0:	9b03      	ldr	r3, [sp, #12]
 80065d2:	3307      	adds	r3, #7
 80065d4:	f023 0307 	bic.w	r3, r3, #7
 80065d8:	3308      	adds	r3, #8
 80065da:	9303      	str	r3, [sp, #12]
 80065dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065de:	443b      	add	r3, r7
 80065e0:	9309      	str	r3, [sp, #36]	; 0x24
 80065e2:	e767      	b.n	80064b4 <_vfiprintf_r+0x94>
 80065e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80065e8:	460c      	mov	r4, r1
 80065ea:	2001      	movs	r0, #1
 80065ec:	e7a5      	b.n	800653a <_vfiprintf_r+0x11a>
 80065ee:	2300      	movs	r3, #0
 80065f0:	3401      	adds	r4, #1
 80065f2:	9305      	str	r3, [sp, #20]
 80065f4:	4619      	mov	r1, r3
 80065f6:	f04f 0c0a 	mov.w	ip, #10
 80065fa:	4620      	mov	r0, r4
 80065fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006600:	3a30      	subs	r2, #48	; 0x30
 8006602:	2a09      	cmp	r2, #9
 8006604:	d903      	bls.n	800660e <_vfiprintf_r+0x1ee>
 8006606:	2b00      	cmp	r3, #0
 8006608:	d0c5      	beq.n	8006596 <_vfiprintf_r+0x176>
 800660a:	9105      	str	r1, [sp, #20]
 800660c:	e7c3      	b.n	8006596 <_vfiprintf_r+0x176>
 800660e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006612:	4604      	mov	r4, r0
 8006614:	2301      	movs	r3, #1
 8006616:	e7f0      	b.n	80065fa <_vfiprintf_r+0x1da>
 8006618:	ab03      	add	r3, sp, #12
 800661a:	9300      	str	r3, [sp, #0]
 800661c:	462a      	mov	r2, r5
 800661e:	4b16      	ldr	r3, [pc, #88]	; (8006678 <_vfiprintf_r+0x258>)
 8006620:	a904      	add	r1, sp, #16
 8006622:	4630      	mov	r0, r6
 8006624:	f3af 8000 	nop.w
 8006628:	4607      	mov	r7, r0
 800662a:	1c78      	adds	r0, r7, #1
 800662c:	d1d6      	bne.n	80065dc <_vfiprintf_r+0x1bc>
 800662e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006630:	07d9      	lsls	r1, r3, #31
 8006632:	d405      	bmi.n	8006640 <_vfiprintf_r+0x220>
 8006634:	89ab      	ldrh	r3, [r5, #12]
 8006636:	059a      	lsls	r2, r3, #22
 8006638:	d402      	bmi.n	8006640 <_vfiprintf_r+0x220>
 800663a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800663c:	f7ff fdb7 	bl	80061ae <__retarget_lock_release_recursive>
 8006640:	89ab      	ldrh	r3, [r5, #12]
 8006642:	065b      	lsls	r3, r3, #25
 8006644:	f53f af12 	bmi.w	800646c <_vfiprintf_r+0x4c>
 8006648:	9809      	ldr	r0, [sp, #36]	; 0x24
 800664a:	e711      	b.n	8006470 <_vfiprintf_r+0x50>
 800664c:	ab03      	add	r3, sp, #12
 800664e:	9300      	str	r3, [sp, #0]
 8006650:	462a      	mov	r2, r5
 8006652:	4b09      	ldr	r3, [pc, #36]	; (8006678 <_vfiprintf_r+0x258>)
 8006654:	a904      	add	r1, sp, #16
 8006656:	4630      	mov	r0, r6
 8006658:	f000 f880 	bl	800675c <_printf_i>
 800665c:	e7e4      	b.n	8006628 <_vfiprintf_r+0x208>
 800665e:	bf00      	nop
 8006660:	08006e9c 	.word	0x08006e9c
 8006664:	08006ebc 	.word	0x08006ebc
 8006668:	08006e7c 	.word	0x08006e7c
 800666c:	08006edc 	.word	0x08006edc
 8006670:	08006ee6 	.word	0x08006ee6
 8006674:	00000000 	.word	0x00000000
 8006678:	080063fb 	.word	0x080063fb
 800667c:	08006ee2 	.word	0x08006ee2

08006680 <_printf_common>:
 8006680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006684:	4616      	mov	r6, r2
 8006686:	4699      	mov	r9, r3
 8006688:	688a      	ldr	r2, [r1, #8]
 800668a:	690b      	ldr	r3, [r1, #16]
 800668c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006690:	4293      	cmp	r3, r2
 8006692:	bfb8      	it	lt
 8006694:	4613      	movlt	r3, r2
 8006696:	6033      	str	r3, [r6, #0]
 8006698:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800669c:	4607      	mov	r7, r0
 800669e:	460c      	mov	r4, r1
 80066a0:	b10a      	cbz	r2, 80066a6 <_printf_common+0x26>
 80066a2:	3301      	adds	r3, #1
 80066a4:	6033      	str	r3, [r6, #0]
 80066a6:	6823      	ldr	r3, [r4, #0]
 80066a8:	0699      	lsls	r1, r3, #26
 80066aa:	bf42      	ittt	mi
 80066ac:	6833      	ldrmi	r3, [r6, #0]
 80066ae:	3302      	addmi	r3, #2
 80066b0:	6033      	strmi	r3, [r6, #0]
 80066b2:	6825      	ldr	r5, [r4, #0]
 80066b4:	f015 0506 	ands.w	r5, r5, #6
 80066b8:	d106      	bne.n	80066c8 <_printf_common+0x48>
 80066ba:	f104 0a19 	add.w	sl, r4, #25
 80066be:	68e3      	ldr	r3, [r4, #12]
 80066c0:	6832      	ldr	r2, [r6, #0]
 80066c2:	1a9b      	subs	r3, r3, r2
 80066c4:	42ab      	cmp	r3, r5
 80066c6:	dc26      	bgt.n	8006716 <_printf_common+0x96>
 80066c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066cc:	1e13      	subs	r3, r2, #0
 80066ce:	6822      	ldr	r2, [r4, #0]
 80066d0:	bf18      	it	ne
 80066d2:	2301      	movne	r3, #1
 80066d4:	0692      	lsls	r2, r2, #26
 80066d6:	d42b      	bmi.n	8006730 <_printf_common+0xb0>
 80066d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066dc:	4649      	mov	r1, r9
 80066de:	4638      	mov	r0, r7
 80066e0:	47c0      	blx	r8
 80066e2:	3001      	adds	r0, #1
 80066e4:	d01e      	beq.n	8006724 <_printf_common+0xa4>
 80066e6:	6823      	ldr	r3, [r4, #0]
 80066e8:	68e5      	ldr	r5, [r4, #12]
 80066ea:	6832      	ldr	r2, [r6, #0]
 80066ec:	f003 0306 	and.w	r3, r3, #6
 80066f0:	2b04      	cmp	r3, #4
 80066f2:	bf08      	it	eq
 80066f4:	1aad      	subeq	r5, r5, r2
 80066f6:	68a3      	ldr	r3, [r4, #8]
 80066f8:	6922      	ldr	r2, [r4, #16]
 80066fa:	bf0c      	ite	eq
 80066fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006700:	2500      	movne	r5, #0
 8006702:	4293      	cmp	r3, r2
 8006704:	bfc4      	itt	gt
 8006706:	1a9b      	subgt	r3, r3, r2
 8006708:	18ed      	addgt	r5, r5, r3
 800670a:	2600      	movs	r6, #0
 800670c:	341a      	adds	r4, #26
 800670e:	42b5      	cmp	r5, r6
 8006710:	d11a      	bne.n	8006748 <_printf_common+0xc8>
 8006712:	2000      	movs	r0, #0
 8006714:	e008      	b.n	8006728 <_printf_common+0xa8>
 8006716:	2301      	movs	r3, #1
 8006718:	4652      	mov	r2, sl
 800671a:	4649      	mov	r1, r9
 800671c:	4638      	mov	r0, r7
 800671e:	47c0      	blx	r8
 8006720:	3001      	adds	r0, #1
 8006722:	d103      	bne.n	800672c <_printf_common+0xac>
 8006724:	f04f 30ff 	mov.w	r0, #4294967295
 8006728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800672c:	3501      	adds	r5, #1
 800672e:	e7c6      	b.n	80066be <_printf_common+0x3e>
 8006730:	18e1      	adds	r1, r4, r3
 8006732:	1c5a      	adds	r2, r3, #1
 8006734:	2030      	movs	r0, #48	; 0x30
 8006736:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800673a:	4422      	add	r2, r4
 800673c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006740:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006744:	3302      	adds	r3, #2
 8006746:	e7c7      	b.n	80066d8 <_printf_common+0x58>
 8006748:	2301      	movs	r3, #1
 800674a:	4622      	mov	r2, r4
 800674c:	4649      	mov	r1, r9
 800674e:	4638      	mov	r0, r7
 8006750:	47c0      	blx	r8
 8006752:	3001      	adds	r0, #1
 8006754:	d0e6      	beq.n	8006724 <_printf_common+0xa4>
 8006756:	3601      	adds	r6, #1
 8006758:	e7d9      	b.n	800670e <_printf_common+0x8e>
	...

0800675c <_printf_i>:
 800675c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006760:	460c      	mov	r4, r1
 8006762:	4691      	mov	r9, r2
 8006764:	7e27      	ldrb	r7, [r4, #24]
 8006766:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006768:	2f78      	cmp	r7, #120	; 0x78
 800676a:	4680      	mov	r8, r0
 800676c:	469a      	mov	sl, r3
 800676e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006772:	d807      	bhi.n	8006784 <_printf_i+0x28>
 8006774:	2f62      	cmp	r7, #98	; 0x62
 8006776:	d80a      	bhi.n	800678e <_printf_i+0x32>
 8006778:	2f00      	cmp	r7, #0
 800677a:	f000 80d8 	beq.w	800692e <_printf_i+0x1d2>
 800677e:	2f58      	cmp	r7, #88	; 0x58
 8006780:	f000 80a3 	beq.w	80068ca <_printf_i+0x16e>
 8006784:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006788:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800678c:	e03a      	b.n	8006804 <_printf_i+0xa8>
 800678e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006792:	2b15      	cmp	r3, #21
 8006794:	d8f6      	bhi.n	8006784 <_printf_i+0x28>
 8006796:	a001      	add	r0, pc, #4	; (adr r0, 800679c <_printf_i+0x40>)
 8006798:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800679c:	080067f5 	.word	0x080067f5
 80067a0:	08006809 	.word	0x08006809
 80067a4:	08006785 	.word	0x08006785
 80067a8:	08006785 	.word	0x08006785
 80067ac:	08006785 	.word	0x08006785
 80067b0:	08006785 	.word	0x08006785
 80067b4:	08006809 	.word	0x08006809
 80067b8:	08006785 	.word	0x08006785
 80067bc:	08006785 	.word	0x08006785
 80067c0:	08006785 	.word	0x08006785
 80067c4:	08006785 	.word	0x08006785
 80067c8:	08006915 	.word	0x08006915
 80067cc:	08006839 	.word	0x08006839
 80067d0:	080068f7 	.word	0x080068f7
 80067d4:	08006785 	.word	0x08006785
 80067d8:	08006785 	.word	0x08006785
 80067dc:	08006937 	.word	0x08006937
 80067e0:	08006785 	.word	0x08006785
 80067e4:	08006839 	.word	0x08006839
 80067e8:	08006785 	.word	0x08006785
 80067ec:	08006785 	.word	0x08006785
 80067f0:	080068ff 	.word	0x080068ff
 80067f4:	680b      	ldr	r3, [r1, #0]
 80067f6:	1d1a      	adds	r2, r3, #4
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	600a      	str	r2, [r1, #0]
 80067fc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006800:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006804:	2301      	movs	r3, #1
 8006806:	e0a3      	b.n	8006950 <_printf_i+0x1f4>
 8006808:	6825      	ldr	r5, [r4, #0]
 800680a:	6808      	ldr	r0, [r1, #0]
 800680c:	062e      	lsls	r6, r5, #24
 800680e:	f100 0304 	add.w	r3, r0, #4
 8006812:	d50a      	bpl.n	800682a <_printf_i+0xce>
 8006814:	6805      	ldr	r5, [r0, #0]
 8006816:	600b      	str	r3, [r1, #0]
 8006818:	2d00      	cmp	r5, #0
 800681a:	da03      	bge.n	8006824 <_printf_i+0xc8>
 800681c:	232d      	movs	r3, #45	; 0x2d
 800681e:	426d      	negs	r5, r5
 8006820:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006824:	485e      	ldr	r0, [pc, #376]	; (80069a0 <_printf_i+0x244>)
 8006826:	230a      	movs	r3, #10
 8006828:	e019      	b.n	800685e <_printf_i+0x102>
 800682a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800682e:	6805      	ldr	r5, [r0, #0]
 8006830:	600b      	str	r3, [r1, #0]
 8006832:	bf18      	it	ne
 8006834:	b22d      	sxthne	r5, r5
 8006836:	e7ef      	b.n	8006818 <_printf_i+0xbc>
 8006838:	680b      	ldr	r3, [r1, #0]
 800683a:	6825      	ldr	r5, [r4, #0]
 800683c:	1d18      	adds	r0, r3, #4
 800683e:	6008      	str	r0, [r1, #0]
 8006840:	0628      	lsls	r0, r5, #24
 8006842:	d501      	bpl.n	8006848 <_printf_i+0xec>
 8006844:	681d      	ldr	r5, [r3, #0]
 8006846:	e002      	b.n	800684e <_printf_i+0xf2>
 8006848:	0669      	lsls	r1, r5, #25
 800684a:	d5fb      	bpl.n	8006844 <_printf_i+0xe8>
 800684c:	881d      	ldrh	r5, [r3, #0]
 800684e:	4854      	ldr	r0, [pc, #336]	; (80069a0 <_printf_i+0x244>)
 8006850:	2f6f      	cmp	r7, #111	; 0x6f
 8006852:	bf0c      	ite	eq
 8006854:	2308      	moveq	r3, #8
 8006856:	230a      	movne	r3, #10
 8006858:	2100      	movs	r1, #0
 800685a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800685e:	6866      	ldr	r6, [r4, #4]
 8006860:	60a6      	str	r6, [r4, #8]
 8006862:	2e00      	cmp	r6, #0
 8006864:	bfa2      	ittt	ge
 8006866:	6821      	ldrge	r1, [r4, #0]
 8006868:	f021 0104 	bicge.w	r1, r1, #4
 800686c:	6021      	strge	r1, [r4, #0]
 800686e:	b90d      	cbnz	r5, 8006874 <_printf_i+0x118>
 8006870:	2e00      	cmp	r6, #0
 8006872:	d04d      	beq.n	8006910 <_printf_i+0x1b4>
 8006874:	4616      	mov	r6, r2
 8006876:	fbb5 f1f3 	udiv	r1, r5, r3
 800687a:	fb03 5711 	mls	r7, r3, r1, r5
 800687e:	5dc7      	ldrb	r7, [r0, r7]
 8006880:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006884:	462f      	mov	r7, r5
 8006886:	42bb      	cmp	r3, r7
 8006888:	460d      	mov	r5, r1
 800688a:	d9f4      	bls.n	8006876 <_printf_i+0x11a>
 800688c:	2b08      	cmp	r3, #8
 800688e:	d10b      	bne.n	80068a8 <_printf_i+0x14c>
 8006890:	6823      	ldr	r3, [r4, #0]
 8006892:	07df      	lsls	r7, r3, #31
 8006894:	d508      	bpl.n	80068a8 <_printf_i+0x14c>
 8006896:	6923      	ldr	r3, [r4, #16]
 8006898:	6861      	ldr	r1, [r4, #4]
 800689a:	4299      	cmp	r1, r3
 800689c:	bfde      	ittt	le
 800689e:	2330      	movle	r3, #48	; 0x30
 80068a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80068a4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80068a8:	1b92      	subs	r2, r2, r6
 80068aa:	6122      	str	r2, [r4, #16]
 80068ac:	f8cd a000 	str.w	sl, [sp]
 80068b0:	464b      	mov	r3, r9
 80068b2:	aa03      	add	r2, sp, #12
 80068b4:	4621      	mov	r1, r4
 80068b6:	4640      	mov	r0, r8
 80068b8:	f7ff fee2 	bl	8006680 <_printf_common>
 80068bc:	3001      	adds	r0, #1
 80068be:	d14c      	bne.n	800695a <_printf_i+0x1fe>
 80068c0:	f04f 30ff 	mov.w	r0, #4294967295
 80068c4:	b004      	add	sp, #16
 80068c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ca:	4835      	ldr	r0, [pc, #212]	; (80069a0 <_printf_i+0x244>)
 80068cc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80068d0:	6823      	ldr	r3, [r4, #0]
 80068d2:	680e      	ldr	r6, [r1, #0]
 80068d4:	061f      	lsls	r7, r3, #24
 80068d6:	f856 5b04 	ldr.w	r5, [r6], #4
 80068da:	600e      	str	r6, [r1, #0]
 80068dc:	d514      	bpl.n	8006908 <_printf_i+0x1ac>
 80068de:	07d9      	lsls	r1, r3, #31
 80068e0:	bf44      	itt	mi
 80068e2:	f043 0320 	orrmi.w	r3, r3, #32
 80068e6:	6023      	strmi	r3, [r4, #0]
 80068e8:	b91d      	cbnz	r5, 80068f2 <_printf_i+0x196>
 80068ea:	6823      	ldr	r3, [r4, #0]
 80068ec:	f023 0320 	bic.w	r3, r3, #32
 80068f0:	6023      	str	r3, [r4, #0]
 80068f2:	2310      	movs	r3, #16
 80068f4:	e7b0      	b.n	8006858 <_printf_i+0xfc>
 80068f6:	6823      	ldr	r3, [r4, #0]
 80068f8:	f043 0320 	orr.w	r3, r3, #32
 80068fc:	6023      	str	r3, [r4, #0]
 80068fe:	2378      	movs	r3, #120	; 0x78
 8006900:	4828      	ldr	r0, [pc, #160]	; (80069a4 <_printf_i+0x248>)
 8006902:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006906:	e7e3      	b.n	80068d0 <_printf_i+0x174>
 8006908:	065e      	lsls	r6, r3, #25
 800690a:	bf48      	it	mi
 800690c:	b2ad      	uxthmi	r5, r5
 800690e:	e7e6      	b.n	80068de <_printf_i+0x182>
 8006910:	4616      	mov	r6, r2
 8006912:	e7bb      	b.n	800688c <_printf_i+0x130>
 8006914:	680b      	ldr	r3, [r1, #0]
 8006916:	6826      	ldr	r6, [r4, #0]
 8006918:	6960      	ldr	r0, [r4, #20]
 800691a:	1d1d      	adds	r5, r3, #4
 800691c:	600d      	str	r5, [r1, #0]
 800691e:	0635      	lsls	r5, r6, #24
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	d501      	bpl.n	8006928 <_printf_i+0x1cc>
 8006924:	6018      	str	r0, [r3, #0]
 8006926:	e002      	b.n	800692e <_printf_i+0x1d2>
 8006928:	0671      	lsls	r1, r6, #25
 800692a:	d5fb      	bpl.n	8006924 <_printf_i+0x1c8>
 800692c:	8018      	strh	r0, [r3, #0]
 800692e:	2300      	movs	r3, #0
 8006930:	6123      	str	r3, [r4, #16]
 8006932:	4616      	mov	r6, r2
 8006934:	e7ba      	b.n	80068ac <_printf_i+0x150>
 8006936:	680b      	ldr	r3, [r1, #0]
 8006938:	1d1a      	adds	r2, r3, #4
 800693a:	600a      	str	r2, [r1, #0]
 800693c:	681e      	ldr	r6, [r3, #0]
 800693e:	6862      	ldr	r2, [r4, #4]
 8006940:	2100      	movs	r1, #0
 8006942:	4630      	mov	r0, r6
 8006944:	f7f9 fc54 	bl	80001f0 <memchr>
 8006948:	b108      	cbz	r0, 800694e <_printf_i+0x1f2>
 800694a:	1b80      	subs	r0, r0, r6
 800694c:	6060      	str	r0, [r4, #4]
 800694e:	6863      	ldr	r3, [r4, #4]
 8006950:	6123      	str	r3, [r4, #16]
 8006952:	2300      	movs	r3, #0
 8006954:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006958:	e7a8      	b.n	80068ac <_printf_i+0x150>
 800695a:	6923      	ldr	r3, [r4, #16]
 800695c:	4632      	mov	r2, r6
 800695e:	4649      	mov	r1, r9
 8006960:	4640      	mov	r0, r8
 8006962:	47d0      	blx	sl
 8006964:	3001      	adds	r0, #1
 8006966:	d0ab      	beq.n	80068c0 <_printf_i+0x164>
 8006968:	6823      	ldr	r3, [r4, #0]
 800696a:	079b      	lsls	r3, r3, #30
 800696c:	d413      	bmi.n	8006996 <_printf_i+0x23a>
 800696e:	68e0      	ldr	r0, [r4, #12]
 8006970:	9b03      	ldr	r3, [sp, #12]
 8006972:	4298      	cmp	r0, r3
 8006974:	bfb8      	it	lt
 8006976:	4618      	movlt	r0, r3
 8006978:	e7a4      	b.n	80068c4 <_printf_i+0x168>
 800697a:	2301      	movs	r3, #1
 800697c:	4632      	mov	r2, r6
 800697e:	4649      	mov	r1, r9
 8006980:	4640      	mov	r0, r8
 8006982:	47d0      	blx	sl
 8006984:	3001      	adds	r0, #1
 8006986:	d09b      	beq.n	80068c0 <_printf_i+0x164>
 8006988:	3501      	adds	r5, #1
 800698a:	68e3      	ldr	r3, [r4, #12]
 800698c:	9903      	ldr	r1, [sp, #12]
 800698e:	1a5b      	subs	r3, r3, r1
 8006990:	42ab      	cmp	r3, r5
 8006992:	dcf2      	bgt.n	800697a <_printf_i+0x21e>
 8006994:	e7eb      	b.n	800696e <_printf_i+0x212>
 8006996:	2500      	movs	r5, #0
 8006998:	f104 0619 	add.w	r6, r4, #25
 800699c:	e7f5      	b.n	800698a <_printf_i+0x22e>
 800699e:	bf00      	nop
 80069a0:	08006eed 	.word	0x08006eed
 80069a4:	08006efe 	.word	0x08006efe

080069a8 <_sbrk_r>:
 80069a8:	b538      	push	{r3, r4, r5, lr}
 80069aa:	4d06      	ldr	r5, [pc, #24]	; (80069c4 <_sbrk_r+0x1c>)
 80069ac:	2300      	movs	r3, #0
 80069ae:	4604      	mov	r4, r0
 80069b0:	4608      	mov	r0, r1
 80069b2:	602b      	str	r3, [r5, #0]
 80069b4:	f7fa fdb0 	bl	8001518 <_sbrk>
 80069b8:	1c43      	adds	r3, r0, #1
 80069ba:	d102      	bne.n	80069c2 <_sbrk_r+0x1a>
 80069bc:	682b      	ldr	r3, [r5, #0]
 80069be:	b103      	cbz	r3, 80069c2 <_sbrk_r+0x1a>
 80069c0:	6023      	str	r3, [r4, #0]
 80069c2:	bd38      	pop	{r3, r4, r5, pc}
 80069c4:	20000870 	.word	0x20000870

080069c8 <__sread>:
 80069c8:	b510      	push	{r4, lr}
 80069ca:	460c      	mov	r4, r1
 80069cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069d0:	f000 f8a0 	bl	8006b14 <_read_r>
 80069d4:	2800      	cmp	r0, #0
 80069d6:	bfab      	itete	ge
 80069d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80069da:	89a3      	ldrhlt	r3, [r4, #12]
 80069dc:	181b      	addge	r3, r3, r0
 80069de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80069e2:	bfac      	ite	ge
 80069e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80069e6:	81a3      	strhlt	r3, [r4, #12]
 80069e8:	bd10      	pop	{r4, pc}

080069ea <__swrite>:
 80069ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069ee:	461f      	mov	r7, r3
 80069f0:	898b      	ldrh	r3, [r1, #12]
 80069f2:	05db      	lsls	r3, r3, #23
 80069f4:	4605      	mov	r5, r0
 80069f6:	460c      	mov	r4, r1
 80069f8:	4616      	mov	r6, r2
 80069fa:	d505      	bpl.n	8006a08 <__swrite+0x1e>
 80069fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a00:	2302      	movs	r3, #2
 8006a02:	2200      	movs	r2, #0
 8006a04:	f000 f868 	bl	8006ad8 <_lseek_r>
 8006a08:	89a3      	ldrh	r3, [r4, #12]
 8006a0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a12:	81a3      	strh	r3, [r4, #12]
 8006a14:	4632      	mov	r2, r6
 8006a16:	463b      	mov	r3, r7
 8006a18:	4628      	mov	r0, r5
 8006a1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a1e:	f000 b817 	b.w	8006a50 <_write_r>

08006a22 <__sseek>:
 8006a22:	b510      	push	{r4, lr}
 8006a24:	460c      	mov	r4, r1
 8006a26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a2a:	f000 f855 	bl	8006ad8 <_lseek_r>
 8006a2e:	1c43      	adds	r3, r0, #1
 8006a30:	89a3      	ldrh	r3, [r4, #12]
 8006a32:	bf15      	itete	ne
 8006a34:	6560      	strne	r0, [r4, #84]	; 0x54
 8006a36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006a3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006a3e:	81a3      	strheq	r3, [r4, #12]
 8006a40:	bf18      	it	ne
 8006a42:	81a3      	strhne	r3, [r4, #12]
 8006a44:	bd10      	pop	{r4, pc}

08006a46 <__sclose>:
 8006a46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a4a:	f000 b813 	b.w	8006a74 <_close_r>
	...

08006a50 <_write_r>:
 8006a50:	b538      	push	{r3, r4, r5, lr}
 8006a52:	4d07      	ldr	r5, [pc, #28]	; (8006a70 <_write_r+0x20>)
 8006a54:	4604      	mov	r4, r0
 8006a56:	4608      	mov	r0, r1
 8006a58:	4611      	mov	r1, r2
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	602a      	str	r2, [r5, #0]
 8006a5e:	461a      	mov	r2, r3
 8006a60:	f7fa fd09 	bl	8001476 <_write>
 8006a64:	1c43      	adds	r3, r0, #1
 8006a66:	d102      	bne.n	8006a6e <_write_r+0x1e>
 8006a68:	682b      	ldr	r3, [r5, #0]
 8006a6a:	b103      	cbz	r3, 8006a6e <_write_r+0x1e>
 8006a6c:	6023      	str	r3, [r4, #0]
 8006a6e:	bd38      	pop	{r3, r4, r5, pc}
 8006a70:	20000870 	.word	0x20000870

08006a74 <_close_r>:
 8006a74:	b538      	push	{r3, r4, r5, lr}
 8006a76:	4d06      	ldr	r5, [pc, #24]	; (8006a90 <_close_r+0x1c>)
 8006a78:	2300      	movs	r3, #0
 8006a7a:	4604      	mov	r4, r0
 8006a7c:	4608      	mov	r0, r1
 8006a7e:	602b      	str	r3, [r5, #0]
 8006a80:	f7fa fd15 	bl	80014ae <_close>
 8006a84:	1c43      	adds	r3, r0, #1
 8006a86:	d102      	bne.n	8006a8e <_close_r+0x1a>
 8006a88:	682b      	ldr	r3, [r5, #0]
 8006a8a:	b103      	cbz	r3, 8006a8e <_close_r+0x1a>
 8006a8c:	6023      	str	r3, [r4, #0]
 8006a8e:	bd38      	pop	{r3, r4, r5, pc}
 8006a90:	20000870 	.word	0x20000870

08006a94 <_fstat_r>:
 8006a94:	b538      	push	{r3, r4, r5, lr}
 8006a96:	4d07      	ldr	r5, [pc, #28]	; (8006ab4 <_fstat_r+0x20>)
 8006a98:	2300      	movs	r3, #0
 8006a9a:	4604      	mov	r4, r0
 8006a9c:	4608      	mov	r0, r1
 8006a9e:	4611      	mov	r1, r2
 8006aa0:	602b      	str	r3, [r5, #0]
 8006aa2:	f7fa fd10 	bl	80014c6 <_fstat>
 8006aa6:	1c43      	adds	r3, r0, #1
 8006aa8:	d102      	bne.n	8006ab0 <_fstat_r+0x1c>
 8006aaa:	682b      	ldr	r3, [r5, #0]
 8006aac:	b103      	cbz	r3, 8006ab0 <_fstat_r+0x1c>
 8006aae:	6023      	str	r3, [r4, #0]
 8006ab0:	bd38      	pop	{r3, r4, r5, pc}
 8006ab2:	bf00      	nop
 8006ab4:	20000870 	.word	0x20000870

08006ab8 <_isatty_r>:
 8006ab8:	b538      	push	{r3, r4, r5, lr}
 8006aba:	4d06      	ldr	r5, [pc, #24]	; (8006ad4 <_isatty_r+0x1c>)
 8006abc:	2300      	movs	r3, #0
 8006abe:	4604      	mov	r4, r0
 8006ac0:	4608      	mov	r0, r1
 8006ac2:	602b      	str	r3, [r5, #0]
 8006ac4:	f7fa fd0f 	bl	80014e6 <_isatty>
 8006ac8:	1c43      	adds	r3, r0, #1
 8006aca:	d102      	bne.n	8006ad2 <_isatty_r+0x1a>
 8006acc:	682b      	ldr	r3, [r5, #0]
 8006ace:	b103      	cbz	r3, 8006ad2 <_isatty_r+0x1a>
 8006ad0:	6023      	str	r3, [r4, #0]
 8006ad2:	bd38      	pop	{r3, r4, r5, pc}
 8006ad4:	20000870 	.word	0x20000870

08006ad8 <_lseek_r>:
 8006ad8:	b538      	push	{r3, r4, r5, lr}
 8006ada:	4d07      	ldr	r5, [pc, #28]	; (8006af8 <_lseek_r+0x20>)
 8006adc:	4604      	mov	r4, r0
 8006ade:	4608      	mov	r0, r1
 8006ae0:	4611      	mov	r1, r2
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	602a      	str	r2, [r5, #0]
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	f7fa fd08 	bl	80014fc <_lseek>
 8006aec:	1c43      	adds	r3, r0, #1
 8006aee:	d102      	bne.n	8006af6 <_lseek_r+0x1e>
 8006af0:	682b      	ldr	r3, [r5, #0]
 8006af2:	b103      	cbz	r3, 8006af6 <_lseek_r+0x1e>
 8006af4:	6023      	str	r3, [r4, #0]
 8006af6:	bd38      	pop	{r3, r4, r5, pc}
 8006af8:	20000870 	.word	0x20000870

08006afc <__malloc_lock>:
 8006afc:	4801      	ldr	r0, [pc, #4]	; (8006b04 <__malloc_lock+0x8>)
 8006afe:	f7ff bb55 	b.w	80061ac <__retarget_lock_acquire_recursive>
 8006b02:	bf00      	nop
 8006b04:	20000868 	.word	0x20000868

08006b08 <__malloc_unlock>:
 8006b08:	4801      	ldr	r0, [pc, #4]	; (8006b10 <__malloc_unlock+0x8>)
 8006b0a:	f7ff bb50 	b.w	80061ae <__retarget_lock_release_recursive>
 8006b0e:	bf00      	nop
 8006b10:	20000868 	.word	0x20000868

08006b14 <_read_r>:
 8006b14:	b538      	push	{r3, r4, r5, lr}
 8006b16:	4d07      	ldr	r5, [pc, #28]	; (8006b34 <_read_r+0x20>)
 8006b18:	4604      	mov	r4, r0
 8006b1a:	4608      	mov	r0, r1
 8006b1c:	4611      	mov	r1, r2
 8006b1e:	2200      	movs	r2, #0
 8006b20:	602a      	str	r2, [r5, #0]
 8006b22:	461a      	mov	r2, r3
 8006b24:	f7fa fc8a 	bl	800143c <_read>
 8006b28:	1c43      	adds	r3, r0, #1
 8006b2a:	d102      	bne.n	8006b32 <_read_r+0x1e>
 8006b2c:	682b      	ldr	r3, [r5, #0]
 8006b2e:	b103      	cbz	r3, 8006b32 <_read_r+0x1e>
 8006b30:	6023      	str	r3, [r4, #0]
 8006b32:	bd38      	pop	{r3, r4, r5, pc}
 8006b34:	20000870 	.word	0x20000870

08006b38 <_init>:
 8006b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b3a:	bf00      	nop
 8006b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b3e:	bc08      	pop	{r3}
 8006b40:	469e      	mov	lr, r3
 8006b42:	4770      	bx	lr

08006b44 <_fini>:
 8006b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b46:	bf00      	nop
 8006b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b4a:	bc08      	pop	{r3}
 8006b4c:	469e      	mov	lr, r3
 8006b4e:	4770      	bx	lr
